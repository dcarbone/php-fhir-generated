<?php /** @noinspection PhpFullyQualifiedNameUsageInspection */

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\STU3;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: February 12th, 2025 19:32+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Wed, Apr 19, 2017 07:44+1000 for FHIR v3.0.1
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */

use DCarbone\PHPFHIRGenerated\Versions\STU3\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassnameWithInvalidString()
    {
        $this->assertNull(VersionTypeMap::getTypeClassname('\\stdClass'));
    }

    public function testGetTypeClassnameWithInvalidXML()
    {
        $sxe = new \SimpleXMLElement('<NotAResource></NotAResource>');
        $this->assertNull(VersionTypeMap::getTypeClassname($sxe));
    }

    public function testGetTypeClassnameWithJSONMissingResourceType()
    {
        $json = new \stdClass();
        $json->jimmy = 'Observation';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithJSONInvalidResourceType()
    {
        $json = new \stdClass();
        $json->resourceType = 'Steve';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithTypeName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassname('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassname('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassname('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList', VersionTypeMap::getTypeClassname('AccountStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList', VersionTypeMap::getTypeClassname('ActionCardinalityBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList', VersionTypeMap::getTypeClassname('ActionConditionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList', VersionTypeMap::getTypeClassname('ActionGroupingBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList', VersionTypeMap::getTypeClassname('ActionList-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList', VersionTypeMap::getTypeClassname('ActionParticipantType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList', VersionTypeMap::getTypeClassname('ActionPrecheckBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList', VersionTypeMap::getTypeClassname('ActionRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList', VersionTypeMap::getTypeClassname('ActionRequiredBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList', VersionTypeMap::getTypeClassname('ActionSelectionBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList', VersionTypeMap::getTypeClassname('AddressType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList', VersionTypeMap::getTypeClassname('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList', VersionTypeMap::getTypeClassname('AdministrativeGender-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList', VersionTypeMap::getTypeClassname('AdverseEventCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList', VersionTypeMap::getTypeClassname('AdverseEventCausality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList', VersionTypeMap::getTypeClassname('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList', VersionTypeMap::getTypeClassname('AllergyIntoleranceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList', VersionTypeMap::getTypeClassname('AllergyIntoleranceClinicalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList', VersionTypeMap::getTypeClassname('AllergyIntoleranceCriticality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList', VersionTypeMap::getTypeClassname('AllergyIntoleranceSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList', VersionTypeMap::getTypeClassname('AllergyIntoleranceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList', VersionTypeMap::getTypeClassname('AllergyIntoleranceVerificationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList', VersionTypeMap::getTypeClassname('AppointmentStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList', VersionTypeMap::getTypeClassname('AssertionDirectionType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList', VersionTypeMap::getTypeClassname('AssertionOperatorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList', VersionTypeMap::getTypeClassname('AssertionResponseTypes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList', VersionTypeMap::getTypeClassname('AuditEventAction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList', VersionTypeMap::getTypeClassname('AuditEventAgentNetworkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList', VersionTypeMap::getTypeClassname('AuditEventOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList', VersionTypeMap::getTypeClassname('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList', VersionTypeMap::getTypeClassname('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList', VersionTypeMap::getTypeClassname('CapabilityStatementKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList', VersionTypeMap::getTypeClassname('CarePlanActivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList', VersionTypeMap::getTypeClassname('CarePlanIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList', VersionTypeMap::getTypeClassname('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList', VersionTypeMap::getTypeClassname('CareTeamStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList', VersionTypeMap::getTypeClassname('ChargeItemStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList', VersionTypeMap::getTypeClassname('ClinicalImpressionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList', VersionTypeMap::getTypeClassname('CodeSystemContentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList', VersionTypeMap::getTypeClassname('CodeSystemHierarchyMeaning-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList', VersionTypeMap::getTypeClassname('CompartmentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList', VersionTypeMap::getTypeClassname('CompositionAttestationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList', VersionTypeMap::getTypeClassname('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList', VersionTypeMap::getTypeClassname('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList', VersionTypeMap::getTypeClassname('ConceptMapGroupUnmappedMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList', VersionTypeMap::getTypeClassname('ConditionalDeleteStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList', VersionTypeMap::getTypeClassname('ConditionalReadStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList', VersionTypeMap::getTypeClassname('ConditionClinicalStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList', VersionTypeMap::getTypeClassname('ConditionVerificationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList', VersionTypeMap::getTypeClassname('ConfidentialityClassification-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList', VersionTypeMap::getTypeClassname('ConsentDataMeaning-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList', VersionTypeMap::getTypeClassname('ConsentExceptType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList', VersionTypeMap::getTypeClassname('ConsentState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList', VersionTypeMap::getTypeClassname('ConstraintSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList', VersionTypeMap::getTypeClassname('ContactPointSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList', VersionTypeMap::getTypeClassname('ContactPointUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList', VersionTypeMap::getTypeClassname('ContentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList', VersionTypeMap::getTypeClassname('ContractResourceStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList', VersionTypeMap::getTypeClassname('ContributorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList', VersionTypeMap::getTypeClassname('DataElementStringency-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList', VersionTypeMap::getTypeClassname('DaysOfWeek-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList', VersionTypeMap::getTypeClassname('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList', VersionTypeMap::getTypeClassname('DeviceMetricCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList', VersionTypeMap::getTypeClassname('DeviceMetricColor-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList', VersionTypeMap::getTypeClassname('DeviceMetricOperationalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList', VersionTypeMap::getTypeClassname('DeviceUseStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList', VersionTypeMap::getTypeClassname('DiagnosticReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList', VersionTypeMap::getTypeClassname('DigitalMediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList', VersionTypeMap::getTypeClassname('DiscriminatorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList', VersionTypeMap::getTypeClassname('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList', VersionTypeMap::getTypeClassname('DocumentReferenceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList', VersionTypeMap::getTypeClassname('DocumentRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList', VersionTypeMap::getTypeClassname('EncounterLocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList', VersionTypeMap::getTypeClassname('EncounterStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList', VersionTypeMap::getTypeClassname('EndpointStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList', VersionTypeMap::getTypeClassname('EpisodeOfCareStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList', VersionTypeMap::getTypeClassname('EventCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList', VersionTypeMap::getTypeClassname('EventStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList', VersionTypeMap::getTypeClassname('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList', VersionTypeMap::getTypeClassname('ExplanationOfBenefitStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList', VersionTypeMap::getTypeClassname('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList', VersionTypeMap::getTypeClassname('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList', VersionTypeMap::getTypeClassname('FHIRAllTypes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList', VersionTypeMap::getTypeClassname('FHIRDefinedType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList', VersionTypeMap::getTypeClassname('FHIRDeviceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList', VersionTypeMap::getTypeClassname('FHIRSubstanceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList', VersionTypeMap::getTypeClassname('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList', VersionTypeMap::getTypeClassname('FinancialResourceStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList', VersionTypeMap::getTypeClassname('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList', VersionTypeMap::getTypeClassname('GoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList', VersionTypeMap::getTypeClassname('GraphCompartmentRule-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList', VersionTypeMap::getTypeClassname('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList', VersionTypeMap::getTypeClassname('GuidanceResponseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList', VersionTypeMap::getTypeClassname('GuideDependencyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList', VersionTypeMap::getTypeClassname('GuidePageKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList', VersionTypeMap::getTypeClassname('HTTPVerb-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList', VersionTypeMap::getTypeClassname('IdentifierUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList', VersionTypeMap::getTypeClassname('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList', VersionTypeMap::getTypeClassname('ImmunizationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList', VersionTypeMap::getTypeClassname('InstanceAvailability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList', VersionTypeMap::getTypeClassname('IssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList', VersionTypeMap::getTypeClassname('IssueType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList', VersionTypeMap::getTypeClassname('LinkageType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList', VersionTypeMap::getTypeClassname('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList', VersionTypeMap::getTypeClassname('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList', VersionTypeMap::getTypeClassname('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList', VersionTypeMap::getTypeClassname('LocationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList', VersionTypeMap::getTypeClassname('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList', VersionTypeMap::getTypeClassname('MeasmntPrinciple-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList', VersionTypeMap::getTypeClassname('MeasureReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList', VersionTypeMap::getTypeClassname('MeasureReportType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList', VersionTypeMap::getTypeClassname('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList', VersionTypeMap::getTypeClassname('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList', VersionTypeMap::getTypeClassname('MedicationRequestIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList', VersionTypeMap::getTypeClassname('MedicationRequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList', VersionTypeMap::getTypeClassname('MedicationRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList', VersionTypeMap::getTypeClassname('MedicationStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList', VersionTypeMap::getTypeClassname('MedicationStatementTaken-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList', VersionTypeMap::getTypeClassname('MedicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList', VersionTypeMap::getTypeClassname('MessageSignificanceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList', VersionTypeMap::getTypeClassname('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList', VersionTypeMap::getTypeClassname('NamingSystemIdentifierType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList', VersionTypeMap::getTypeClassname('NamingSystemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList', VersionTypeMap::getTypeClassname('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList', VersionTypeMap::getTypeClassname('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList', VersionTypeMap::getTypeClassname('NutritionOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList', VersionTypeMap::getTypeClassname('ObservationRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList', VersionTypeMap::getTypeClassname('ObservationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList', VersionTypeMap::getTypeClassname('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList', VersionTypeMap::getTypeClassname('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList', VersionTypeMap::getTypeClassname('ParticipantRequired-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList', VersionTypeMap::getTypeClassname('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList', VersionTypeMap::getTypeClassname('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList', VersionTypeMap::getTypeClassname('PropertyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList', VersionTypeMap::getTypeClassname('ProvenanceEntityRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList', VersionTypeMap::getTypeClassname('PublicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList', VersionTypeMap::getTypeClassname('qualityType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList', VersionTypeMap::getTypeClassname('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList', VersionTypeMap::getTypeClassname('QuestionnaireItemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList', VersionTypeMap::getTypeClassname('QuestionnaireResponseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList', VersionTypeMap::getTypeClassname('ReferenceHandlingPolicy-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList', VersionTypeMap::getTypeClassname('ReferenceVersionRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList', VersionTypeMap::getTypeClassname('RelatedArtifactType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList', VersionTypeMap::getTypeClassname('RemittanceOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList', VersionTypeMap::getTypeClassname('repositoryType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList', VersionTypeMap::getTypeClassname('RequestIntent-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList', VersionTypeMap::getTypeClassname('RequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList', VersionTypeMap::getTypeClassname('RequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList', VersionTypeMap::getTypeClassname('ResearchStudyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList', VersionTypeMap::getTypeClassname('ResearchSubjectStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList', VersionTypeMap::getTypeClassname('ResourceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList', VersionTypeMap::getTypeClassname('ResourceVersionPolicy-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList', VersionTypeMap::getTypeClassname('ResponseType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList', VersionTypeMap::getTypeClassname('RestfulCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList', VersionTypeMap::getTypeClassname('SearchComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList', VersionTypeMap::getTypeClassname('SearchEntryMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList', VersionTypeMap::getTypeClassname('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList', VersionTypeMap::getTypeClassname('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList', VersionTypeMap::getTypeClassname('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList', VersionTypeMap::getTypeClassname('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList', VersionTypeMap::getTypeClassname('SpecimenStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList', VersionTypeMap::getTypeClassname('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList', VersionTypeMap::getTypeClassname('StructureMapContextType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList', VersionTypeMap::getTypeClassname('StructureMapGroupTypeMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList', VersionTypeMap::getTypeClassname('StructureMapInputMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList', VersionTypeMap::getTypeClassname('StructureMapModelMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList', VersionTypeMap::getTypeClassname('StructureMapSourceListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList', VersionTypeMap::getTypeClassname('StructureMapTargetListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList', VersionTypeMap::getTypeClassname('StructureMapTransform-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList', VersionTypeMap::getTypeClassname('SubscriptionChannelType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList', VersionTypeMap::getTypeClassname('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList', VersionTypeMap::getTypeClassname('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList', VersionTypeMap::getTypeClassname('SupplyRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList', VersionTypeMap::getTypeClassname('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList', VersionTypeMap::getTypeClassname('SystemVersionProcessingMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList', VersionTypeMap::getTypeClassname('TaskStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList', VersionTypeMap::getTypeClassname('TestReportActionResult-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList', VersionTypeMap::getTypeClassname('TestReportParticipantType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList', VersionTypeMap::getTypeClassname('TestReportResult-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList', VersionTypeMap::getTypeClassname('TestReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList', VersionTypeMap::getTypeClassname('TestScriptRequestMethodCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList', VersionTypeMap::getTypeClassname('TriggerType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList', VersionTypeMap::getTypeClassname('TypeDerivationRule-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList', VersionTypeMap::getTypeClassname('TypeRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList', VersionTypeMap::getTypeClassname('UDIEntryType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList', VersionTypeMap::getTypeClassname('UnitsOfTime-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList', VersionTypeMap::getTypeClassname('UnknownContentCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList', VersionTypeMap::getTypeClassname('Use-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList', VersionTypeMap::getTypeClassname('VisionBase-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList', VersionTypeMap::getTypeClassname('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList', VersionTypeMap::getTypeClassname('XPathUsageType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassname('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassname('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassname('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement', VersionTypeMap::getTypeClassname('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus', VersionTypeMap::getTypeClassname('AccountStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior', VersionTypeMap::getTypeClassname('ActionCardinalityBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind', VersionTypeMap::getTypeClassname('ActionConditionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior', VersionTypeMap::getTypeClassname('ActionGroupingBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList', VersionTypeMap::getTypeClassname('ActionList'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType', VersionTypeMap::getTypeClassname('ActionParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior', VersionTypeMap::getTypeClassname('ActionPrecheckBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType', VersionTypeMap::getTypeClassname('ActionRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior', VersionTypeMap::getTypeClassname('ActionRequiredBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior', VersionTypeMap::getTypeClassname('ActionSelectionBehavior'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassname('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType', VersionTypeMap::getTypeClassname('AddressType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassname('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender', VersionTypeMap::getTypeClassname('AdministrativeGender'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory', VersionTypeMap::getTypeClassname('AdverseEventCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality', VersionTypeMap::getTypeClassname('AdverseEventCausality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassname('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory', VersionTypeMap::getTypeClassname('AllergyIntoleranceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus', VersionTypeMap::getTypeClassname('AllergyIntoleranceClinicalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality', VersionTypeMap::getTypeClassname('AllergyIntoleranceCriticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity', VersionTypeMap::getTypeClassname('AllergyIntoleranceSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType', VersionTypeMap::getTypeClassname('AllergyIntoleranceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus', VersionTypeMap::getTypeClassname('AllergyIntoleranceVerificationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation', VersionTypeMap::getTypeClassname('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus', VersionTypeMap::getTypeClassname('AppointmentStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType', VersionTypeMap::getTypeClassname('AssertionDirectionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType', VersionTypeMap::getTypeClassname('AssertionOperatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes', VersionTypeMap::getTypeClassname('AssertionResponseTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassname('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction', VersionTypeMap::getTypeClassname('AuditEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType', VersionTypeMap::getTypeClassname('AuditEventAgentNetworkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome', VersionTypeMap::getTypeClassname('AuditEventOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassname('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage', VersionTypeMap::getTypeClassname('Account.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor', VersionTypeMap::getTypeClassname('Account.Guarantor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue', VersionTypeMap::getTypeClassname('ActivityDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant', VersionTypeMap::getTypeClassname('ActivityDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity', VersionTypeMap::getTypeClassname('AdverseEvent.SuspectEntity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', VersionTypeMap::getTypeClassname('AllergyIntolerance.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', VersionTypeMap::getTypeClassname('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent', VersionTypeMap::getTypeClassname('AuditEvent.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', VersionTypeMap::getTypeClassname('AuditEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity', VersionTypeMap::getTypeClassname('AuditEvent.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', VersionTypeMap::getTypeClassname('AuditEvent.Network'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', VersionTypeMap::getTypeClassname('AuditEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', VersionTypeMap::getTypeClassname('Bundle.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', VersionTypeMap::getTypeClassname('Bundle.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', VersionTypeMap::getTypeClassname('Bundle.Request'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', VersionTypeMap::getTypeClassname('Bundle.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', VersionTypeMap::getTypeClassname('Bundle.Search'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate', VersionTypeMap::getTypeClassname('CapabilityStatement.Certificate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument', VersionTypeMap::getTypeClassname('CapabilityStatement.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint', VersionTypeMap::getTypeClassname('CapabilityStatement.Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent', VersionTypeMap::getTypeClassname('CapabilityStatement.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation', VersionTypeMap::getTypeClassname('CapabilityStatement.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction', VersionTypeMap::getTypeClassname('CapabilityStatement.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1', VersionTypeMap::getTypeClassname('CapabilityStatement.Interaction1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging', VersionTypeMap::getTypeClassname('CapabilityStatement.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation', VersionTypeMap::getTypeClassname('CapabilityStatement.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource', VersionTypeMap::getTypeClassname('CapabilityStatement.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest', VersionTypeMap::getTypeClassname('CapabilityStatement.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam', VersionTypeMap::getTypeClassname('CapabilityStatement.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity', VersionTypeMap::getTypeClassname('CapabilityStatement.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware', VersionTypeMap::getTypeClassname('CapabilityStatement.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage', VersionTypeMap::getTypeClassname('CapabilityStatement.SupportedMessage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassname('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', VersionTypeMap::getTypeClassname('CarePlan.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant', VersionTypeMap::getTypeClassname('CareTeam.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant', VersionTypeMap::getTypeClassname('ChargeItem.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', VersionTypeMap::getTypeClassname('ClaimResponse.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', VersionTypeMap::getTypeClassname('ClaimResponse.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', VersionTypeMap::getTypeClassname('ClaimResponse.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', VersionTypeMap::getTypeClassname('ClaimResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance', VersionTypeMap::getTypeClassname('ClaimResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', VersionTypeMap::getTypeClassname('ClaimResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment', VersionTypeMap::getTypeClassname('ClaimResponse.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote', VersionTypeMap::getTypeClassname('ClaimResponse.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', VersionTypeMap::getTypeClassname('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident', VersionTypeMap::getTypeClassname('Claim.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam', VersionTypeMap::getTypeClassname('Claim.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', VersionTypeMap::getTypeClassname('Claim.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', VersionTypeMap::getTypeClassname('Claim.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation', VersionTypeMap::getTypeClassname('Claim.Information'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance', VersionTypeMap::getTypeClassname('Claim.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', VersionTypeMap::getTypeClassname('Claim.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', VersionTypeMap::getTypeClassname('Claim.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure', VersionTypeMap::getTypeClassname('Claim.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated', VersionTypeMap::getTypeClassname('Claim.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', VersionTypeMap::getTypeClassname('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', VersionTypeMap::getTypeClassname('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation', VersionTypeMap::getTypeClassname('ClinicalImpression.Investigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept', VersionTypeMap::getTypeClassname('CodeSystem.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation', VersionTypeMap::getTypeClassname('CodeSystem.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter', VersionTypeMap::getTypeClassname('CodeSystem.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty', VersionTypeMap::getTypeClassname('CodeSystem.Property'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1', VersionTypeMap::getTypeClassname('CodeSystem.Property1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', VersionTypeMap::getTypeClassname('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester', VersionTypeMap::getTypeClassname('CommunicationRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', VersionTypeMap::getTypeClassname('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource', VersionTypeMap::getTypeClassname('CompartmentDefinition.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassname('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassname('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo', VersionTypeMap::getTypeClassname('Composition.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassname('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassname('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', VersionTypeMap::getTypeClassname('ConceptMap.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup', VersionTypeMap::getTypeClassname('ConceptMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', VersionTypeMap::getTypeClassname('ConceptMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped', VersionTypeMap::getTypeClassname('ConceptMap.Unmapped'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassname('Condition.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassname('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor', VersionTypeMap::getTypeClassname('Consent.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1', VersionTypeMap::getTypeClassname('Consent.Actor1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData', VersionTypeMap::getTypeClassname('Consent.Data'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1', VersionTypeMap::getTypeClassname('Consent.Data1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept', VersionTypeMap::getTypeClassname('Consent.Except'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy', VersionTypeMap::getTypeClassname('Consent.Policy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent', VersionTypeMap::getTypeClassname('Contract.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1', VersionTypeMap::getTypeClassname('Contract.Agent1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', VersionTypeMap::getTypeClassname('Contract.Friendly'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', VersionTypeMap::getTypeClassname('Contract.Legal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', VersionTypeMap::getTypeClassname('Contract.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', VersionTypeMap::getTypeClassname('Contract.Signer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', VersionTypeMap::getTypeClassname('Contract.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', VersionTypeMap::getTypeClassname('Contract.ValuedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1', VersionTypeMap::getTypeClassname('Contract.ValuedItem1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping', VersionTypeMap::getTypeClassname('Coverage.Grouping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping', VersionTypeMap::getTypeClassname('DataElement.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', VersionTypeMap::getTypeClassname('DetectedIssue.Mitigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification', VersionTypeMap::getTypeClassname('DeviceComponent.ProductionSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', VersionTypeMap::getTypeClassname('DeviceMetric.Calibration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester', VersionTypeMap::getTypeClassname('DeviceRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi', VersionTypeMap::getTypeClassname('Device.Udi'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', VersionTypeMap::getTypeClassname('DiagnosticReport.Image'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer', VersionTypeMap::getTypeClassname('DiagnosticReport.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent', VersionTypeMap::getTypeClassname('DocumentManifest.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', VersionTypeMap::getTypeClassname('DocumentManifest.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', VersionTypeMap::getTypeClassname('DocumentReference.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassname('DocumentReference.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated', VersionTypeMap::getTypeClassname('DocumentReference.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassname('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance', VersionTypeMap::getTypeClassname('EligibilityResponse.BenefitBalance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError', VersionTypeMap::getTypeClassname('EligibilityResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial', VersionTypeMap::getTypeClassname('EligibilityResponse.Financial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance', VersionTypeMap::getTypeClassname('EligibilityResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory', VersionTypeMap::getTypeClassname('Encounter.ClassHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis', VersionTypeMap::getTypeClassname('Encounter.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassname('Encounter.Hospitalization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassname('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassname('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', VersionTypeMap::getTypeClassname('Encounter.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis', VersionTypeMap::getTypeClassname('EpisodeOfCare.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', VersionTypeMap::getTypeClassname('EpisodeOfCare.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation', VersionTypeMap::getTypeClassname('ExpansionProfile.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1', VersionTypeMap::getTypeClassname('ExpansionProfile.Designation1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2', VersionTypeMap::getTypeClassname('ExpansionProfile.Designation2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude', VersionTypeMap::getTypeClassname('ExpansionProfile.Exclude'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem', VersionTypeMap::getTypeClassname('ExpansionProfile.ExcludedSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion', VersionTypeMap::getTypeClassname('ExpansionProfile.FixedVersion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude', VersionTypeMap::getTypeClassname('ExpansionProfile.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Accident'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.BenefitBalance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Financial'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Information'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Payment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail', VersionTypeMap::getTypeClassname('ExplanationOfBenefit.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', VersionTypeMap::getTypeClassname('FamilyMemberHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget', VersionTypeMap::getTypeClassname('Goal.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment', VersionTypeMap::getTypeClassname('GraphDefinition.Compartment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink', VersionTypeMap::getTypeClassname('GraphDefinition.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget', VersionTypeMap::getTypeClassname('GraphDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassname('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', VersionTypeMap::getTypeClassname('Group.Member'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', VersionTypeMap::getTypeClassname('HealthcareService.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', VersionTypeMap::getTypeClassname('HealthcareService.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance', VersionTypeMap::getTypeClassname('ImagingManifest.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries', VersionTypeMap::getTypeClassname('ImagingManifest.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy', VersionTypeMap::getTypeClassname('ImagingManifest.Study'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassname('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassname('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Protocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', VersionTypeMap::getTypeClassname('Immunization.Explanation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner', VersionTypeMap::getTypeClassname('Immunization.Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassname('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', VersionTypeMap::getTypeClassname('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency', VersionTypeMap::getTypeClassname('ImplementationGuide.Dependency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', VersionTypeMap::getTypeClassname('ImplementationGuide.Global'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage', VersionTypeMap::getTypeClassname('ImplementationGuide.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', VersionTypeMap::getTypeClassname('ImplementationGuide.Page'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', VersionTypeMap::getTypeClassname('ImplementationGuide.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem', VersionTypeMap::getTypeClassname('Linkage.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassname('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassname('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup', VersionTypeMap::getTypeClassname('MeasureReport.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation', VersionTypeMap::getTypeClassname('MeasureReport.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1', VersionTypeMap::getTypeClassname('MeasureReport.Population1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier', VersionTypeMap::getTypeClassname('MeasureReport.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum', VersionTypeMap::getTypeClassname('MeasureReport.Stratum'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup', VersionTypeMap::getTypeClassname('Measure.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation', VersionTypeMap::getTypeClassname('Measure.Population'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier', VersionTypeMap::getTypeClassname('Measure.Stratifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData', VersionTypeMap::getTypeClassname('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassname('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer', VersionTypeMap::getTypeClassname('MedicationAdministration.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer', VersionTypeMap::getTypeClassname('MedicationDispense.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassname('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest', VersionTypeMap::getTypeClassname('MedicationRequest.DispenseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester', VersionTypeMap::getTypeClassname('MedicationRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution', VersionTypeMap::getTypeClassname('MedicationRequest.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', VersionTypeMap::getTypeClassname('Medication.Batch'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', VersionTypeMap::getTypeClassname('Medication.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassname('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', VersionTypeMap::getTypeClassname('Medication.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse', VersionTypeMap::getTypeClassname('MessageDefinition.AllowedResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus', VersionTypeMap::getTypeClassname('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassname('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassname('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassname('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', VersionTypeMap::getTypeClassname('NamingSystem.UniqueId'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', VersionTypeMap::getTypeClassname('NutritionOrder.Administration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', VersionTypeMap::getTypeClassname('NutritionOrder.EnteralFormula'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', VersionTypeMap::getTypeClassname('NutritionOrder.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', VersionTypeMap::getTypeClassname('NutritionOrder.OralDiet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', VersionTypeMap::getTypeClassname('NutritionOrder.Supplement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', VersionTypeMap::getTypeClassname('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', VersionTypeMap::getTypeClassname('Observation.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassname('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', VersionTypeMap::getTypeClassname('Observation.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', VersionTypeMap::getTypeClassname('OperationDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload', VersionTypeMap::getTypeClassname('OperationDefinition.Overload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', VersionTypeMap::getTypeClassname('OperationDefinition.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassname('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassname('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', VersionTypeMap::getTypeClassname('Parameters.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', VersionTypeMap::getTypeClassname('Patient.Animal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', VersionTypeMap::getTypeClassname('Patient.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassname('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassname('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', VersionTypeMap::getTypeClassname('PaymentReconciliation.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote', VersionTypeMap::getTypeClassname('PaymentReconciliation.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', VersionTypeMap::getTypeClassname('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction', VersionTypeMap::getTypeClassname('PlanDefinition.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition', VersionTypeMap::getTypeClassname('PlanDefinition.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue', VersionTypeMap::getTypeClassname('PlanDefinition.DynamicValue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal', VersionTypeMap::getTypeClassname('PlanDefinition.Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant', VersionTypeMap::getTypeClassname('PlanDefinition.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction', VersionTypeMap::getTypeClassname('PlanDefinition.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget', VersionTypeMap::getTypeClassname('PlanDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime', VersionTypeMap::getTypeClassname('PractitionerRole.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable', VersionTypeMap::getTypeClassname('PractitionerRole.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassname('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester', VersionTypeMap::getTypeClassname('ProcedureRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', VersionTypeMap::getTypeClassname('Procedure.FocalDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassname('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem', VersionTypeMap::getTypeClassname('ProcessRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote', VersionTypeMap::getTypeClassname('ProcessResponse.ProcessNote'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassname('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassname('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen', VersionTypeMap::getTypeClassname('Questionnaire.EnableWhen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem', VersionTypeMap::getTypeClassname('Questionnaire.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption', VersionTypeMap::getTypeClassname('Questionnaire.Option'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester', VersionTypeMap::getTypeClassname('ReferralRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction', VersionTypeMap::getTypeClassname('RequestGroup.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition', VersionTypeMap::getTypeClassname('RequestGroup.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction', VersionTypeMap::getTypeClassname('RequestGroup.RelatedAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm', VersionTypeMap::getTypeClassname('ResearchStudy.Arm'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', VersionTypeMap::getTypeClassname('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent', VersionTypeMap::getTypeClassname('SearchParameter.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality', VersionTypeMap::getTypeClassname('Sequence.Quality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq', VersionTypeMap::getTypeClassname('Sequence.ReferenceSeq'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository', VersionTypeMap::getTypeClassname('Sequence.Repository'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant', VersionTypeMap::getTypeClassname('Sequence.Variant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassname('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassname('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing', VersionTypeMap::getTypeClassname('Specimen.Processing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', VersionTypeMap::getTypeClassname('StructureDefinition.Differential'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', VersionTypeMap::getTypeClassname('StructureDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', VersionTypeMap::getTypeClassname('StructureDefinition.Snapshot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent', VersionTypeMap::getTypeClassname('StructureMap.Dependent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup', VersionTypeMap::getTypeClassname('StructureMap.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput', VersionTypeMap::getTypeClassname('StructureMap.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter', VersionTypeMap::getTypeClassname('StructureMap.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule', VersionTypeMap::getTypeClassname('StructureMap.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource', VersionTypeMap::getTypeClassname('StructureMap.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure', VersionTypeMap::getTypeClassname('StructureMap.Structure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget', VersionTypeMap::getTypeClassname('StructureMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', VersionTypeMap::getTypeClassname('Subscription.Channel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassname('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassname('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem', VersionTypeMap::getTypeClassname('SupplyDelivery.SuppliedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem', VersionTypeMap::getTypeClassname('SupplyRequest.OrderedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester', VersionTypeMap::getTypeClassname('SupplyRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput', VersionTypeMap::getTypeClassname('Task.Input'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput', VersionTypeMap::getTypeClassname('Task.Output'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester', VersionTypeMap::getTypeClassname('Task.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction', VersionTypeMap::getTypeClassname('Task.Restriction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction', VersionTypeMap::getTypeClassname('TestReport.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1', VersionTypeMap::getTypeClassname('TestReport.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2', VersionTypeMap::getTypeClassname('TestReport.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert', VersionTypeMap::getTypeClassname('TestReport.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation', VersionTypeMap::getTypeClassname('TestReport.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant', VersionTypeMap::getTypeClassname('TestReport.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup', VersionTypeMap::getTypeClassname('TestReport.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown', VersionTypeMap::getTypeClassname('TestReport.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest', VersionTypeMap::getTypeClassname('TestReport.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', VersionTypeMap::getTypeClassname('TestScript.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', VersionTypeMap::getTypeClassname('TestScript.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', VersionTypeMap::getTypeClassname('TestScript.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', VersionTypeMap::getTypeClassname('TestScript.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', VersionTypeMap::getTypeClassname('TestScript.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination', VersionTypeMap::getTypeClassname('TestScript.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', VersionTypeMap::getTypeClassname('TestScript.Fixture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', VersionTypeMap::getTypeClassname('TestScript.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', VersionTypeMap::getTypeClassname('TestScript.Metadata'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', VersionTypeMap::getTypeClassname('TestScript.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin', VersionTypeMap::getTypeClassname('TestScript.Origin'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam', VersionTypeMap::getTypeClassname('TestScript.Param'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1', VersionTypeMap::getTypeClassname('TestScript.Param1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2', VersionTypeMap::getTypeClassname('TestScript.Param2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3', VersionTypeMap::getTypeClassname('TestScript.Param3'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', VersionTypeMap::getTypeClassname('TestScript.RequestHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule', VersionTypeMap::getTypeClassname('TestScript.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1', VersionTypeMap::getTypeClassname('TestScript.Rule1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2', VersionTypeMap::getTypeClassname('TestScript.Rule2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3', VersionTypeMap::getTypeClassname('TestScript.Rule3'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset', VersionTypeMap::getTypeClassname('TestScript.Ruleset'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1', VersionTypeMap::getTypeClassname('TestScript.Ruleset1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', VersionTypeMap::getTypeClassname('TestScript.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', VersionTypeMap::getTypeClassname('TestScript.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', VersionTypeMap::getTypeClassname('TestScript.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', VersionTypeMap::getTypeClassname('TestScript.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassname('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassname('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassname('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', VersionTypeMap::getTypeClassname('ValueSet.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassname('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassname('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassname('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', VersionTypeMap::getTypeClassname('ValueSet.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense', VersionTypeMap::getTypeClassname('VisionPrescription.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassname('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength', VersionTypeMap::getTypeClassname('BindingStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassname('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType', VersionTypeMap::getTypeClassname('BundleType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind', VersionTypeMap::getTypeClassname('CapabilityStatementKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassname('CarePlanActivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent', VersionTypeMap::getTypeClassname('CarePlanIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus', VersionTypeMap::getTypeClassname('CarePlanStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus', VersionTypeMap::getTypeClassname('CareTeamStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus', VersionTypeMap::getTypeClassname('ChargeItemStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus', VersionTypeMap::getTypeClassname('ClinicalImpressionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassname('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassname('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode', VersionTypeMap::getTypeClassname('CodeSystemContentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning', VersionTypeMap::getTypeClassname('CodeSystemHierarchyMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassname('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType', VersionTypeMap::getTypeClassname('CompartmentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassname('CompositionAttestationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassname('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassname('ConceptMapEquivalence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode', VersionTypeMap::getTypeClassname('ConceptMapGroupUnmappedMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus', VersionTypeMap::getTypeClassname('ConditionalDeleteStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus', VersionTypeMap::getTypeClassname('ConditionalReadStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes', VersionTypeMap::getTypeClassname('ConditionClinicalStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus', VersionTypeMap::getTypeClassname('ConditionVerificationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification', VersionTypeMap::getTypeClassname('ConfidentialityClassification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning', VersionTypeMap::getTypeClassname('ConsentDataMeaning'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType', VersionTypeMap::getTypeClassname('ConsentExceptType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState', VersionTypeMap::getTypeClassname('ConsentState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassname('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail', VersionTypeMap::getTypeClassname('ContactDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint', VersionTypeMap::getTypeClassname('ContactPoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem', VersionTypeMap::getTypeClassname('ContactPointSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse', VersionTypeMap::getTypeClassname('ContactPointUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType', VersionTypeMap::getTypeClassname('ContentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes', VersionTypeMap::getTypeClassname('ContractResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor', VersionTypeMap::getTypeClassname('Contributor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType', VersionTypeMap::getTypeClassname('ContributorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency', VersionTypeMap::getTypeClassname('DataElementStringency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement', VersionTypeMap::getTypeClassname('DataRequirement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter', VersionTypeMap::getTypeClassname('DataRequirement.CodeFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter', VersionTypeMap::getTypeClassname('DataRequirement.DateFilter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassname('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassname('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek', VersionTypeMap::getTypeClassname('DaysOfWeek'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassname('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity', VersionTypeMap::getTypeClassname('DetectedIssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory', VersionTypeMap::getTypeClassname('DeviceMetricCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor', VersionTypeMap::getTypeClassname('DeviceMetricColor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus', VersionTypeMap::getTypeClassname('DeviceMetricOperationalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus', VersionTypeMap::getTypeClassname('DeviceUseStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassname('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType', VersionTypeMap::getTypeClassname('DigitalMediaType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType', VersionTypeMap::getTypeClassname('DiscriminatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassname('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassname('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassname('DocumentRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage', VersionTypeMap::getTypeClassname('Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition', VersionTypeMap::getTypeClassname('ElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase', VersionTypeMap::getTypeClassname('ElementDefinition.Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding', VersionTypeMap::getTypeClassname('ElementDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', VersionTypeMap::getTypeClassname('ElementDefinition.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator', VersionTypeMap::getTypeClassname('ElementDefinition.Discriminator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample', VersionTypeMap::getTypeClassname('ElementDefinition.Example'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping', VersionTypeMap::getTypeClassname('ElementDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', VersionTypeMap::getTypeClassname('ElementDefinition.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType', VersionTypeMap::getTypeClassname('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus', VersionTypeMap::getTypeClassname('EncounterLocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus', VersionTypeMap::getTypeClassname('EncounterStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus', VersionTypeMap::getTypeClassname('EndpointStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus', VersionTypeMap::getTypeClassname('EpisodeOfCareStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode', VersionTypeMap::getTypeClassname('EventCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus', VersionTypeMap::getTypeClassname('EventStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassname('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus', VersionTypeMap::getTypeClassname('ExplanationOfBenefitStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassname('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext', VersionTypeMap::getTypeClassname('ExtensionContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus', VersionTypeMap::getTypeClassname('FamilyHistoryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes', VersionTypeMap::getTypeClassname('FHIRAllTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType', VersionTypeMap::getTypeClassname('FHIRDefinedType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus', VersionTypeMap::getTypeClassname('FHIRDeviceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus', VersionTypeMap::getTypeClassname('FHIRSubstanceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassname('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes', VersionTypeMap::getTypeClassname('FinancialResourceStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus', VersionTypeMap::getTypeClassname('FlagStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus', VersionTypeMap::getTypeClassname('GoalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule', VersionTypeMap::getTypeClassname('GraphCompartmentRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassname('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus', VersionTypeMap::getTypeClassname('GuidanceResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType', VersionTypeMap::getTypeClassname('GuideDependencyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind', VersionTypeMap::getTypeClassname('GuidePageKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb', VersionTypeMap::getTypeClassname('HTTPVerb'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassname('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassname('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassname('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassname('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel', VersionTypeMap::getTypeClassname('IdentityAssuranceLevel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes', VersionTypeMap::getTypeClassname('ImmunizationStatusCodes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability', VersionTypeMap::getTypeClassname('InstanceAvailability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassname('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassname('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassname('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType', VersionTypeMap::getTypeClassname('IssueType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType', VersionTypeMap::getTypeClassname('LinkageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassname('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassname('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus', VersionTypeMap::getTypeClassname('ListStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassname('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassname('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown', VersionTypeMap::getTypeClassname('markdown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple', VersionTypeMap::getTypeClassname('MeasmntPrinciple'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus', VersionTypeMap::getTypeClassname('MeasureReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType', VersionTypeMap::getTypeClassname('MeasureReportType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus', VersionTypeMap::getTypeClassname('MedicationAdministrationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus', VersionTypeMap::getTypeClassname('MedicationDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent', VersionTypeMap::getTypeClassname('MedicationRequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority', VersionTypeMap::getTypeClassname('MedicationRequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus', VersionTypeMap::getTypeClassname('MedicationRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus', VersionTypeMap::getTypeClassname('MedicationStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken', VersionTypeMap::getTypeClassname('MedicationStatementTaken'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus', VersionTypeMap::getTypeClassname('MedicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassname('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta', VersionTypeMap::getTypeClassname('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassname('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType', VersionTypeMap::getTypeClassname('NamingSystemIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType', VersionTypeMap::getTypeClassname('NamingSystemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassname('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassname('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType', VersionTypeMap::getTypeClassname('NoteType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus', VersionTypeMap::getTypeClassname('NutritionOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType', VersionTypeMap::getTypeClassname('ObservationRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassname('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassname('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind', VersionTypeMap::getTypeClassname('OperationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse', VersionTypeMap::getTypeClassname('OperationParameterUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition', VersionTypeMap::getTypeClassname('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired', VersionTypeMap::getTypeClassname('ParticipantRequired'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus', VersionTypeMap::getTypeClassname('ParticipationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassname('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt', VersionTypeMap::getTypeClassname('positiveInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassname('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType', VersionTypeMap::getTypeClassname('PropertyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassname('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus', VersionTypeMap::getTypeClassname('PublicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType', VersionTypeMap::getTypeClassname('qualityType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassname('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator', VersionTypeMap::getTypeClassname('QuantityComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassname('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassname('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassname('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassname('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney', VersionTypeMap::getTypeClassname('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType', VersionTypeMap::getTypeClassname('QuestionnaireItemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus', VersionTypeMap::getTypeClassname('QuestionnaireResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassname('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassname('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference', VersionTypeMap::getTypeClassname('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy', VersionTypeMap::getTypeClassname('ReferenceHandlingPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules', VersionTypeMap::getTypeClassname('ReferenceVersionRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact', VersionTypeMap::getTypeClassname('RelatedArtifact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType', VersionTypeMap::getTypeClassname('RelatedArtifactType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome', VersionTypeMap::getTypeClassname('RemittanceOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType', VersionTypeMap::getTypeClassname('repositoryType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent', VersionTypeMap::getTypeClassname('RequestIntent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority', VersionTypeMap::getTypeClassname('RequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus', VersionTypeMap::getTypeClassname('RequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus', VersionTypeMap::getTypeClassname('ResearchStudyStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus', VersionTypeMap::getTypeClassname('ResearchSubjectStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType', VersionTypeMap::getTypeClassname('ResourceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy', VersionTypeMap::getTypeClassname('ResourceVersionPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassname('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode', VersionTypeMap::getTypeClassname('RestfulCapabilityMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassname('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassname('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator', VersionTypeMap::getTypeClassname('SearchComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode', VersionTypeMap::getTypeClassname('SearchEntryMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode', VersionTypeMap::getTypeClassname('SearchModifierCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassname('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature', VersionTypeMap::getTypeClassname('Signature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassname('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus', VersionTypeMap::getTypeClassname('SlotStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus', VersionTypeMap::getTypeClassname('SpecimenStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassname('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind', VersionTypeMap::getTypeClassname('StructureDefinitionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType', VersionTypeMap::getTypeClassname('StructureMapContextType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode', VersionTypeMap::getTypeClassname('StructureMapGroupTypeMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode', VersionTypeMap::getTypeClassname('StructureMapInputMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode', VersionTypeMap::getTypeClassname('StructureMapModelMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode', VersionTypeMap::getTypeClassname('StructureMapSourceListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode', VersionTypeMap::getTypeClassname('StructureMapTargetListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform', VersionTypeMap::getTypeClassname('StructureMapTransform'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType', VersionTypeMap::getTypeClassname('SubscriptionChannelType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus', VersionTypeMap::getTypeClassname('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus', VersionTypeMap::getTypeClassname('SupplyDeliveryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus', VersionTypeMap::getTypeClassname('SupplyRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction', VersionTypeMap::getTypeClassname('SystemRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode', VersionTypeMap::getTypeClassname('SystemVersionProcessingMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus', VersionTypeMap::getTypeClassname('TaskStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult', VersionTypeMap::getTypeClassname('TestReportActionResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType', VersionTypeMap::getTypeClassname('TestReportParticipantType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult', VersionTypeMap::getTypeClassname('TestReportResult'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus', VersionTypeMap::getTypeClassname('TestReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode', VersionTypeMap::getTypeClassname('TestScriptRequestMethodCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime', VersionTypeMap::getTypeClassname('time'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming', VersionTypeMap::getTypeClassname('Timing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat', VersionTypeMap::getTypeClassname('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition', VersionTypeMap::getTypeClassname('TriggerDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType', VersionTypeMap::getTypeClassname('TriggerType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule', VersionTypeMap::getTypeClassname('TypeDerivationRule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction', VersionTypeMap::getTypeClassname('TypeRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType', VersionTypeMap::getTypeClassname('UDIEntryType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassname('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode', VersionTypeMap::getTypeClassname('UnknownContentCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt', VersionTypeMap::getTypeClassname('unsignedInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassname('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext', VersionTypeMap::getTypeClassname('UsageContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse', VersionTypeMap::getTypeClassname('Use'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassname('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase', VersionTypeMap::getTypeClassname('VisionBase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes', VersionTypeMap::getTypeClassname('VisionEyes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType', VersionTypeMap::getTypeClassname('XPathUsageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassname('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassname('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassname('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive', VersionTypeMap::getTypeClassname('markdown-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassname('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive', VersionTypeMap::getTypeClassname('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource', VersionTypeMap::getTypeClassname('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer', VersionTypeMap::getTypeClassname('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary', VersionTypeMap::getTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle', VersionTypeMap::getTypeClassname('Bundle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource', VersionTypeMap::getTypeClassname('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getTypeClassname('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', VersionTypeMap::getTypeClassname('ActivityDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getTypeClassname('AdverseEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getTypeClassname('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getTypeClassname('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getTypeClassname('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getTypeClassname('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getTypeClassname('BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', VersionTypeMap::getTypeClassname('CapabilityStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getTypeClassname('CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getTypeClassname('ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getTypeClassname('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getTypeClassname('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getTypeClassname('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem', VersionTypeMap::getTypeClassname('CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getTypeClassname('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getTypeClassname('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', VersionTypeMap::getTypeClassname('CompartmentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getTypeClassname('Consent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getTypeClassname('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getTypeClassname('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getTypeClassname('DataElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getTypeClassname('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getTypeClassname('DeviceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getTypeClassname('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getTypeClassname('DeviceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getTypeClassname('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassname('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getTypeClassname('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getTypeClassname('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getTypeClassname('Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getTypeClassname('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getTypeClassname('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getTypeClassname('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile', VersionTypeMap::getTypeClassname('ExpansionProfile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getTypeClassname('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getTypeClassname('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getTypeClassname('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getTypeClassname('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', VersionTypeMap::getTypeClassname('GraphDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getTypeClassname('GuidanceResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getTypeClassname('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest', VersionTypeMap::getTypeClassname('ImagingManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getTypeClassname('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary', VersionTypeMap::getTypeClassname('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getTypeClassname('Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure', VersionTypeMap::getTypeClassname('Measure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getTypeClassname('MeasureReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getTypeClassname('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getTypeClassname('MedicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', VersionTypeMap::getTypeClassname('MessageDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getTypeClassname('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getTypeClassname('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getTypeClassname('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getTypeClassname('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getTypeClassname('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getTypeClassname('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', VersionTypeMap::getTypeClassname('PlanDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getTypeClassname('PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getTypeClassname('ProcedureRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getTypeClassname('ProcessRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getTypeClassname('ProcessResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getTypeClassname('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getTypeClassname('ReferralRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup', VersionTypeMap::getTypeClassname('RequestGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getTypeClassname('ResearchStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getTypeClassname('ResearchSubject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getTypeClassname('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getTypeClassname('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence', VersionTypeMap::getTypeClassname('Sequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition', VersionTypeMap::getTypeClassname('ServiceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getTypeClassname('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getTypeClassname('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap', VersionTypeMap::getTypeClassname('StructureMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getTypeClassname('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getTypeClassname('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getTypeClassname('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getTypeClassname('Task'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getTypeClassname('TestReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getTypeClassname('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getTypeClassname('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters', VersionTypeMap::getTypeClassname('Parameters'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassname('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassname('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive', VersionTypeMap::getTypeClassname('time-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive', VersionTypeMap::getTypeClassname('unsignedInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassname('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassname('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML', VersionTypeMap::getTypeClassname('XHTML'));
    }

    public function testGetContainedTypeClassnameWithTypeName()
    {
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AccountStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionCardinalityBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionConditionKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionGroupingBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionList-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionParticipantType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionPrecheckBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRequiredBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionSelectionBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrativeGender-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventCausality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceClinicalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCriticality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceVerificationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionDirectionType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionOperatorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionResponseTypes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAgentNetworkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingStrength-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BundleType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatementKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanIntent-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CareTeamStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItemStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpressionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemContentMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemHierarchyMeaning-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompartmentType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionAttestationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapEquivalence-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapGroupUnmappedMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalDeleteStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalReadStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionClinicalStatusCodes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionVerificationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConfidentialityClassification-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentDataMeaning-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentExceptType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContentType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContractResourceStatusCodes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContributorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElementStringency-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DaysOfWeek-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricColor-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricOperationalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUseStatementStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DigitalMediaType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiscriminatorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterLocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EndpointStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCareStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventCapabilityMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefitStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContext-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistoryStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRAllTypes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRDefinedType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRDeviceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRSubstanceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FinancialResourceStatusCodes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FlagStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GoalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphCompartmentRule-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidanceResponseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuideDependencyType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidePageKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HTTPVerb-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentityAssuranceLevel-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationStatusCodes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InstanceAvailability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkageType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasmntPrinciple-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestIntent-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementTaken-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemIdentifierType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NoteType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrderStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantRequired-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PublicationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('qualityType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityComparator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceHandlingPolicy-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceVersionRules-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifactType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RemittanceOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('repositoryType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestIntent-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudyStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchSubjectStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceVersionPolicy-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulCapabilityMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchComparator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchEntryMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchModifierCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlotStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinitionKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapContextType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapGroupTypeMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapInputMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapModelMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapSourceListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTargetListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTransform-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionChannelType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDeliveryStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemVersionProcessingMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TaskStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportActionResult-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportParticipantType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportResult-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScriptRequestMethodCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggerType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeDerivationRule-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UDIEntryType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnknownContentCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Use-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionBase-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionEyes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XPathUsageType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AccountStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionCardinalityBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionConditionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionGroupingBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionList'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionPrecheckBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionRequiredBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionSelectionBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrativeGender'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEventCausality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceClinicalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCriticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceVerificationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Annotation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionDirectionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionOperatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionResponseTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Attachment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAgentNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Account.Guarantor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActivityDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActivityDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdverseEvent.SuspectEntity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntolerance.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Request'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Search'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Certificate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Interaction1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatement.SupportedMessage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CareTeam.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItem.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Information'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpression.Finding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpression.Investigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystem.Property1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationRequest.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Communication.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompartmentDefinition.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Unmapped'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Actor1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Data'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Data1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Except'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Consent.Policy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Agent1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Friendly'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Legal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Signer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.ValuedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.ValuedItem1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coverage.Grouping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElement.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssue.Mitigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceComponent.ProductionSpecification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetric.Calibration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Device.Udi'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReport.Image'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReport.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentManifest.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentManifest.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityResponse.BenefitBalance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityResponse.Financial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EligibilityResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.ClassHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.Designation1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.Designation2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.Exclude'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.ExcludedSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.FixedVersion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExpansionProfile.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.BenefitBalance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Financial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Information'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Goal.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphDefinition.Compartment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphDefinition.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphDefinition.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Member'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HealthcareService.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HealthcareService.NotAvailable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingManifest.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingManifest.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingManifest.Study'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Protocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Explanation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Practitioner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.VaccinationProtocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Dependency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Global'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Page'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Linkage.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Population1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReport.Stratum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measure.SupplementalData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministration.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequest.DispenseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequest.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Batch'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageDefinition.AllowedResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageDefinition.Focus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystem.UniqueId'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Administration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.EnteralFormula'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.OralDiet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Supplement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Texture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Overload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Organization.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Parameters.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Animal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentReconciliation.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentReconciliation.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Person.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PlanDefinition.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PractitionerRole.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PractitionerRole.NotAvailable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Practitioner.Qualification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.FocalDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcessRequest.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcessResponse.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.EnableWhen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Option'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferralRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestGroup.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestGroup.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestGroup.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudy.Arm'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RiskAssessment.Prediction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParameter.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Sequence.Quality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Sequence.ReferenceSeq'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Sequence.Repository'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Sequence.Variant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Processing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Differential'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Snapshot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Dependent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Subscription.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDelivery.SuppliedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequest.OrderedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Task.Restriction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReport.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Fixture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Metadata'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Origin'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Param'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Param1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Param2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Param3'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.RequestHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Rule1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Rule2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Rule3'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Ruleset'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Ruleset1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionPrescription.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BundleType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CapabilityStatementKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CareTeamStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ChargeItemStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpressionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemContentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeSystemHierarchyMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompartmentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapGroupUnmappedMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalDeleteStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalReadStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionClinicalStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionVerificationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConfidentialityClassification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentDataMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentExceptType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConsentState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContractResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contributor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContributorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElementStringency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement.CodeFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataRequirement.DateFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DaysOfWeek'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricColor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricOperationalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUseStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DigitalMediaType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiscriminatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Discriminator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Example'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Type'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterLocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EndpointStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCareStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefitStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistoryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRAllTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRDefinedType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRDeviceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FHIRSubstanceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FinancialResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FlagStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GoalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GraphCompartmentRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidanceResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuideDependencyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidePageKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HTTPVerb'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentityAssuranceLevel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InstanceAvailability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('markdown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasmntPrinciple'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MeasureReportType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementTaken'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Meta'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NoteType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParameterDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantRequired'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Period'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('positiveInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PublicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('qualityType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Count'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Distance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireItemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Reference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceHandlingPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferenceVersionRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RelatedArtifactType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RemittanceOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('repositoryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchStudyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResearchSubjectStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceVersionPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchEntryMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchModifierCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Signature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlotStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinitionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapContextType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapGroupTypeMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapInputMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapModelMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapSourceListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTargetListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureMapTransform'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionChannelType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDeliveryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemVersionProcessingMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TaskStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportActionResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScriptRequestMethodCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('time'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Timing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Timing.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggerDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TriggerType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeDerivationRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UDIEntryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnknownContentCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('unsignedInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UsageContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Use'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionBase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionEyes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XPathUsageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('markdown-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('positiveInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary', VersionTypeMap::getContainedTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle', VersionTypeMap::getContainedTypeClassname('Bundle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getContainedTypeClassname('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', VersionTypeMap::getContainedTypeClassname('ActivityDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getContainedTypeClassname('AdverseEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getContainedTypeClassname('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getContainedTypeClassname('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getContainedTypeClassname('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getContainedTypeClassname('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getContainedTypeClassname('BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', VersionTypeMap::getContainedTypeClassname('CapabilityStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getContainedTypeClassname('CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getContainedTypeClassname('ChargeItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getContainedTypeClassname('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getContainedTypeClassname('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getContainedTypeClassname('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem', VersionTypeMap::getContainedTypeClassname('CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getContainedTypeClassname('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getContainedTypeClassname('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', VersionTypeMap::getContainedTypeClassname('CompartmentDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getContainedTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getContainedTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getContainedTypeClassname('Consent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getContainedTypeClassname('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getContainedTypeClassname('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getContainedTypeClassname('DataElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getContainedTypeClassname('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getContainedTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getContainedTypeClassname('DeviceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getContainedTypeClassname('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getContainedTypeClassname('DeviceRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getContainedTypeClassname('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassname('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getContainedTypeClassname('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getContainedTypeClassname('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getContainedTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getContainedTypeClassname('Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getContainedTypeClassname('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getContainedTypeClassname('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getContainedTypeClassname('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile', VersionTypeMap::getContainedTypeClassname('ExpansionProfile'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getContainedTypeClassname('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getContainedTypeClassname('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', VersionTypeMap::getContainedTypeClassname('GraphDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getContainedTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getContainedTypeClassname('GuidanceResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getContainedTypeClassname('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest', VersionTypeMap::getContainedTypeClassname('ImagingManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getContainedTypeClassname('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary', VersionTypeMap::getContainedTypeClassname('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getContainedTypeClassname('Linkage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getContainedTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getContainedTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure', VersionTypeMap::getContainedTypeClassname('Measure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getContainedTypeClassname('MeasureReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getContainedTypeClassname('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getContainedTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getContainedTypeClassname('MedicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', VersionTypeMap::getContainedTypeClassname('MessageDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getContainedTypeClassname('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getContainedTypeClassname('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getContainedTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getContainedTypeClassname('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getContainedTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getContainedTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getContainedTypeClassname('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getContainedTypeClassname('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getContainedTypeClassname('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', VersionTypeMap::getContainedTypeClassname('PlanDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getContainedTypeClassname('PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getContainedTypeClassname('ProcedureRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getContainedTypeClassname('ProcessRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getContainedTypeClassname('ProcessResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getContainedTypeClassname('ReferralRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup', VersionTypeMap::getContainedTypeClassname('RequestGroup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getContainedTypeClassname('ResearchStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getContainedTypeClassname('ResearchSubject'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getContainedTypeClassname('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getContainedTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getContainedTypeClassname('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence', VersionTypeMap::getContainedTypeClassname('Sequence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition', VersionTypeMap::getContainedTypeClassname('ServiceDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getContainedTypeClassname('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getContainedTypeClassname('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap', VersionTypeMap::getContainedTypeClassname('StructureMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getContainedTypeClassname('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getContainedTypeClassname('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getContainedTypeClassname('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getContainedTypeClassname('Task'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getContainedTypeClassname('TestReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getContainedTypeClassname('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getContainedTypeClassname('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters', VersionTypeMap::getContainedTypeClassname('Parameters'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('time-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('unsignedInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XHTML'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
    }

    public function testIsContainableTypeWithXML()
    {
        $sxe = new \SimpleXMLElement('<Account></Account>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Coverage></Account.Coverage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Account.Guarantor></Account.Guarantor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AccountStatus></AccountStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AccountStatus-list></AccountStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionCardinalityBehavior></ActionCardinalityBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionCardinalityBehavior-list></ActionCardinalityBehavior-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionConditionKind></ActionConditionKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionConditionKind-list></ActionConditionKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionGroupingBehavior></ActionGroupingBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionGroupingBehavior-list></ActionGroupingBehavior-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionList></ActionList>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionList-list></ActionList-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionParticipantType></ActionParticipantType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionParticipantType-list></ActionParticipantType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionPrecheckBehavior></ActionPrecheckBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionPrecheckBehavior-list></ActionPrecheckBehavior-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRelationshipType></ActionRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRelationshipType-list></ActionRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRequiredBehavior></ActionRequiredBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionRequiredBehavior-list></ActionRequiredBehavior-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionSelectionBehavior></ActionSelectionBehavior>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionSelectionBehavior-list></ActionSelectionBehavior-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActivityDefinition></ActivityDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActivityDefinition.DynamicValue></ActivityDefinition.DynamicValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActivityDefinition.Participant></ActivityDefinition.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Address></Address>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressType></AddressType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressType-list></AddressType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse></AddressUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse-list></AddressUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrativeGender></AdministrativeGender>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrativeGender-list></AdministrativeGender-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent></AdverseEvent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEvent.SuspectEntity></AdverseEvent.SuspectEntity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventCategory></AdverseEventCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventCategory-list></AdverseEventCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventCausality></AdverseEventCausality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdverseEventCausality-list></AdverseEventCausality-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Age></Age>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode></AggregationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode-list></AggregationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance></AllergyIntolerance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance.Reaction></AllergyIntolerance.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCategory></AllergyIntoleranceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCategory-list></AllergyIntoleranceCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceClinicalStatus></AllergyIntoleranceClinicalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceClinicalStatus-list></AllergyIntoleranceClinicalStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCriticality></AllergyIntoleranceCriticality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCriticality-list></AllergyIntoleranceCriticality-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceSeverity></AllergyIntoleranceSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceSeverity-list></AllergyIntoleranceSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceType></AllergyIntoleranceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceType-list></AllergyIntoleranceType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceVerificationStatus></AllergyIntoleranceVerificationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceVerificationStatus-list></AllergyIntoleranceVerificationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Annotation></Annotation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment></Appointment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.Participant></Appointment.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentResponse></AppointmentResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentStatus></AppointmentStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentStatus-list></AppointmentStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionDirectionType></AssertionDirectionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionDirectionType-list></AssertionDirectionType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionOperatorType></AssertionOperatorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionOperatorType-list></AssertionOperatorType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionResponseTypes></AssertionResponseTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionResponseTypes-list></AssertionResponseTypes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Attachment></Attachment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent></AuditEvent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Agent></AuditEvent.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Detail></AuditEvent.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Entity></AuditEvent.Entity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Network></AuditEvent.Network>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Source></AuditEvent.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAction></AuditEventAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAction-list></AuditEventAction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAgentNetworkType></AuditEventAgentNetworkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAgentNetworkType-list></AuditEventAgentNetworkType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventOutcome></AuditEventOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventOutcome-list></AuditEventOutcome-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BackboneElement></BackboneElement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary></base64Binary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary-primitive></base64Binary-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Basic></Basic>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Binary></Binary>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingStrength></BindingStrength>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingStrength-list></BindingStrength-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BodySite></BodySite>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean></boolean>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean-primitive></boolean-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle></Bundle>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Entry></Bundle.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Link></Bundle.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Request></Bundle.Request>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Response></Bundle.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Search></Bundle.Search>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BundleType></BundleType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BundleType-list></BundleType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement></CapabilityStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Certificate></CapabilityStatement.Certificate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Document></CapabilityStatement.Document>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Endpoint></CapabilityStatement.Endpoint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Event></CapabilityStatement.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Implementation></CapabilityStatement.Implementation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Interaction></CapabilityStatement.Interaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Interaction1></CapabilityStatement.Interaction1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Messaging></CapabilityStatement.Messaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Operation></CapabilityStatement.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Resource></CapabilityStatement.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Rest></CapabilityStatement.Rest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.SearchParam></CapabilityStatement.SearchParam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Security></CapabilityStatement.Security>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.Software></CapabilityStatement.Software>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatement.SupportedMessage></CapabilityStatement.SupportedMessage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatementKind></CapabilityStatementKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CapabilityStatementKind-list></CapabilityStatementKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan></CarePlan>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Activity></CarePlan.Activity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Detail></CarePlan.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityStatus></CarePlanActivityStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityStatus-list></CarePlanActivityStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanIntent></CarePlanIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanIntent-list></CarePlanIntent-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanStatus></CarePlanStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanStatus-list></CarePlanStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeam></CareTeam>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeam.Participant></CareTeam.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeamStatus></CareTeamStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CareTeamStatus-list></CareTeamStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItem></ChargeItem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItem.Participant></ChargeItem.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemStatus></ChargeItemStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ChargeItemStatus-list></ChargeItemStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim></Claim>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Accident></Claim.Accident>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.CareTeam></Claim.CareTeam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Detail></Claim.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Diagnosis></Claim.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Information></Claim.Information>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Insurance></Claim.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Item></Claim.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Payee></Claim.Payee>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Procedure></Claim.Procedure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Related></Claim.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.SubDetail></Claim.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse></ClaimResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.AddItem></ClaimResponse.AddItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication></ClaimResponse.Adjudication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Detail></ClaimResponse.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Detail1></ClaimResponse.Detail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Error></ClaimResponse.Error>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Insurance></ClaimResponse.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Item></ClaimResponse.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Payment></ClaimResponse.Payment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.ProcessNote></ClaimResponse.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.SubDetail></ClaimResponse.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression></ClinicalImpression>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression.Finding></ClinicalImpression.Finding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression.Investigation></ClinicalImpression.Investigation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpressionStatus></ClinicalImpressionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpressionStatus-list></ClinicalImpressionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code></code>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code-primitive></code-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeableConcept></CodeableConcept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem></CodeSystem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Concept></CodeSystem.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Designation></CodeSystem.Designation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Filter></CodeSystem.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Property></CodeSystem.Property>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystem.Property1></CodeSystem.Property1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemContentMode></CodeSystemContentMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemContentMode-list></CodeSystemContentMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemHierarchyMeaning></CodeSystemHierarchyMeaning>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeSystemHierarchyMeaning-list></CodeSystemHierarchyMeaning-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coding></Coding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Communication></Communication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Communication.Payload></Communication.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest></CommunicationRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest.Payload></CommunicationRequest.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest.Requester></CommunicationRequest.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentDefinition></CompartmentDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentDefinition.Resource></CompartmentDefinition.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentType></CompartmentType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompartmentType-list></CompartmentType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition></Composition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Attester></Composition.Attester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Event></Composition.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.RelatesTo></Composition.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Section></Composition.Section>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionAttestationMode></CompositionAttestationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionAttestationMode-list></CompositionAttestationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus></CompositionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus-list></CompositionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap></ConceptMap>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.DependsOn></ConceptMap.DependsOn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Element></ConceptMap.Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Group></ConceptMap.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Target></ConceptMap.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Unmapped></ConceptMap.Unmapped>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapEquivalence></ConceptMapEquivalence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapEquivalence-list></ConceptMapEquivalence-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapGroupUnmappedMode></ConceptMapGroupUnmappedMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapGroupUnmappedMode-list></ConceptMapGroupUnmappedMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition></Condition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Evidence></Condition.Evidence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Stage></Condition.Stage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalDeleteStatus></ConditionalDeleteStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalDeleteStatus-list></ConditionalDeleteStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalReadStatus></ConditionalReadStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalReadStatus-list></ConditionalReadStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionClinicalStatusCodes></ConditionClinicalStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionClinicalStatusCodes-list></ConditionClinicalStatusCodes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionVerificationStatus></ConditionVerificationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionVerificationStatus-list></ConditionVerificationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConfidentialityClassification></ConfidentialityClassification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConfidentialityClassification-list></ConfidentialityClassification-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent></Consent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Actor></Consent.Actor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Actor1></Consent.Actor1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Data></Consent.Data>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Data1></Consent.Data1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Except></Consent.Except>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Consent.Policy></Consent.Policy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentDataMeaning></ConsentDataMeaning>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentDataMeaning-list></ConsentDataMeaning-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentExceptType></ConsentExceptType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentExceptType-list></ConsentExceptType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentState></ConsentState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConsentState-list></ConsentState-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity></ConstraintSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity-list></ConstraintSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactDetail></ContactDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPoint></ContactPoint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointSystem></ContactPointSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointSystem-list></ContactPointSystem-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointUse></ContactPointUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointUse-list></ContactPointUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContentType></ContentType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContentType-list></ContentType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract></Contract>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Agent></Contract.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Agent1></Contract.Agent1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Friendly></Contract.Friendly>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Legal></Contract.Legal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Rule></Contract.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Signer></Contract.Signer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Term></Contract.Term>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.ValuedItem></Contract.ValuedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.ValuedItem1></Contract.ValuedItem1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContractResourceStatusCodes></ContractResourceStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContractResourceStatusCodes-list></ContractResourceStatusCodes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contributor></Contributor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContributorType></ContributorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContributorType-list></ContributorType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Count></Count>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage></Coverage>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage.Grouping></Coverage.Grouping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElement></DataElement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElement.Mapping></DataElement.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElementStringency></DataElementStringency>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElementStringency-list></DataElementStringency-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement></DataRequirement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement.CodeFilter></DataRequirement.CodeFilter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataRequirement.DateFilter></DataRequirement.DateFilter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date></date>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date-primitive></date-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime></dateTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime-primitive></dateTime-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DaysOfWeek></DaysOfWeek>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DaysOfWeek-list></DaysOfWeek-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal></decimal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal-primitive></decimal-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue></DetectedIssue>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue.Mitigation></DetectedIssue.Mitigation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueSeverity></DetectedIssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueSeverity-list></DetectedIssueSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device></Device>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device.Udi></Device.Udi>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceComponent></DeviceComponent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceComponent.ProductionSpecification></DeviceComponent.ProductionSpecification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetric></DeviceMetric>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetric.Calibration></DeviceMetric.Calibration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationState></DeviceMetricCalibrationState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationState-list></DeviceMetricCalibrationState-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationType></DeviceMetricCalibrationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationType-list></DeviceMetricCalibrationType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCategory></DeviceMetricCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCategory-list></DeviceMetricCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricColor></DeviceMetricColor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricColor-list></DeviceMetricColor-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricOperationalStatus></DeviceMetricOperationalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricOperationalStatus-list></DeviceMetricOperationalStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceRequest></DeviceRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceRequest.Requester></DeviceRequest.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseStatement></DeviceUseStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseStatementStatus></DeviceUseStatementStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseStatementStatus-list></DeviceUseStatementStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport></DiagnosticReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport.Image></DiagnosticReport.Image>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport.Performer></DiagnosticReport.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus></DiagnosticReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus-list></DiagnosticReportStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DigitalMediaType></DigitalMediaType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DigitalMediaType-list></DigitalMediaType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiscriminatorType></DiscriminatorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiscriminatorType-list></DiscriminatorType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Distance></Distance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest></DocumentManifest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest.Content></DocumentManifest.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest.Related></DocumentManifest.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode></DocumentMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode-list></DocumentMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference></DocumentReference>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Content></DocumentReference.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Context></DocumentReference.Context>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Related></DocumentReference.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.RelatesTo></DocumentReference.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus></DocumentReferenceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus-list></DocumentReferenceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentRelationshipType></DocumentRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentRelationshipType-list></DocumentRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DomainResource></DomainResource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Dosage></Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Duration></Duration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Element></Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition></ElementDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Base></ElementDefinition.Base>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Binding></ElementDefinition.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Constraint></ElementDefinition.Constraint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Discriminator></ElementDefinition.Discriminator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Example></ElementDefinition.Example>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Mapping></ElementDefinition.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Slicing></ElementDefinition.Slicing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Type></ElementDefinition.Type>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityRequest></EligibilityRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponse></EligibilityResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponse.BenefitBalance></EligibilityResponse.BenefitBalance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponse.Error></EligibilityResponse.Error>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponse.Financial></EligibilityResponse.Financial>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponse.Insurance></EligibilityResponse.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter></Encounter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.ClassHistory></Encounter.ClassHistory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Diagnosis></Encounter.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Hospitalization></Encounter.Hospitalization>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Location></Encounter.Location>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Participant></Encounter.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.StatusHistory></Encounter.StatusHistory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterLocationStatus></EncounterLocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterLocationStatus-list></EncounterLocationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterStatus></EncounterStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterStatus-list></EncounterStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Endpoint></Endpoint>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EndpointStatus></EndpointStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EndpointStatus-list></EndpointStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentRequest></EnrollmentRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentResponse></EnrollmentResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare></EpisodeOfCare>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.Diagnosis></EpisodeOfCare.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.StatusHistory></EpisodeOfCare.StatusHistory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCareStatus></EpisodeOfCareStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCareStatus-list></EpisodeOfCareStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventCapabilityMode></EventCapabilityMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventCapabilityMode-list></EventCapabilityMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventStatus></EventStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventStatus-list></EventStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming></EventTiming>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming-list></EventTiming-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile></ExpansionProfile>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.Designation></ExpansionProfile.Designation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.Designation1></ExpansionProfile.Designation1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.Designation2></ExpansionProfile.Designation2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.Exclude></ExpansionProfile.Exclude>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.ExcludedSystem></ExpansionProfile.ExcludedSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.FixedVersion></ExpansionProfile.FixedVersion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExpansionProfile.Include></ExpansionProfile.Include>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit></ExplanationOfBenefit>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Accident></ExplanationOfBenefit.Accident>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.AddItem></ExplanationOfBenefit.AddItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Adjudication></ExplanationOfBenefit.Adjudication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.BenefitBalance></ExplanationOfBenefit.BenefitBalance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.CareTeam></ExplanationOfBenefit.CareTeam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Detail></ExplanationOfBenefit.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Detail1></ExplanationOfBenefit.Detail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Diagnosis></ExplanationOfBenefit.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Financial></ExplanationOfBenefit.Financial>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Information></ExplanationOfBenefit.Information>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Insurance></ExplanationOfBenefit.Insurance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Item></ExplanationOfBenefit.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Payee></ExplanationOfBenefit.Payee>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Payment></ExplanationOfBenefit.Payment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Procedure></ExplanationOfBenefit.Procedure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.ProcessNote></ExplanationOfBenefit.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.Related></ExplanationOfBenefit.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit.SubDetail></ExplanationOfBenefit.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefitStatus></ExplanationOfBenefitStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefitStatus-list></ExplanationOfBenefitStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Extension></Extension>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContext></ExtensionContext>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContext-list></ExtensionContext-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistoryStatus></FamilyHistoryStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistoryStatus-list></FamilyHistoryStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory></FamilyMemberHistory>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory.Condition></FamilyMemberHistory.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRAllTypes></FHIRAllTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRAllTypes-list></FHIRAllTypes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRDefinedType></FHIRDefinedType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRDefinedType-list></FHIRDefinedType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRDeviceStatus></FHIRDeviceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRDeviceStatus-list></FHIRDeviceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRSubstanceStatus></FHIRSubstanceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FHIRSubstanceStatus-list></FHIRSubstanceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator></FilterOperator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator-list></FilterOperator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FinancialResourceStatusCodes></FinancialResourceStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FinancialResourceStatusCodes-list></FinancialResourceStatusCodes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Flag></Flag>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FlagStatus></FlagStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FlagStatus-list></FlagStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Goal></Goal>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Goal.Target></Goal.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GoalStatus></GoalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GoalStatus-list></GoalStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphCompartmentRule></GraphCompartmentRule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphCompartmentRule-list></GraphCompartmentRule-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition></GraphDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition.Compartment></GraphDefinition.Compartment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition.Link></GraphDefinition.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GraphDefinition.Target></GraphDefinition.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group></Group>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Characteristic></Group.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Member></Group.Member>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType></GroupType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType-list></GroupType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidanceResponse></GuidanceResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidanceResponseStatus></GuidanceResponseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidanceResponseStatus-list></GuidanceResponseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuideDependencyType></GuideDependencyType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuideDependencyType-list></GuideDependencyType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidePageKind></GuidePageKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidePageKind-list></GuidePageKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService></HealthcareService>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService.AvailableTime></HealthcareService.AvailableTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService.NotAvailable></HealthcareService.NotAvailable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HTTPVerb></HTTPVerb>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HTTPVerb-list></HTTPVerb-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HumanName></HumanName>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id></id>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id-primitive></id-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Identifier></Identifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse></IdentifierUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse-list></IdentifierUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentityAssuranceLevel></IdentityAssuranceLevel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentityAssuranceLevel-list></IdentityAssuranceLevel-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingManifest></ImagingManifest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingManifest.Instance></ImagingManifest.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingManifest.Series></ImagingManifest.Series>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingManifest.Study></ImagingManifest.Study>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy></ImagingStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Instance></ImagingStudy.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Series></ImagingStudy.Series>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization></Immunization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Explanation></Immunization.Explanation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Practitioner></Immunization.Practitioner>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Reaction></Immunization.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.VaccinationProtocol></Immunization.VaccinationProtocol>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation></ImmunizationRecommendation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.DateCriterion></ImmunizationRecommendation.DateCriterion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Protocol></ImmunizationRecommendation.Protocol>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Recommendation></ImmunizationRecommendation.Recommendation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationStatusCodes></ImmunizationStatusCodes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationStatusCodes-list></ImmunizationStatusCodes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide></ImplementationGuide>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Dependency></ImplementationGuide.Dependency>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Global></ImplementationGuide.Global>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Package></ImplementationGuide.Package>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Page></ImplementationGuide.Page>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Resource></ImplementationGuide.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InstanceAvailability></InstanceAvailability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InstanceAvailability-list></InstanceAvailability-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant></instant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant-primitive></instant-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer></integer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer-primitive></integer-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity></IssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity-list></IssueSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueType></IssueType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueType-list></IssueType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Library></Library>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Linkage></Linkage>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Linkage.Item></Linkage.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkageType></LinkageType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkageType-list></LinkageType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType></LinkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType-list></LinkType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List></List>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List.Entry></List.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode></ListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode-list></ListMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListStatus></ListStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListStatus-list></ListStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location></Location>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location.Position></Location.Position>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode></LocationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode-list></LocationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus></LocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus-list></LocationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<markdown></markdown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<markdown-primitive></markdown-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasmntPrinciple></MeasmntPrinciple>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasmntPrinciple-list></MeasmntPrinciple-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure></Measure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Group></Measure.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Population></Measure.Population>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.Stratifier></Measure.Stratifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measure.SupplementalData></Measure.SupplementalData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport></MeasureReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Group></MeasureReport.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Population></MeasureReport.Population>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Population1></MeasureReport.Population1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Stratifier></MeasureReport.Stratifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReport.Stratum></MeasureReport.Stratum>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportStatus></MeasureReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportStatus-list></MeasureReportStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportType></MeasureReportType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MeasureReportType-list></MeasureReportType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Media></Media>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication></Medication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Batch></Medication.Batch>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Content></Medication.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Ingredient></Medication.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Package></Medication.Package>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration></MedicationAdministration>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration.Dosage></MedicationAdministration.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration.Performer></MedicationAdministration.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatus></MedicationAdministrationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatus-list></MedicationAdministrationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense></MedicationDispense>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Performer></MedicationDispense.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Substitution></MedicationDispense.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatus></MedicationDispenseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatus-list></MedicationDispenseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest></MedicationRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest.DispenseRequest></MedicationRequest.DispenseRequest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest.Requester></MedicationRequest.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequest.Substitution></MedicationRequest.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestIntent></MedicationRequestIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestIntent-list></MedicationRequestIntent-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestPriority></MedicationRequestPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestPriority-list></MedicationRequestPriority-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestStatus></MedicationRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationRequestStatus-list></MedicationRequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement></MedicationStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementStatus></MedicationStatementStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementStatus-list></MedicationStatementStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementTaken></MedicationStatementTaken>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementTaken-list></MedicationStatementTaken-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatus></MedicationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatus-list></MedicationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageDefinition></MessageDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageDefinition.AllowedResponse></MessageDefinition.AllowedResponse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageDefinition.Focus></MessageDefinition.Focus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader></MessageHeader>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Destination></MessageHeader.Destination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Response></MessageHeader.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Source></MessageHeader.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory></MessageSignificanceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory-list></MessageSignificanceCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Meta></Meta>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Money></Money>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse></NameUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse-list></NameUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem></NamingSystem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem.UniqueId></NamingSystem.UniqueId>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemIdentifierType></NamingSystemIdentifierType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemIdentifierType-list></NamingSystemIdentifierType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemType></NamingSystemType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemType-list></NamingSystemType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Narrative></Narrative>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus></NarrativeStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus-list></NarrativeStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NoteType></NoteType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NoteType-list></NoteType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder></NutritionOrder>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Administration></NutritionOrder.Administration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.EnteralFormula></NutritionOrder.EnteralFormula>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Nutrient></NutritionOrder.Nutrient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.OralDiet></NutritionOrder.OralDiet>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Supplement></NutritionOrder.Supplement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Texture></NutritionOrder.Texture>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrderStatus></NutritionOrderStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrderStatus-list></NutritionOrderStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation></Observation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.Component></Observation.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.ReferenceRange></Observation.ReferenceRange>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.Related></Observation.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRelationshipType></ObservationRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRelationshipType-list></ObservationRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus></ObservationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus-list></ObservationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid></oid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid-primitive></oid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition></OperationDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Binding></OperationDefinition.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Overload></OperationDefinition.Overload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Parameter></OperationDefinition.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationKind></OperationKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationKind-list></OperationKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome></OperationOutcome>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome.Issue></OperationOutcome.Issue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterUse></OperationParameterUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterUse-list></OperationParameterUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization></Organization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization.Contact></Organization.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParameterDefinition></ParameterDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Parameters></Parameters>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Parameters.Parameter></Parameters.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantRequired></ParticipantRequired>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantRequired-list></ParticipantRequired-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipationStatus></ParticipationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipationStatus-list></ParticipationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient></Patient>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Animal></Patient.Animal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Communication></Patient.Communication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Contact></Patient.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Link></Patient.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentNotice></PaymentNotice>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation></PaymentReconciliation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation.Detail></PaymentReconciliation.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation.ProcessNote></PaymentReconciliation.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Period></Period>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person></Person>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person.Link></Person.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition></PlanDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Action></PlanDefinition.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Condition></PlanDefinition.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.DynamicValue></PlanDefinition.DynamicValue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Goal></PlanDefinition.Goal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Participant></PlanDefinition.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.RelatedAction></PlanDefinition.RelatedAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PlanDefinition.Target></PlanDefinition.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<positiveInt></positiveInt>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<positiveInt-primitive></positiveInt-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner></Practitioner>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner.Qualification></Practitioner.Qualification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PractitionerRole></PractitionerRole>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PractitionerRole.AvailableTime></PractitionerRole.AvailableTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PractitionerRole.NotAvailable></PractitionerRole.NotAvailable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure></Procedure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.FocalDevice></Procedure.FocalDevice>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.Performer></Procedure.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequest></ProcedureRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequest.Requester></ProcedureRequest.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessRequest></ProcessRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessRequest.Item></ProcessRequest.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessResponse></ProcessResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessResponse.ProcessNote></ProcessResponse.ProcessNote>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation></PropertyRepresentation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation-list></PropertyRepresentation-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyType></PropertyType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyType-list></PropertyType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance></Provenance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Agent></Provenance.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Entity></Provenance.Entity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole></ProvenanceEntityRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole-list></ProvenanceEntityRole-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PublicationStatus></PublicationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PublicationStatus-list></PublicationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<qualityType></qualityType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<qualityType-list></qualityType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Quantity></Quantity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityComparator></QuantityComparator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityComparator-list></QuantityComparator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire></Questionnaire>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.EnableWhen></Questionnaire.EnableWhen>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Item></Questionnaire.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Option></Questionnaire.Option>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemType></QuestionnaireItemType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireItemType-list></QuestionnaireItemType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse></QuestionnaireResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Answer></QuestionnaireResponse.Answer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Item></QuestionnaireResponse.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponseStatus></QuestionnaireResponseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponseStatus-list></QuestionnaireResponseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Range></Range>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ratio></Ratio>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Reference></Reference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceHandlingPolicy></ReferenceHandlingPolicy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceHandlingPolicy-list></ReferenceHandlingPolicy-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceVersionRules></ReferenceVersionRules>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferenceVersionRules-list></ReferenceVersionRules-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferralRequest></ReferralRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferralRequest.Requester></ReferralRequest.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifact></RelatedArtifact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifactType></RelatedArtifactType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedArtifactType-list></RelatedArtifactType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedPerson></RelatedPerson>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RemittanceOutcome></RemittanceOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RemittanceOutcome-list></RemittanceOutcome-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<repositoryType></repositoryType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<repositoryType-list></repositoryType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestGroup></RequestGroup>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestGroup.Action></RequestGroup.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestGroup.Condition></RequestGroup.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestGroup.RelatedAction></RequestGroup.RelatedAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestIntent></RequestIntent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestIntent-list></RequestIntent-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestPriority></RequestPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestPriority-list></RequestPriority-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestStatus></RequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RequestStatus-list></RequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy></ResearchStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudy.Arm></ResearchStudy.Arm>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudyStatus></ResearchStudyStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchStudyStatus-list></ResearchStudyStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchSubject></ResearchSubject>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchSubjectStatus></ResearchSubjectStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResearchSubjectStatus-list></ResearchSubjectStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Resource></Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceContainer></ResourceContainer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceType></ResourceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceType-list></ResourceType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceVersionPolicy></ResourceVersionPolicy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceVersionPolicy-list></ResourceVersionPolicy-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType></ResponseType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType-list></ResponseType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulCapabilityMode></RestfulCapabilityMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulCapabilityMode-list></RestfulCapabilityMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RiskAssessment></RiskAssessment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RiskAssessment.Prediction></RiskAssessment.Prediction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledData></SampledData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType></SampledDataDataType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType-primitive></SampledDataDataType-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Schedule></Schedule>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchComparator></SearchComparator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchComparator-list></SearchComparator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchEntryMode></SearchEntryMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchEntryMode-list></SearchEntryMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchModifierCode></SearchModifierCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchModifierCode-list></SearchModifierCode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParameter></SearchParameter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParameter.Component></SearchParameter.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType></SearchParamType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType-list></SearchParamType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Sequence></Sequence>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Sequence.Quality></Sequence.Quality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Sequence.ReferenceSeq></Sequence.ReferenceSeq>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Sequence.Repository></Sequence.Repository>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Sequence.Variant></Sequence.Variant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ServiceDefinition></ServiceDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Signature></Signature>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules></SlicingRules>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules-list></SlicingRules-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Slot></Slot>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlotStatus></SlotStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlotStatus-list></SlotStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen></Specimen>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Collection></Specimen.Collection>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Container></Specimen.Container>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Processing></Specimen.Processing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenStatus></SpecimenStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenStatus-list></SpecimenStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string></string>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string-primitive></string-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition></StructureDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Differential></StructureDefinition.Differential>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Mapping></StructureDefinition.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Snapshot></StructureDefinition.Snapshot>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinitionKind></StructureDefinitionKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinitionKind-list></StructureDefinitionKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap></StructureMap>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Dependent></StructureMap.Dependent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Group></StructureMap.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Input></StructureMap.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Parameter></StructureMap.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Rule></StructureMap.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Source></StructureMap.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Structure></StructureMap.Structure>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMap.Target></StructureMap.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapContextType></StructureMapContextType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapContextType-list></StructureMapContextType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapGroupTypeMode></StructureMapGroupTypeMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapGroupTypeMode-list></StructureMapGroupTypeMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapInputMode></StructureMapInputMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapInputMode-list></StructureMapInputMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapModelMode></StructureMapModelMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapModelMode-list></StructureMapModelMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapSourceListMode></StructureMapSourceListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapSourceListMode-list></StructureMapSourceListMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTargetListMode></StructureMapTargetListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTargetListMode-list></StructureMapTargetListMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTransform></StructureMapTransform>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureMapTransform-list></StructureMapTransform-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription></Subscription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription.Channel></Subscription.Channel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionChannelType></SubscriptionChannelType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionChannelType-list></SubscriptionChannelType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatus></SubscriptionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatus-list></SubscriptionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance></Substance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Ingredient></Substance.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Instance></Substance.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDelivery></SupplyDelivery>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDelivery.SuppliedItem></SupplyDelivery.SuppliedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDeliveryStatus></SupplyDeliveryStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDeliveryStatus-list></SupplyDeliveryStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest></SupplyRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest.OrderedItem></SupplyRequest.OrderedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest.Requester></SupplyRequest.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequestStatus></SupplyRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequestStatus-list></SupplyRequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemRestfulInteraction></SystemRestfulInteraction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemRestfulInteraction-list></SystemRestfulInteraction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemVersionProcessingMode></SystemVersionProcessingMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemVersionProcessingMode-list></SystemVersionProcessingMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task></Task>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Input></Task.Input>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Output></Task.Output>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Requester></Task.Requester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Task.Restriction></Task.Restriction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TaskStatus></TaskStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TaskStatus-list></TaskStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport></TestReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Action></TestReport.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Action1></TestReport.Action1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Action2></TestReport.Action2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Assert></TestReport.Assert>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Operation></TestReport.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Participant></TestReport.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Setup></TestReport.Setup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Teardown></TestReport.Teardown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReport.Test></TestReport.Test>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportActionResult></TestReportActionResult>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportActionResult-list></TestReportActionResult-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportParticipantType></TestReportParticipantType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportParticipantType-list></TestReportParticipantType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportResult></TestReportResult>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportResult-list></TestReportResult-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportStatus></TestReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestReportStatus-list></TestReportStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript></TestScript>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action></TestScript.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action1></TestScript.Action1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action2></TestScript.Action2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Assert></TestScript.Assert>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Capability></TestScript.Capability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Destination></TestScript.Destination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Fixture></TestScript.Fixture>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Link></TestScript.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Metadata></TestScript.Metadata>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Operation></TestScript.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Origin></TestScript.Origin>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Param></TestScript.Param>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Param1></TestScript.Param1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Param2></TestScript.Param2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Param3></TestScript.Param3>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.RequestHeader></TestScript.RequestHeader>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Rule></TestScript.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Rule1></TestScript.Rule1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Rule2></TestScript.Rule2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Rule3></TestScript.Rule3>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Ruleset></TestScript.Ruleset>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Ruleset1></TestScript.Ruleset1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Setup></TestScript.Setup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Teardown></TestScript.Teardown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Test></TestScript.Test>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Variable></TestScript.Variable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScriptRequestMethodCode></TestScriptRequestMethodCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScriptRequestMethodCode-list></TestScriptRequestMethodCode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<time></time>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<time-primitive></time-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Timing></Timing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Timing.Repeat></Timing.Repeat>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggerDefinition></TriggerDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggerType></TriggerType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TriggerType-list></TriggerType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeDerivationRule></TypeDerivationRule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeDerivationRule-list></TypeDerivationRule-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeRestfulInteraction></TypeRestfulInteraction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeRestfulInteraction-list></TypeRestfulInteraction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UDIEntryType></UDIEntryType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UDIEntryType-list></UDIEntryType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime></UnitsOfTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime-list></UnitsOfTime-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnknownContentCode></UnknownContentCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnknownContentCode-list></UnknownContentCode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<unsignedInt></unsignedInt>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<unsignedInt-primitive></unsignedInt-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri></uri>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri-primitive></uri-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UsageContext></UsageContext>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Use></Use>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Use-list></Use-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid></uuid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid-primitive></uuid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet></ValueSet>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Compose></ValueSet.Compose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Concept></ValueSet.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Contains></ValueSet.Contains>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Designation></ValueSet.Designation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Expansion></ValueSet.Expansion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Filter></ValueSet.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Include></ValueSet.Include>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Parameter></ValueSet.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionBase></VisionBase>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionBase-list></VisionBase-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionEyes></VisionEyes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionEyes-list></VisionEyes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription></VisionPrescription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription.Dispense></VisionPrescription.Dispense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XHTML></XHTML>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XPathUsageType></XPathUsageType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XPathUsageType-list></XPathUsageType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
    }

    public function testIsContainableTypeWithJSON()
    {
        $json = new \stdClass();
        $json->resourceType = 'Account';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Coverage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Account.Guarantor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AccountStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AccountStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionCardinalityBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionCardinalityBehavior-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionConditionKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionConditionKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionGroupingBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionGroupingBehavior-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionList';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionList-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionParticipantType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionParticipantType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionPrecheckBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionPrecheckBehavior-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRequiredBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionRequiredBehavior-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionSelectionBehavior';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionSelectionBehavior-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActivityDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActivityDefinition.DynamicValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActivityDefinition.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Address';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrativeGender';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrativeGender-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEvent.SuspectEntity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventCausality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdverseEventCausality-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Age';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceClinicalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceClinicalStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCriticality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCriticality-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceVerificationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceVerificationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Annotation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionDirectionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionDirectionType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionOperatorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionOperatorType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionResponseTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionResponseTypes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Attachment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Entity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Network';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAgentNetworkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAgentNetworkType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventOutcome-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BackboneElement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Basic';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Binary';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingStrength';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingStrength-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BodySite';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Request';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Search';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BundleType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BundleType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Certificate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Document';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Endpoint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Implementation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Interaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Interaction1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Messaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Rest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.SearchParam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Security';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.Software';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatement.SupportedMessage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatementKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CapabilityStatementKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Activity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanIntent-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeam';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeam.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeamStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CareTeamStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItem.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ChargeItemStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Accident';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.CareTeam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Information';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Payee';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Procedure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.AddItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Detail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Error';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Payment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression.Finding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression.Investigation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpressionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpressionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeableConcept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Designation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Property';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystem.Property1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemContentMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemContentMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemHierarchyMeaning';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeSystemHierarchyMeaning-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Communication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Communication.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentDefinition.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompartmentType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Attester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Section';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionAttestationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionAttestationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.DependsOn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Unmapped';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapEquivalence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapEquivalence-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapGroupUnmappedMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapGroupUnmappedMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Evidence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Stage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalDeleteStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalDeleteStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalReadStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalReadStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionClinicalStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionClinicalStatusCodes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionVerificationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionVerificationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConfidentialityClassification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConfidentialityClassification-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Actor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Actor1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Data';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Data1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Except';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Consent.Policy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentDataMeaning';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentDataMeaning-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentExceptType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentExceptType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConsentState-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPoint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointSystem-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContentType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContentType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Agent1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Friendly';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Legal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Signer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Term';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.ValuedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.ValuedItem1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContractResourceStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContractResourceStatusCodes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contributor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContributorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContributorType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Count';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage.Grouping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElement.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElementStringency';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElementStringency-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement.CodeFilter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataRequirement.DateFilter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DaysOfWeek';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DaysOfWeek-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue.Mitigation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device.Udi';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceComponent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceComponent.ProductionSpecification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetric';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetric.Calibration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationState-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricColor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricColor-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricOperationalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricOperationalStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceRequest.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseStatementStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseStatementStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport.Image';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DigitalMediaType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DigitalMediaType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiscriminatorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiscriminatorType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Distance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Context';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DomainResource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Duration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Base';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Constraint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Discriminator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Example';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Slicing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Type';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponse.BenefitBalance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponse.Error';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponse.Financial';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponse.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.ClassHistory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Hospitalization';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Location';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.StatusHistory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterLocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterLocationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Endpoint';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EndpointStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EndpointStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.StatusHistory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCareStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCareStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventCapabilityMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventCapabilityMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.Designation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.Designation1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.Designation2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.Exclude';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.ExcludedSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.FixedVersion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExpansionProfile.Include';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Accident';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.AddItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Adjudication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.BenefitBalance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.CareTeam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Detail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Financial';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Information';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Insurance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Payee';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Payment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Procedure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefitStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefitStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Extension';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContext';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContext-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistoryStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistoryStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRAllTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRAllTypes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRDefinedType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRDefinedType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRDeviceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRDeviceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRSubstanceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FHIRSubstanceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FinancialResourceStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FinancialResourceStatusCodes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Flag';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FlagStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FlagStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Goal';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Goal.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GoalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GoalStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphCompartmentRule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphCompartmentRule-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition.Compartment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GraphDefinition.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Member';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidanceResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidanceResponseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidanceResponseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuideDependencyType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuideDependencyType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidePageKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidePageKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService.AvailableTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService.NotAvailable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HTTPVerb';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HTTPVerb-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HumanName';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Identifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentityAssuranceLevel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentityAssuranceLevel-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingManifest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingManifest.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingManifest.Series';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingManifest.Study';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Series';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Explanation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Practitioner';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.VaccinationProtocol';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.DateCriterion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Protocol';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Recommendation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationStatusCodes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationStatusCodes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Dependency';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Global';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Package';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Page';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InstanceAvailability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InstanceAvailability-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Library';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Linkage';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Linkage.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkageType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkageType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location.Position';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'markdown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'markdown-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasmntPrinciple';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasmntPrinciple-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Population';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.Stratifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measure.SupplementalData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Population';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Population1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Stratifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReport.Stratum';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MeasureReportType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Media';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Batch';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Package';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest.DispenseRequest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequest.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestIntent-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestPriority-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationRequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementTaken';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementTaken-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageDefinition.AllowedResponse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageDefinition.Focus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Destination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Meta';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Money';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem.UniqueId';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemIdentifierType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemIdentifierType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Narrative';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NoteType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NoteType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Administration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.EnteralFormula';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Nutrient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.OralDiet';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Supplement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Texture';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrderStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrderStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.ReferenceRange';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Overload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome.Issue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParameterDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Parameters';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Parameters.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantRequired';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantRequired-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Animal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Communication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentNotice';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Period';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.DynamicValue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Goal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.RelatedAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PlanDefinition.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'positiveInt';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'positiveInt-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner.Qualification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PractitionerRole';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PractitionerRole.AvailableTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PractitionerRole.NotAvailable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.FocalDevice';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequest.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessRequest.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessResponse.ProcessNote';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Entity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PublicationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PublicationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'qualityType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'qualityType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Quantity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityComparator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityComparator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.EnableWhen';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Option';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireItemType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Answer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Range';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ratio';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Reference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceHandlingPolicy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceHandlingPolicy-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceVersionRules';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferenceVersionRules-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferralRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferralRequest.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifactType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedArtifactType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedPerson';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RemittanceOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RemittanceOutcome-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'repositoryType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'repositoryType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestGroup';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestGroup.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestGroup.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestGroup.RelatedAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestIntent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestIntent-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestPriority-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudy.Arm';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudyStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchStudyStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchSubject';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchSubjectStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResearchSubjectStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceContainer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceVersionPolicy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceVersionPolicy-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulCapabilityMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulCapabilityMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RiskAssessment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RiskAssessment.Prediction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Schedule';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchComparator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchComparator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchEntryMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchEntryMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchModifierCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchModifierCode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParameter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParameter.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Sequence';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Sequence.Quality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Sequence.ReferenceSeq';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Sequence.Repository';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Sequence.Variant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ServiceDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Signature';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Slot';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlotStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlotStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Collection';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Container';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Processing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Differential';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Snapshot';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinitionKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinitionKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Dependent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Structure';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMap.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapContextType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapContextType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapGroupTypeMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapGroupTypeMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapInputMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapInputMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapModelMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapModelMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapSourceListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapSourceListMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTargetListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTargetListMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTransform';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureMapTransform-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription.Channel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionChannelType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionChannelType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDelivery';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDelivery.SuppliedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDeliveryStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDeliveryStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest.OrderedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemRestfulInteraction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemRestfulInteraction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemVersionProcessingMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemVersionProcessingMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Input';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Output';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Requester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Task.Restriction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TaskStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TaskStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Action1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Action2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Assert';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Setup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Teardown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReport.Test';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportActionResult';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportActionResult-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportParticipantType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportParticipantType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportResult';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportResult-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestReportStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Assert';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Capability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Destination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Fixture';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Metadata';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Origin';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Param';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Param1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Param2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Param3';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.RequestHeader';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Rule1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Rule2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Rule3';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Ruleset';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Ruleset1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Setup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Teardown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Test';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Variable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScriptRequestMethodCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScriptRequestMethodCode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'time';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'time-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Timing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Timing.Repeat';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggerDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggerType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TriggerType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeDerivationRule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeDerivationRule-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeRestfulInteraction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeRestfulInteraction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UDIEntryType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UDIEntryType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnknownContentCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnknownContentCode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'unsignedInt';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'unsignedInt-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UsageContext';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Use';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Use-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Compose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Contains';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Designation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Expansion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Include';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionBase';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionBase-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionEyes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionEyes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription.Dispense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XHTML';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XPathUsageType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XPathUsageType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
    }
}
