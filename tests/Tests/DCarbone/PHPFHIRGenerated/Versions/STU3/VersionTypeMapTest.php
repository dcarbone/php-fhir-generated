<?php

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\STU3;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: January 31st, 2025 23:45+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Wed, Apr 19, 2017 07:44+1000 for FHIR v3.0.1
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */

use DCarbone\PHPFHIRGenerated\Versions\STU3\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassWithNonStringReturnsNull()
    {
        $this->assertNull(VersionTypeMap::getTypeClassName(1));
    }

    public function testGetTypeClassName()
    {
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassName('base64Binary-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassName('boolean-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassName('code-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList', VersionTypeMap::getTypeClassName('AccountStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList', VersionTypeMap::getTypeClassName('ActionCardinalityBehavior-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList', VersionTypeMap::getTypeClassName('ActionConditionKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList', VersionTypeMap::getTypeClassName('ActionGroupingBehavior-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList', VersionTypeMap::getTypeClassName('ActionList-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList', VersionTypeMap::getTypeClassName('ActionParticipantType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList', VersionTypeMap::getTypeClassName('ActionPrecheckBehavior-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList', VersionTypeMap::getTypeClassName('ActionRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList', VersionTypeMap::getTypeClassName('ActionRequiredBehavior-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList', VersionTypeMap::getTypeClassName('ActionSelectionBehavior-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList', VersionTypeMap::getTypeClassName('AddressType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList', VersionTypeMap::getTypeClassName('AddressUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList', VersionTypeMap::getTypeClassName('AdministrativeGender-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList', VersionTypeMap::getTypeClassName('AdverseEventCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList', VersionTypeMap::getTypeClassName('AdverseEventCausality-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList', VersionTypeMap::getTypeClassName('AggregationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList', VersionTypeMap::getTypeClassName('AllergyIntoleranceCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList', VersionTypeMap::getTypeClassName('AllergyIntoleranceClinicalStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList', VersionTypeMap::getTypeClassName('AllergyIntoleranceCriticality-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList', VersionTypeMap::getTypeClassName('AllergyIntoleranceSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList', VersionTypeMap::getTypeClassName('AllergyIntoleranceType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList', VersionTypeMap::getTypeClassName('AllergyIntoleranceVerificationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList', VersionTypeMap::getTypeClassName('AppointmentStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList', VersionTypeMap::getTypeClassName('AssertionDirectionType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList', VersionTypeMap::getTypeClassName('AssertionOperatorType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList', VersionTypeMap::getTypeClassName('AssertionResponseTypes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList', VersionTypeMap::getTypeClassName('AuditEventAction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList', VersionTypeMap::getTypeClassName('AuditEventAgentNetworkType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList', VersionTypeMap::getTypeClassName('AuditEventOutcome-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList', VersionTypeMap::getTypeClassName('BindingStrength-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList', VersionTypeMap::getTypeClassName('BundleType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList', VersionTypeMap::getTypeClassName('CapabilityStatementKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList', VersionTypeMap::getTypeClassName('CarePlanActivityStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList', VersionTypeMap::getTypeClassName('CarePlanIntent-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList', VersionTypeMap::getTypeClassName('CarePlanStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList', VersionTypeMap::getTypeClassName('CareTeamStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList', VersionTypeMap::getTypeClassName('ChargeItemStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList', VersionTypeMap::getTypeClassName('ClinicalImpressionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList', VersionTypeMap::getTypeClassName('CodeSystemContentMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList', VersionTypeMap::getTypeClassName('CodeSystemHierarchyMeaning-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList', VersionTypeMap::getTypeClassName('CompartmentType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList', VersionTypeMap::getTypeClassName('CompositionAttestationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList', VersionTypeMap::getTypeClassName('CompositionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList', VersionTypeMap::getTypeClassName('ConceptMapEquivalence-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList', VersionTypeMap::getTypeClassName('ConceptMapGroupUnmappedMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList', VersionTypeMap::getTypeClassName('ConditionalDeleteStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList', VersionTypeMap::getTypeClassName('ConditionalReadStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList', VersionTypeMap::getTypeClassName('ConditionClinicalStatusCodes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList', VersionTypeMap::getTypeClassName('ConditionVerificationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList', VersionTypeMap::getTypeClassName('ConfidentialityClassification-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList', VersionTypeMap::getTypeClassName('ConsentDataMeaning-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList', VersionTypeMap::getTypeClassName('ConsentExceptType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList', VersionTypeMap::getTypeClassName('ConsentState-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList', VersionTypeMap::getTypeClassName('ConstraintSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList', VersionTypeMap::getTypeClassName('ContactPointSystem-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList', VersionTypeMap::getTypeClassName('ContactPointUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList', VersionTypeMap::getTypeClassName('ContentType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList', VersionTypeMap::getTypeClassName('ContractResourceStatusCodes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList', VersionTypeMap::getTypeClassName('ContributorType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList', VersionTypeMap::getTypeClassName('DataElementStringency-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList', VersionTypeMap::getTypeClassName('DaysOfWeek-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList', VersionTypeMap::getTypeClassName('DetectedIssueSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationState-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList', VersionTypeMap::getTypeClassName('DeviceMetricCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList', VersionTypeMap::getTypeClassName('DeviceMetricColor-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList', VersionTypeMap::getTypeClassName('DeviceMetricOperationalStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList', VersionTypeMap::getTypeClassName('DeviceUseStatementStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList', VersionTypeMap::getTypeClassName('DiagnosticReportStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList', VersionTypeMap::getTypeClassName('DigitalMediaType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList', VersionTypeMap::getTypeClassName('DiscriminatorType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList', VersionTypeMap::getTypeClassName('DocumentMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList', VersionTypeMap::getTypeClassName('DocumentReferenceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList', VersionTypeMap::getTypeClassName('DocumentRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList', VersionTypeMap::getTypeClassName('EncounterLocationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList', VersionTypeMap::getTypeClassName('EncounterStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList', VersionTypeMap::getTypeClassName('EndpointStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList', VersionTypeMap::getTypeClassName('EpisodeOfCareStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList', VersionTypeMap::getTypeClassName('EventCapabilityMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList', VersionTypeMap::getTypeClassName('EventStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList', VersionTypeMap::getTypeClassName('EventTiming-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList', VersionTypeMap::getTypeClassName('ExplanationOfBenefitStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList', VersionTypeMap::getTypeClassName('ExtensionContext-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList', VersionTypeMap::getTypeClassName('FamilyHistoryStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList', VersionTypeMap::getTypeClassName('FHIRAllTypes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList', VersionTypeMap::getTypeClassName('FHIRDefinedType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList', VersionTypeMap::getTypeClassName('FHIRDeviceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList', VersionTypeMap::getTypeClassName('FHIRSubstanceStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList', VersionTypeMap::getTypeClassName('FilterOperator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList', VersionTypeMap::getTypeClassName('FinancialResourceStatusCodes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList', VersionTypeMap::getTypeClassName('FlagStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList', VersionTypeMap::getTypeClassName('GoalStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList', VersionTypeMap::getTypeClassName('GraphCompartmentRule-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList', VersionTypeMap::getTypeClassName('GroupType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList', VersionTypeMap::getTypeClassName('GuidanceResponseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList', VersionTypeMap::getTypeClassName('GuideDependencyType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList', VersionTypeMap::getTypeClassName('GuidePageKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList', VersionTypeMap::getTypeClassName('HTTPVerb-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList', VersionTypeMap::getTypeClassName('IdentifierUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList', VersionTypeMap::getTypeClassName('IdentityAssuranceLevel-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList', VersionTypeMap::getTypeClassName('ImmunizationStatusCodes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList', VersionTypeMap::getTypeClassName('InstanceAvailability-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList', VersionTypeMap::getTypeClassName('IssueSeverity-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList', VersionTypeMap::getTypeClassName('IssueType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList', VersionTypeMap::getTypeClassName('LinkageType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList', VersionTypeMap::getTypeClassName('LinkType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList', VersionTypeMap::getTypeClassName('ListMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList', VersionTypeMap::getTypeClassName('ListStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList', VersionTypeMap::getTypeClassName('LocationMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList', VersionTypeMap::getTypeClassName('LocationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList', VersionTypeMap::getTypeClassName('MeasmntPrinciple-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList', VersionTypeMap::getTypeClassName('MeasureReportStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList', VersionTypeMap::getTypeClassName('MeasureReportType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList', VersionTypeMap::getTypeClassName('MedicationAdministrationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList', VersionTypeMap::getTypeClassName('MedicationDispenseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList', VersionTypeMap::getTypeClassName('MedicationRequestIntent-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList', VersionTypeMap::getTypeClassName('MedicationRequestPriority-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList', VersionTypeMap::getTypeClassName('MedicationRequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList', VersionTypeMap::getTypeClassName('MedicationStatementStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList', VersionTypeMap::getTypeClassName('MedicationStatementTaken-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList', VersionTypeMap::getTypeClassName('MedicationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList', VersionTypeMap::getTypeClassName('MessageSignificanceCategory-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList', VersionTypeMap::getTypeClassName('NameUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList', VersionTypeMap::getTypeClassName('NamingSystemIdentifierType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList', VersionTypeMap::getTypeClassName('NamingSystemType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList', VersionTypeMap::getTypeClassName('NarrativeStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList', VersionTypeMap::getTypeClassName('NoteType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList', VersionTypeMap::getTypeClassName('NutritionOrderStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList', VersionTypeMap::getTypeClassName('ObservationRelationshipType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList', VersionTypeMap::getTypeClassName('ObservationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList', VersionTypeMap::getTypeClassName('OperationKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList', VersionTypeMap::getTypeClassName('OperationParameterUse-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList', VersionTypeMap::getTypeClassName('ParticipantRequired-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList', VersionTypeMap::getTypeClassName('ParticipationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList', VersionTypeMap::getTypeClassName('PropertyRepresentation-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList', VersionTypeMap::getTypeClassName('PropertyType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList', VersionTypeMap::getTypeClassName('ProvenanceEntityRole-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList', VersionTypeMap::getTypeClassName('PublicationStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList', VersionTypeMap::getTypeClassName('qualityType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList', VersionTypeMap::getTypeClassName('QuantityComparator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList', VersionTypeMap::getTypeClassName('QuestionnaireItemType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList', VersionTypeMap::getTypeClassName('QuestionnaireResponseStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList', VersionTypeMap::getTypeClassName('ReferenceHandlingPolicy-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList', VersionTypeMap::getTypeClassName('ReferenceVersionRules-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList', VersionTypeMap::getTypeClassName('RelatedArtifactType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList', VersionTypeMap::getTypeClassName('RemittanceOutcome-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList', VersionTypeMap::getTypeClassName('repositoryType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList', VersionTypeMap::getTypeClassName('RequestIntent-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList', VersionTypeMap::getTypeClassName('RequestPriority-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList', VersionTypeMap::getTypeClassName('RequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList', VersionTypeMap::getTypeClassName('ResearchStudyStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList', VersionTypeMap::getTypeClassName('ResearchSubjectStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList', VersionTypeMap::getTypeClassName('ResourceType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList', VersionTypeMap::getTypeClassName('ResourceVersionPolicy-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList', VersionTypeMap::getTypeClassName('ResponseType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList', VersionTypeMap::getTypeClassName('RestfulCapabilityMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList', VersionTypeMap::getTypeClassName('SearchComparator-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList', VersionTypeMap::getTypeClassName('SearchEntryMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList', VersionTypeMap::getTypeClassName('SearchModifierCode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList', VersionTypeMap::getTypeClassName('SearchParamType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList', VersionTypeMap::getTypeClassName('SlicingRules-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList', VersionTypeMap::getTypeClassName('SlotStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList', VersionTypeMap::getTypeClassName('SpecimenStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList', VersionTypeMap::getTypeClassName('StructureDefinitionKind-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList', VersionTypeMap::getTypeClassName('StructureMapContextType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList', VersionTypeMap::getTypeClassName('StructureMapGroupTypeMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList', VersionTypeMap::getTypeClassName('StructureMapInputMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList', VersionTypeMap::getTypeClassName('StructureMapModelMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList', VersionTypeMap::getTypeClassName('StructureMapSourceListMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList', VersionTypeMap::getTypeClassName('StructureMapTargetListMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList', VersionTypeMap::getTypeClassName('StructureMapTransform-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList', VersionTypeMap::getTypeClassName('SubscriptionChannelType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList', VersionTypeMap::getTypeClassName('SubscriptionStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList', VersionTypeMap::getTypeClassName('SupplyDeliveryStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList', VersionTypeMap::getTypeClassName('SupplyRequestStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList', VersionTypeMap::getTypeClassName('SystemRestfulInteraction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList', VersionTypeMap::getTypeClassName('SystemVersionProcessingMode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList', VersionTypeMap::getTypeClassName('TaskStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList', VersionTypeMap::getTypeClassName('TestReportActionResult-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList', VersionTypeMap::getTypeClassName('TestReportParticipantType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList', VersionTypeMap::getTypeClassName('TestReportResult-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList', VersionTypeMap::getTypeClassName('TestReportStatus-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList', VersionTypeMap::getTypeClassName('TestScriptRequestMethodCode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList', VersionTypeMap::getTypeClassName('TriggerType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList', VersionTypeMap::getTypeClassName('TypeDerivationRule-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList', VersionTypeMap::getTypeClassName('TypeRestfulInteraction-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList', VersionTypeMap::getTypeClassName('UDIEntryType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList', VersionTypeMap::getTypeClassName('UnitsOfTime-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList', VersionTypeMap::getTypeClassName('UnknownContentCode-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList', VersionTypeMap::getTypeClassName('Use-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList', VersionTypeMap::getTypeClassName('VisionBase-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList', VersionTypeMap::getTypeClassName('VisionEyes-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList', VersionTypeMap::getTypeClassName('XPathUsageType-list'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassName('date-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassName('dateTime-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassName('decimal-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement', VersionTypeMap::getTypeClassName('Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus', VersionTypeMap::getTypeClassName('AccountStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior', VersionTypeMap::getTypeClassName('ActionCardinalityBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind', VersionTypeMap::getTypeClassName('ActionConditionKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior', VersionTypeMap::getTypeClassName('ActionGroupingBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList', VersionTypeMap::getTypeClassName('ActionList'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType', VersionTypeMap::getTypeClassName('ActionParticipantType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior', VersionTypeMap::getTypeClassName('ActionPrecheckBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType', VersionTypeMap::getTypeClassName('ActionRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior', VersionTypeMap::getTypeClassName('ActionRequiredBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior', VersionTypeMap::getTypeClassName('ActionSelectionBehavior'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassName('Address'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType', VersionTypeMap::getTypeClassName('AddressType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassName('AddressUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender', VersionTypeMap::getTypeClassName('AdministrativeGender'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory', VersionTypeMap::getTypeClassName('AdverseEventCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality', VersionTypeMap::getTypeClassName('AdverseEventCausality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassName('AggregationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory', VersionTypeMap::getTypeClassName('AllergyIntoleranceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus', VersionTypeMap::getTypeClassName('AllergyIntoleranceClinicalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality', VersionTypeMap::getTypeClassName('AllergyIntoleranceCriticality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity', VersionTypeMap::getTypeClassName('AllergyIntoleranceSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType', VersionTypeMap::getTypeClassName('AllergyIntoleranceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus', VersionTypeMap::getTypeClassName('AllergyIntoleranceVerificationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation', VersionTypeMap::getTypeClassName('Annotation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus', VersionTypeMap::getTypeClassName('AppointmentStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType', VersionTypeMap::getTypeClassName('AssertionDirectionType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType', VersionTypeMap::getTypeClassName('AssertionOperatorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes', VersionTypeMap::getTypeClassName('AssertionResponseTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassName('Attachment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction', VersionTypeMap::getTypeClassName('AuditEventAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType', VersionTypeMap::getTypeClassName('AuditEventAgentNetworkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome', VersionTypeMap::getTypeClassName('AuditEventOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassName('BackboneElement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage', VersionTypeMap::getTypeClassName('Account.Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor', VersionTypeMap::getTypeClassName('Account.Guarantor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue', VersionTypeMap::getTypeClassName('ActivityDefinition.DynamicValue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant', VersionTypeMap::getTypeClassName('ActivityDefinition.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity', VersionTypeMap::getTypeClassName('AdverseEvent.SuspectEntity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', VersionTypeMap::getTypeClassName('AllergyIntolerance.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', VersionTypeMap::getTypeClassName('Appointment.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent', VersionTypeMap::getTypeClassName('AuditEvent.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', VersionTypeMap::getTypeClassName('AuditEvent.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity', VersionTypeMap::getTypeClassName('AuditEvent.Entity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', VersionTypeMap::getTypeClassName('AuditEvent.Network'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', VersionTypeMap::getTypeClassName('AuditEvent.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', VersionTypeMap::getTypeClassName('Bundle.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', VersionTypeMap::getTypeClassName('Bundle.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', VersionTypeMap::getTypeClassName('Bundle.Request'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', VersionTypeMap::getTypeClassName('Bundle.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', VersionTypeMap::getTypeClassName('Bundle.Search'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate', VersionTypeMap::getTypeClassName('CapabilityStatement.Certificate'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument', VersionTypeMap::getTypeClassName('CapabilityStatement.Document'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint', VersionTypeMap::getTypeClassName('CapabilityStatement.Endpoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent', VersionTypeMap::getTypeClassName('CapabilityStatement.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation', VersionTypeMap::getTypeClassName('CapabilityStatement.Implementation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction', VersionTypeMap::getTypeClassName('CapabilityStatement.Interaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1', VersionTypeMap::getTypeClassName('CapabilityStatement.Interaction1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging', VersionTypeMap::getTypeClassName('CapabilityStatement.Messaging'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation', VersionTypeMap::getTypeClassName('CapabilityStatement.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource', VersionTypeMap::getTypeClassName('CapabilityStatement.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest', VersionTypeMap::getTypeClassName('CapabilityStatement.Rest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam', VersionTypeMap::getTypeClassName('CapabilityStatement.SearchParam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity', VersionTypeMap::getTypeClassName('CapabilityStatement.Security'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware', VersionTypeMap::getTypeClassName('CapabilityStatement.Software'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage', VersionTypeMap::getTypeClassName('CapabilityStatement.SupportedMessage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassName('CarePlan.Activity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', VersionTypeMap::getTypeClassName('CarePlan.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant', VersionTypeMap::getTypeClassName('CareTeam.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant', VersionTypeMap::getTypeClassName('ChargeItem.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', VersionTypeMap::getTypeClassName('ClaimResponse.AddItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', VersionTypeMap::getTypeClassName('ClaimResponse.Adjudication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', VersionTypeMap::getTypeClassName('ClaimResponse.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', VersionTypeMap::getTypeClassName('ClaimResponse.Detail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', VersionTypeMap::getTypeClassName('ClaimResponse.Error'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance', VersionTypeMap::getTypeClassName('ClaimResponse.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', VersionTypeMap::getTypeClassName('ClaimResponse.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment', VersionTypeMap::getTypeClassName('ClaimResponse.Payment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote', VersionTypeMap::getTypeClassName('ClaimResponse.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', VersionTypeMap::getTypeClassName('ClaimResponse.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident', VersionTypeMap::getTypeClassName('Claim.Accident'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam', VersionTypeMap::getTypeClassName('Claim.CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', VersionTypeMap::getTypeClassName('Claim.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', VersionTypeMap::getTypeClassName('Claim.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation', VersionTypeMap::getTypeClassName('Claim.Information'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance', VersionTypeMap::getTypeClassName('Claim.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', VersionTypeMap::getTypeClassName('Claim.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', VersionTypeMap::getTypeClassName('Claim.Payee'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure', VersionTypeMap::getTypeClassName('Claim.Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated', VersionTypeMap::getTypeClassName('Claim.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', VersionTypeMap::getTypeClassName('Claim.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', VersionTypeMap::getTypeClassName('ClinicalImpression.Finding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation', VersionTypeMap::getTypeClassName('ClinicalImpression.Investigation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept', VersionTypeMap::getTypeClassName('CodeSystem.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation', VersionTypeMap::getTypeClassName('CodeSystem.Designation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter', VersionTypeMap::getTypeClassName('CodeSystem.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty', VersionTypeMap::getTypeClassName('CodeSystem.Property'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1', VersionTypeMap::getTypeClassName('CodeSystem.Property1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', VersionTypeMap::getTypeClassName('CommunicationRequest.Payload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester', VersionTypeMap::getTypeClassName('CommunicationRequest.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', VersionTypeMap::getTypeClassName('Communication.Payload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource', VersionTypeMap::getTypeClassName('CompartmentDefinition.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassName('Composition.Attester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassName('Composition.Event'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo', VersionTypeMap::getTypeClassName('Composition.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassName('Composition.Section'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassName('ConceptMap.DependsOn'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', VersionTypeMap::getTypeClassName('ConceptMap.Element'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup', VersionTypeMap::getTypeClassName('ConceptMap.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', VersionTypeMap::getTypeClassName('ConceptMap.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped', VersionTypeMap::getTypeClassName('ConceptMap.Unmapped'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassName('Condition.Evidence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassName('Condition.Stage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor', VersionTypeMap::getTypeClassName('Consent.Actor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1', VersionTypeMap::getTypeClassName('Consent.Actor1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData', VersionTypeMap::getTypeClassName('Consent.Data'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1', VersionTypeMap::getTypeClassName('Consent.Data1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept', VersionTypeMap::getTypeClassName('Consent.Except'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy', VersionTypeMap::getTypeClassName('Consent.Policy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent', VersionTypeMap::getTypeClassName('Contract.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1', VersionTypeMap::getTypeClassName('Contract.Agent1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', VersionTypeMap::getTypeClassName('Contract.Friendly'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', VersionTypeMap::getTypeClassName('Contract.Legal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', VersionTypeMap::getTypeClassName('Contract.Rule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', VersionTypeMap::getTypeClassName('Contract.Signer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', VersionTypeMap::getTypeClassName('Contract.Term'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', VersionTypeMap::getTypeClassName('Contract.ValuedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1', VersionTypeMap::getTypeClassName('Contract.ValuedItem1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping', VersionTypeMap::getTypeClassName('Coverage.Grouping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping', VersionTypeMap::getTypeClassName('DataElement.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', VersionTypeMap::getTypeClassName('DetectedIssue.Mitigation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification', VersionTypeMap::getTypeClassName('DeviceComponent.ProductionSpecification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', VersionTypeMap::getTypeClassName('DeviceMetric.Calibration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester', VersionTypeMap::getTypeClassName('DeviceRequest.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi', VersionTypeMap::getTypeClassName('Device.Udi'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', VersionTypeMap::getTypeClassName('DiagnosticReport.Image'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer', VersionTypeMap::getTypeClassName('DiagnosticReport.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent', VersionTypeMap::getTypeClassName('DocumentManifest.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', VersionTypeMap::getTypeClassName('DocumentManifest.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', VersionTypeMap::getTypeClassName('DocumentReference.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassName('DocumentReference.Context'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated', VersionTypeMap::getTypeClassName('DocumentReference.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassName('DocumentReference.RelatesTo'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance', VersionTypeMap::getTypeClassName('EligibilityResponse.BenefitBalance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError', VersionTypeMap::getTypeClassName('EligibilityResponse.Error'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial', VersionTypeMap::getTypeClassName('EligibilityResponse.Financial'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance', VersionTypeMap::getTypeClassName('EligibilityResponse.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory', VersionTypeMap::getTypeClassName('Encounter.ClassHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis', VersionTypeMap::getTypeClassName('Encounter.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassName('Encounter.Hospitalization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassName('Encounter.Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassName('Encounter.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', VersionTypeMap::getTypeClassName('Encounter.StatusHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis', VersionTypeMap::getTypeClassName('EpisodeOfCare.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', VersionTypeMap::getTypeClassName('EpisodeOfCare.StatusHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation', VersionTypeMap::getTypeClassName('ExpansionProfile.Designation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1', VersionTypeMap::getTypeClassName('ExpansionProfile.Designation1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2', VersionTypeMap::getTypeClassName('ExpansionProfile.Designation2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude', VersionTypeMap::getTypeClassName('ExpansionProfile.Exclude'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem', VersionTypeMap::getTypeClassName('ExpansionProfile.ExcludedSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion', VersionTypeMap::getTypeClassName('ExpansionProfile.FixedVersion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude', VersionTypeMap::getTypeClassName('ExpansionProfile.Include'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Accident'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.AddItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Adjudication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.BenefitBalance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Detail1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Diagnosis'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Financial'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Information'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Insurance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Payee'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Payment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail', VersionTypeMap::getTypeClassName('ExplanationOfBenefit.SubDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', VersionTypeMap::getTypeClassName('FamilyMemberHistory.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget', VersionTypeMap::getTypeClassName('Goal.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment', VersionTypeMap::getTypeClassName('GraphDefinition.Compartment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink', VersionTypeMap::getTypeClassName('GraphDefinition.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget', VersionTypeMap::getTypeClassName('GraphDefinition.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassName('Group.Characteristic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', VersionTypeMap::getTypeClassName('Group.Member'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', VersionTypeMap::getTypeClassName('HealthcareService.AvailableTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', VersionTypeMap::getTypeClassName('HealthcareService.NotAvailable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance', VersionTypeMap::getTypeClassName('ImagingManifest.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries', VersionTypeMap::getTypeClassName('ImagingManifest.Series'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy', VersionTypeMap::getTypeClassName('ImagingManifest.Study'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassName('ImagingStudy.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassName('ImagingStudy.Series'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.DateCriterion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Protocol'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation.Recommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', VersionTypeMap::getTypeClassName('Immunization.Explanation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner', VersionTypeMap::getTypeClassName('Immunization.Practitioner'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassName('Immunization.Reaction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', VersionTypeMap::getTypeClassName('Immunization.VaccinationProtocol'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency', VersionTypeMap::getTypeClassName('ImplementationGuide.Dependency'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', VersionTypeMap::getTypeClassName('ImplementationGuide.Global'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage', VersionTypeMap::getTypeClassName('ImplementationGuide.Package'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', VersionTypeMap::getTypeClassName('ImplementationGuide.Page'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', VersionTypeMap::getTypeClassName('ImplementationGuide.Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem', VersionTypeMap::getTypeClassName('Linkage.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassName('List.Entry'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassName('Location.Position'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup', VersionTypeMap::getTypeClassName('MeasureReport.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation', VersionTypeMap::getTypeClassName('MeasureReport.Population'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1', VersionTypeMap::getTypeClassName('MeasureReport.Population1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier', VersionTypeMap::getTypeClassName('MeasureReport.Stratifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum', VersionTypeMap::getTypeClassName('MeasureReport.Stratum'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup', VersionTypeMap::getTypeClassName('Measure.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation', VersionTypeMap::getTypeClassName('Measure.Population'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier', VersionTypeMap::getTypeClassName('Measure.Stratifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData', VersionTypeMap::getTypeClassName('Measure.SupplementalData'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassName('MedicationAdministration.Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer', VersionTypeMap::getTypeClassName('MedicationAdministration.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer', VersionTypeMap::getTypeClassName('MedicationDispense.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassName('MedicationDispense.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest', VersionTypeMap::getTypeClassName('MedicationRequest.DispenseRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester', VersionTypeMap::getTypeClassName('MedicationRequest.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution', VersionTypeMap::getTypeClassName('MedicationRequest.Substitution'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', VersionTypeMap::getTypeClassName('Medication.Batch'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', VersionTypeMap::getTypeClassName('Medication.Content'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassName('Medication.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', VersionTypeMap::getTypeClassName('Medication.Package'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse', VersionTypeMap::getTypeClassName('MessageDefinition.AllowedResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus', VersionTypeMap::getTypeClassName('MessageDefinition.Focus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassName('MessageHeader.Destination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassName('MessageHeader.Response'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassName('MessageHeader.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', VersionTypeMap::getTypeClassName('NamingSystem.UniqueId'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', VersionTypeMap::getTypeClassName('NutritionOrder.Administration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', VersionTypeMap::getTypeClassName('NutritionOrder.EnteralFormula'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', VersionTypeMap::getTypeClassName('NutritionOrder.Nutrient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', VersionTypeMap::getTypeClassName('NutritionOrder.OralDiet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', VersionTypeMap::getTypeClassName('NutritionOrder.Supplement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', VersionTypeMap::getTypeClassName('NutritionOrder.Texture'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', VersionTypeMap::getTypeClassName('Observation.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassName('Observation.ReferenceRange'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', VersionTypeMap::getTypeClassName('Observation.Related'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', VersionTypeMap::getTypeClassName('OperationDefinition.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload', VersionTypeMap::getTypeClassName('OperationDefinition.Overload'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', VersionTypeMap::getTypeClassName('OperationDefinition.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassName('OperationOutcome.Issue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassName('Organization.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', VersionTypeMap::getTypeClassName('Parameters.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', VersionTypeMap::getTypeClassName('Patient.Animal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', VersionTypeMap::getTypeClassName('Patient.Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassName('Patient.Contact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassName('Patient.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', VersionTypeMap::getTypeClassName('PaymentReconciliation.Detail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote', VersionTypeMap::getTypeClassName('PaymentReconciliation.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', VersionTypeMap::getTypeClassName('Person.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction', VersionTypeMap::getTypeClassName('PlanDefinition.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition', VersionTypeMap::getTypeClassName('PlanDefinition.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue', VersionTypeMap::getTypeClassName('PlanDefinition.DynamicValue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal', VersionTypeMap::getTypeClassName('PlanDefinition.Goal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant', VersionTypeMap::getTypeClassName('PlanDefinition.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction', VersionTypeMap::getTypeClassName('PlanDefinition.RelatedAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget', VersionTypeMap::getTypeClassName('PlanDefinition.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime', VersionTypeMap::getTypeClassName('PractitionerRole.AvailableTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable', VersionTypeMap::getTypeClassName('PractitionerRole.NotAvailable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassName('Practitioner.Qualification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester', VersionTypeMap::getTypeClassName('ProcedureRequest.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', VersionTypeMap::getTypeClassName('Procedure.FocalDevice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassName('Procedure.Performer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem', VersionTypeMap::getTypeClassName('ProcessRequest.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote', VersionTypeMap::getTypeClassName('ProcessResponse.ProcessNote'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassName('Provenance.Agent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassName('Provenance.Entity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Answer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem', VersionTypeMap::getTypeClassName('QuestionnaireResponse.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen', VersionTypeMap::getTypeClassName('Questionnaire.EnableWhen'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem', VersionTypeMap::getTypeClassName('Questionnaire.Item'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption', VersionTypeMap::getTypeClassName('Questionnaire.Option'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester', VersionTypeMap::getTypeClassName('ReferralRequest.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction', VersionTypeMap::getTypeClassName('RequestGroup.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition', VersionTypeMap::getTypeClassName('RequestGroup.Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction', VersionTypeMap::getTypeClassName('RequestGroup.RelatedAction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm', VersionTypeMap::getTypeClassName('ResearchStudy.Arm'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', VersionTypeMap::getTypeClassName('RiskAssessment.Prediction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent', VersionTypeMap::getTypeClassName('SearchParameter.Component'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality', VersionTypeMap::getTypeClassName('Sequence.Quality'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq', VersionTypeMap::getTypeClassName('Sequence.ReferenceSeq'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository', VersionTypeMap::getTypeClassName('Sequence.Repository'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant', VersionTypeMap::getTypeClassName('Sequence.Variant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassName('Specimen.Collection'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassName('Specimen.Container'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing', VersionTypeMap::getTypeClassName('Specimen.Processing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', VersionTypeMap::getTypeClassName('StructureDefinition.Differential'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', VersionTypeMap::getTypeClassName('StructureDefinition.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', VersionTypeMap::getTypeClassName('StructureDefinition.Snapshot'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent', VersionTypeMap::getTypeClassName('StructureMap.Dependent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup', VersionTypeMap::getTypeClassName('StructureMap.Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput', VersionTypeMap::getTypeClassName('StructureMap.Input'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter', VersionTypeMap::getTypeClassName('StructureMap.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule', VersionTypeMap::getTypeClassName('StructureMap.Rule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource', VersionTypeMap::getTypeClassName('StructureMap.Source'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure', VersionTypeMap::getTypeClassName('StructureMap.Structure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget', VersionTypeMap::getTypeClassName('StructureMap.Target'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', VersionTypeMap::getTypeClassName('Subscription.Channel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassName('Substance.Ingredient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassName('Substance.Instance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem', VersionTypeMap::getTypeClassName('SupplyDelivery.SuppliedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem', VersionTypeMap::getTypeClassName('SupplyRequest.OrderedItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester', VersionTypeMap::getTypeClassName('SupplyRequest.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput', VersionTypeMap::getTypeClassName('Task.Input'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput', VersionTypeMap::getTypeClassName('Task.Output'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester', VersionTypeMap::getTypeClassName('Task.Requester'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction', VersionTypeMap::getTypeClassName('Task.Restriction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction', VersionTypeMap::getTypeClassName('TestReport.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1', VersionTypeMap::getTypeClassName('TestReport.Action1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2', VersionTypeMap::getTypeClassName('TestReport.Action2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert', VersionTypeMap::getTypeClassName('TestReport.Assert'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation', VersionTypeMap::getTypeClassName('TestReport.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant', VersionTypeMap::getTypeClassName('TestReport.Participant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup', VersionTypeMap::getTypeClassName('TestReport.Setup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown', VersionTypeMap::getTypeClassName('TestReport.Teardown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest', VersionTypeMap::getTypeClassName('TestReport.Test'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', VersionTypeMap::getTypeClassName('TestScript.Action'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', VersionTypeMap::getTypeClassName('TestScript.Action1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', VersionTypeMap::getTypeClassName('TestScript.Action2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', VersionTypeMap::getTypeClassName('TestScript.Assert'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', VersionTypeMap::getTypeClassName('TestScript.Capability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination', VersionTypeMap::getTypeClassName('TestScript.Destination'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', VersionTypeMap::getTypeClassName('TestScript.Fixture'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', VersionTypeMap::getTypeClassName('TestScript.Link'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', VersionTypeMap::getTypeClassName('TestScript.Metadata'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', VersionTypeMap::getTypeClassName('TestScript.Operation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin', VersionTypeMap::getTypeClassName('TestScript.Origin'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam', VersionTypeMap::getTypeClassName('TestScript.Param'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1', VersionTypeMap::getTypeClassName('TestScript.Param1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2', VersionTypeMap::getTypeClassName('TestScript.Param2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3', VersionTypeMap::getTypeClassName('TestScript.Param3'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', VersionTypeMap::getTypeClassName('TestScript.RequestHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule', VersionTypeMap::getTypeClassName('TestScript.Rule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1', VersionTypeMap::getTypeClassName('TestScript.Rule1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2', VersionTypeMap::getTypeClassName('TestScript.Rule2'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3', VersionTypeMap::getTypeClassName('TestScript.Rule3'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset', VersionTypeMap::getTypeClassName('TestScript.Ruleset'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1', VersionTypeMap::getTypeClassName('TestScript.Ruleset1'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', VersionTypeMap::getTypeClassName('TestScript.Setup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', VersionTypeMap::getTypeClassName('TestScript.Teardown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', VersionTypeMap::getTypeClassName('TestScript.Test'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', VersionTypeMap::getTypeClassName('TestScript.Variable'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassName('ValueSet.Compose'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassName('ValueSet.Concept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassName('ValueSet.Contains'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', VersionTypeMap::getTypeClassName('ValueSet.Designation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassName('ValueSet.Expansion'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassName('ValueSet.Filter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassName('ValueSet.Include'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', VersionTypeMap::getTypeClassName('ValueSet.Parameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense', VersionTypeMap::getTypeClassName('VisionPrescription.Dispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassName('base64Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength', VersionTypeMap::getTypeClassName('BindingStrength'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassName('boolean'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType', VersionTypeMap::getTypeClassName('BundleType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind', VersionTypeMap::getTypeClassName('CapabilityStatementKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassName('CarePlanActivityStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent', VersionTypeMap::getTypeClassName('CarePlanIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus', VersionTypeMap::getTypeClassName('CarePlanStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus', VersionTypeMap::getTypeClassName('CareTeamStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus', VersionTypeMap::getTypeClassName('ChargeItemStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus', VersionTypeMap::getTypeClassName('ClinicalImpressionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassName('code'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassName('CodeableConcept'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode', VersionTypeMap::getTypeClassName('CodeSystemContentMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning', VersionTypeMap::getTypeClassName('CodeSystemHierarchyMeaning'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassName('Coding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType', VersionTypeMap::getTypeClassName('CompartmentType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassName('CompositionAttestationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassName('CompositionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassName('ConceptMapEquivalence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode', VersionTypeMap::getTypeClassName('ConceptMapGroupUnmappedMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus', VersionTypeMap::getTypeClassName('ConditionalDeleteStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus', VersionTypeMap::getTypeClassName('ConditionalReadStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes', VersionTypeMap::getTypeClassName('ConditionClinicalStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus', VersionTypeMap::getTypeClassName('ConditionVerificationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification', VersionTypeMap::getTypeClassName('ConfidentialityClassification'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning', VersionTypeMap::getTypeClassName('ConsentDataMeaning'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType', VersionTypeMap::getTypeClassName('ConsentExceptType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState', VersionTypeMap::getTypeClassName('ConsentState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassName('ConstraintSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail', VersionTypeMap::getTypeClassName('ContactDetail'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint', VersionTypeMap::getTypeClassName('ContactPoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem', VersionTypeMap::getTypeClassName('ContactPointSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse', VersionTypeMap::getTypeClassName('ContactPointUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType', VersionTypeMap::getTypeClassName('ContentType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes', VersionTypeMap::getTypeClassName('ContractResourceStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor', VersionTypeMap::getTypeClassName('Contributor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType', VersionTypeMap::getTypeClassName('ContributorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency', VersionTypeMap::getTypeClassName('DataElementStringency'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement', VersionTypeMap::getTypeClassName('DataRequirement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter', VersionTypeMap::getTypeClassName('DataRequirement.CodeFilter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter', VersionTypeMap::getTypeClassName('DataRequirement.DateFilter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassName('date'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassName('dateTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek', VersionTypeMap::getTypeClassName('DaysOfWeek'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassName('decimal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity', VersionTypeMap::getTypeClassName('DetectedIssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationState'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType', VersionTypeMap::getTypeClassName('DeviceMetricCalibrationType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory', VersionTypeMap::getTypeClassName('DeviceMetricCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor', VersionTypeMap::getTypeClassName('DeviceMetricColor'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus', VersionTypeMap::getTypeClassName('DeviceMetricOperationalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus', VersionTypeMap::getTypeClassName('DeviceUseStatementStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassName('DiagnosticReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType', VersionTypeMap::getTypeClassName('DigitalMediaType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType', VersionTypeMap::getTypeClassName('DiscriminatorType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassName('DocumentMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassName('DocumentReferenceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassName('DocumentRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage', VersionTypeMap::getTypeClassName('Dosage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition', VersionTypeMap::getTypeClassName('ElementDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase', VersionTypeMap::getTypeClassName('ElementDefinition.Base'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding', VersionTypeMap::getTypeClassName('ElementDefinition.Binding'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', VersionTypeMap::getTypeClassName('ElementDefinition.Constraint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator', VersionTypeMap::getTypeClassName('ElementDefinition.Discriminator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample', VersionTypeMap::getTypeClassName('ElementDefinition.Example'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping', VersionTypeMap::getTypeClassName('ElementDefinition.Mapping'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', VersionTypeMap::getTypeClassName('ElementDefinition.Slicing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType', VersionTypeMap::getTypeClassName('ElementDefinition.Type'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus', VersionTypeMap::getTypeClassName('EncounterLocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus', VersionTypeMap::getTypeClassName('EncounterStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus', VersionTypeMap::getTypeClassName('EndpointStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus', VersionTypeMap::getTypeClassName('EpisodeOfCareStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode', VersionTypeMap::getTypeClassName('EventCapabilityMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus', VersionTypeMap::getTypeClassName('EventStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassName('EventTiming'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus', VersionTypeMap::getTypeClassName('ExplanationOfBenefitStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassName('Extension'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext', VersionTypeMap::getTypeClassName('ExtensionContext'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus', VersionTypeMap::getTypeClassName('FamilyHistoryStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes', VersionTypeMap::getTypeClassName('FHIRAllTypes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType', VersionTypeMap::getTypeClassName('FHIRDefinedType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus', VersionTypeMap::getTypeClassName('FHIRDeviceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus', VersionTypeMap::getTypeClassName('FHIRSubstanceStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassName('FilterOperator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes', VersionTypeMap::getTypeClassName('FinancialResourceStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus', VersionTypeMap::getTypeClassName('FlagStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus', VersionTypeMap::getTypeClassName('GoalStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule', VersionTypeMap::getTypeClassName('GraphCompartmentRule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassName('GroupType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus', VersionTypeMap::getTypeClassName('GuidanceResponseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType', VersionTypeMap::getTypeClassName('GuideDependencyType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind', VersionTypeMap::getTypeClassName('GuidePageKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb', VersionTypeMap::getTypeClassName('HTTPVerb'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassName('HumanName'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassName('id'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassName('Identifier'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassName('IdentifierUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel', VersionTypeMap::getTypeClassName('IdentityAssuranceLevel'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes', VersionTypeMap::getTypeClassName('ImmunizationStatusCodes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability', VersionTypeMap::getTypeClassName('InstanceAvailability'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassName('instant'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassName('integer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassName('IssueSeverity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType', VersionTypeMap::getTypeClassName('IssueType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType', VersionTypeMap::getTypeClassName('LinkageType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassName('LinkType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassName('ListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus', VersionTypeMap::getTypeClassName('ListStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassName('LocationMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassName('LocationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown', VersionTypeMap::getTypeClassName('markdown'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple', VersionTypeMap::getTypeClassName('MeasmntPrinciple'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus', VersionTypeMap::getTypeClassName('MeasureReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType', VersionTypeMap::getTypeClassName('MeasureReportType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus', VersionTypeMap::getTypeClassName('MedicationAdministrationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus', VersionTypeMap::getTypeClassName('MedicationDispenseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent', VersionTypeMap::getTypeClassName('MedicationRequestIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority', VersionTypeMap::getTypeClassName('MedicationRequestPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus', VersionTypeMap::getTypeClassName('MedicationRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus', VersionTypeMap::getTypeClassName('MedicationStatementStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken', VersionTypeMap::getTypeClassName('MedicationStatementTaken'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus', VersionTypeMap::getTypeClassName('MedicationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassName('MessageSignificanceCategory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta', VersionTypeMap::getTypeClassName('Meta'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassName('NameUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType', VersionTypeMap::getTypeClassName('NamingSystemIdentifierType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType', VersionTypeMap::getTypeClassName('NamingSystemType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassName('Narrative'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassName('NarrativeStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType', VersionTypeMap::getTypeClassName('NoteType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus', VersionTypeMap::getTypeClassName('NutritionOrderStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType', VersionTypeMap::getTypeClassName('ObservationRelationshipType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassName('ObservationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassName('oid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind', VersionTypeMap::getTypeClassName('OperationKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse', VersionTypeMap::getTypeClassName('OperationParameterUse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition', VersionTypeMap::getTypeClassName('ParameterDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired', VersionTypeMap::getTypeClassName('ParticipantRequired'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus', VersionTypeMap::getTypeClassName('ParticipationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassName('Period'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt', VersionTypeMap::getTypeClassName('positiveInt'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassName('PropertyRepresentation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType', VersionTypeMap::getTypeClassName('PropertyType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassName('ProvenanceEntityRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus', VersionTypeMap::getTypeClassName('PublicationStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType', VersionTypeMap::getTypeClassName('qualityType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassName('Quantity'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator', VersionTypeMap::getTypeClassName('QuantityComparator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassName('Age'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassName('Count'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassName('Distance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassName('Duration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney', VersionTypeMap::getTypeClassName('Money'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType', VersionTypeMap::getTypeClassName('QuestionnaireItemType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus', VersionTypeMap::getTypeClassName('QuestionnaireResponseStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassName('Range'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassName('Ratio'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference', VersionTypeMap::getTypeClassName('Reference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy', VersionTypeMap::getTypeClassName('ReferenceHandlingPolicy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules', VersionTypeMap::getTypeClassName('ReferenceVersionRules'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact', VersionTypeMap::getTypeClassName('RelatedArtifact'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType', VersionTypeMap::getTypeClassName('RelatedArtifactType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome', VersionTypeMap::getTypeClassName('RemittanceOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType', VersionTypeMap::getTypeClassName('repositoryType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent', VersionTypeMap::getTypeClassName('RequestIntent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority', VersionTypeMap::getTypeClassName('RequestPriority'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus', VersionTypeMap::getTypeClassName('RequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus', VersionTypeMap::getTypeClassName('ResearchStudyStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus', VersionTypeMap::getTypeClassName('ResearchSubjectStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType', VersionTypeMap::getTypeClassName('ResourceType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy', VersionTypeMap::getTypeClassName('ResourceVersionPolicy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassName('ResponseType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode', VersionTypeMap::getTypeClassName('RestfulCapabilityMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassName('SampledData'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassName('SampledDataDataType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator', VersionTypeMap::getTypeClassName('SearchComparator'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode', VersionTypeMap::getTypeClassName('SearchEntryMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode', VersionTypeMap::getTypeClassName('SearchModifierCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassName('SearchParamType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature', VersionTypeMap::getTypeClassName('Signature'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassName('SlicingRules'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus', VersionTypeMap::getTypeClassName('SlotStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus', VersionTypeMap::getTypeClassName('SpecimenStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassName('string'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind', VersionTypeMap::getTypeClassName('StructureDefinitionKind'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType', VersionTypeMap::getTypeClassName('StructureMapContextType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode', VersionTypeMap::getTypeClassName('StructureMapGroupTypeMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode', VersionTypeMap::getTypeClassName('StructureMapInputMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode', VersionTypeMap::getTypeClassName('StructureMapModelMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode', VersionTypeMap::getTypeClassName('StructureMapSourceListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode', VersionTypeMap::getTypeClassName('StructureMapTargetListMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform', VersionTypeMap::getTypeClassName('StructureMapTransform'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType', VersionTypeMap::getTypeClassName('SubscriptionChannelType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus', VersionTypeMap::getTypeClassName('SubscriptionStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus', VersionTypeMap::getTypeClassName('SupplyDeliveryStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus', VersionTypeMap::getTypeClassName('SupplyRequestStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction', VersionTypeMap::getTypeClassName('SystemRestfulInteraction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode', VersionTypeMap::getTypeClassName('SystemVersionProcessingMode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus', VersionTypeMap::getTypeClassName('TaskStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult', VersionTypeMap::getTypeClassName('TestReportActionResult'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType', VersionTypeMap::getTypeClassName('TestReportParticipantType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult', VersionTypeMap::getTypeClassName('TestReportResult'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus', VersionTypeMap::getTypeClassName('TestReportStatus'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode', VersionTypeMap::getTypeClassName('TestScriptRequestMethodCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime', VersionTypeMap::getTypeClassName('time'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming', VersionTypeMap::getTypeClassName('Timing'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat', VersionTypeMap::getTypeClassName('Timing.Repeat'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition', VersionTypeMap::getTypeClassName('TriggerDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType', VersionTypeMap::getTypeClassName('TriggerType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule', VersionTypeMap::getTypeClassName('TypeDerivationRule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction', VersionTypeMap::getTypeClassName('TypeRestfulInteraction'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType', VersionTypeMap::getTypeClassName('UDIEntryType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassName('UnitsOfTime'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode', VersionTypeMap::getTypeClassName('UnknownContentCode'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt', VersionTypeMap::getTypeClassName('unsignedInt'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassName('uri'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext', VersionTypeMap::getTypeClassName('UsageContext'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse', VersionTypeMap::getTypeClassName('Use'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassName('uuid'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase', VersionTypeMap::getTypeClassName('VisionBase'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes', VersionTypeMap::getTypeClassName('VisionEyes'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType', VersionTypeMap::getTypeClassName('XPathUsageType'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassName('id-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassName('instant-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassName('integer-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive', VersionTypeMap::getTypeClassName('markdown-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassName('oid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive', VersionTypeMap::getTypeClassName('positiveInt-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource', VersionTypeMap::getTypeClassName('Resource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer', VersionTypeMap::getTypeClassName('ResourceContainer'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary', VersionTypeMap::getTypeClassName('Binary'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle', VersionTypeMap::getTypeClassName('Bundle'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource', VersionTypeMap::getTypeClassName('DomainResource'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getTypeClassName('Account'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', VersionTypeMap::getTypeClassName('ActivityDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getTypeClassName('AdverseEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassName('AllergyIntolerance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getTypeClassName('Appointment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getTypeClassName('AppointmentResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getTypeClassName('AuditEvent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getTypeClassName('Basic'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getTypeClassName('BodySite'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', VersionTypeMap::getTypeClassName('CapabilityStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getTypeClassName('CarePlan'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getTypeClassName('CareTeam'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getTypeClassName('ChargeItem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getTypeClassName('Claim'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getTypeClassName('ClaimResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getTypeClassName('ClinicalImpression'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem', VersionTypeMap::getTypeClassName('CodeSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getTypeClassName('Communication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getTypeClassName('CommunicationRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', VersionTypeMap::getTypeClassName('CompartmentDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getTypeClassName('Composition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getTypeClassName('ConceptMap'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getTypeClassName('Condition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getTypeClassName('Consent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getTypeClassName('Contract'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getTypeClassName('Coverage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getTypeClassName('DataElement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getTypeClassName('DetectedIssue'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getTypeClassName('Device'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getTypeClassName('DeviceComponent'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getTypeClassName('DeviceMetric'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getTypeClassName('DeviceRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getTypeClassName('DeviceUseStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassName('DiagnosticReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassName('DocumentManifest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getTypeClassName('DocumentReference'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getTypeClassName('EligibilityRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getTypeClassName('EligibilityResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getTypeClassName('Encounter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getTypeClassName('Endpoint'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getTypeClassName('EnrollmentRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getTypeClassName('EnrollmentResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getTypeClassName('EpisodeOfCare'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile', VersionTypeMap::getTypeClassName('ExpansionProfile'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getTypeClassName('ExplanationOfBenefit'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getTypeClassName('FamilyMemberHistory'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getTypeClassName('Flag'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getTypeClassName('Goal'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', VersionTypeMap::getTypeClassName('GraphDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getTypeClassName('Group'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getTypeClassName('GuidanceResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getTypeClassName('HealthcareService'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest', VersionTypeMap::getTypeClassName('ImagingManifest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getTypeClassName('ImagingStudy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getTypeClassName('Immunization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassName('ImmunizationRecommendation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getTypeClassName('ImplementationGuide'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary', VersionTypeMap::getTypeClassName('Library'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getTypeClassName('Linkage'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getTypeClassName('List'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getTypeClassName('Location'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure', VersionTypeMap::getTypeClassName('Measure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getTypeClassName('MeasureReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getTypeClassName('Media'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getTypeClassName('Medication'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassName('MedicationAdministration'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassName('MedicationDispense'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getTypeClassName('MedicationRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassName('MedicationStatement'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', VersionTypeMap::getTypeClassName('MessageDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getTypeClassName('MessageHeader'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getTypeClassName('NamingSystem'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getTypeClassName('NutritionOrder'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getTypeClassName('Observation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getTypeClassName('OperationDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getTypeClassName('OperationOutcome'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getTypeClassName('Organization'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getTypeClassName('Patient'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getTypeClassName('PaymentNotice'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getTypeClassName('PaymentReconciliation'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getTypeClassName('Person'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', VersionTypeMap::getTypeClassName('PlanDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getTypeClassName('Practitioner'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getTypeClassName('PractitionerRole'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getTypeClassName('Procedure'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getTypeClassName('ProcedureRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getTypeClassName('ProcessRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getTypeClassName('ProcessResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getTypeClassName('Provenance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassName('Questionnaire'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getTypeClassName('QuestionnaireResponse'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getTypeClassName('ReferralRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassName('RelatedPerson'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup', VersionTypeMap::getTypeClassName('RequestGroup'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getTypeClassName('ResearchStudy'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getTypeClassName('ResearchSubject'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getTypeClassName('RiskAssessment'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getTypeClassName('Schedule'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getTypeClassName('SearchParameter'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence', VersionTypeMap::getTypeClassName('Sequence'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition', VersionTypeMap::getTypeClassName('ServiceDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getTypeClassName('Slot'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getTypeClassName('Specimen'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getTypeClassName('StructureDefinition'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap', VersionTypeMap::getTypeClassName('StructureMap'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getTypeClassName('Subscription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getTypeClassName('Substance'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getTypeClassName('SupplyDelivery'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getTypeClassName('SupplyRequest'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getTypeClassName('Task'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getTypeClassName('TestReport'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getTypeClassName('TestScript'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getTypeClassName('ValueSet'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getTypeClassName('VisionPrescription'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters', VersionTypeMap::getTypeClassName('Parameters'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassName('SampledDataDataType-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassName('string-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive', VersionTypeMap::getTypeClassName('time-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive', VersionTypeMap::getTypeClassName('unsignedInt-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassName('uri-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassName('uuid-primitive'));
    $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRXHTML', VersionTypeMap::getTypeClassName('XHTML'));
    }

    public function testGetContainedTypeClassName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getContainedTypeClassName('Account'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Account.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Account.Guarantor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AccountStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AccountStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionCardinalityBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionCardinalityBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionConditionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionConditionKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionGroupingBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionGroupingBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionList'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionList-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionParticipantType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionPrecheckBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionPrecheckBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRequiredBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionRequiredBehavior-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionSelectionBehavior'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActionSelectionBehavior-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition', VersionTypeMap::getContainedTypeClassName('ActivityDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActivityDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ActivityDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AddressUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrativeGender'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdministrativeGender-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent', VersionTypeMap::getContainedTypeClassName('AdverseEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEvent.SuspectEntity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEventCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEventCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEventCausality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AdverseEventCausality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassName('AllergyIntolerance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntolerance.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceClinicalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceClinicalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceCriticality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceVerificationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AllergyIntoleranceVerificationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getContainedTypeClassName('Appointment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getContainedTypeClassName('AppointmentResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AppointmentStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AppointmentStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionDirectionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionDirectionType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionOperatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionOperatorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionResponseTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AssertionResponseTypes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getContainedTypeClassName('AuditEvent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAgentNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventAgentNetworkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('AuditEventOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getContainedTypeClassName('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary', VersionTypeMap::getContainedTypeClassName('Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getContainedTypeClassName('BodySite'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle', VersionTypeMap::getContainedTypeClassName('Bundle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Request'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Bundle.Search'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BundleType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement', VersionTypeMap::getContainedTypeClassName('CapabilityStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Certificate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Interaction1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatement.SupportedMessage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatementKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CapabilityStatementKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassName('CarePlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlan.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanActivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanIntent-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam', VersionTypeMap::getContainedTypeClassName('CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CareTeam.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CareTeamStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CareTeamStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem', VersionTypeMap::getContainedTypeClassName('ChargeItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItem.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ChargeItemStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getContainedTypeClassName('Claim'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Information'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getContainedTypeClassName('ClaimResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getContainedTypeClassName('ClinicalImpression'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.Finding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpression.Investigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpressionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ClinicalImpressionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem', VersionTypeMap::getContainedTypeClassName('CodeSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Property'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystem.Property1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemContentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemContentMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CodeSystemHierarchyMeaning-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getContainedTypeClassName('Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getContainedTypeClassName('CommunicationRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationRequest.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CommunicationRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition', VersionTypeMap::getContainedTypeClassName('CompartmentDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompartmentDefinition.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompartmentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompartmentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getContainedTypeClassName('Composition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionAttestationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassName('ConceptMap'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMap.Unmapped'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapEquivalence-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConceptMapGroupUnmappedMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getContainedTypeClassName('Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalDeleteStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalDeleteStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalReadStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionalReadStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionClinicalStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionClinicalStatusCodes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionVerificationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConditionVerificationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConfidentialityClassification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConfidentialityClassification-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent', VersionTypeMap::getContainedTypeClassName('Consent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Actor1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Data'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Data1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Except'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Consent.Policy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentDataMeaning'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentDataMeaning-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentExceptType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentExceptType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConsentState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ConstraintSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContactPointUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getContainedTypeClassName('Contract'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Agent1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Friendly'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Legal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Signer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.ValuedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contract.ValuedItem1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContractResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContractResourceStatusCodes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Contributor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContributorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ContributorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getContainedTypeClassName('Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Coverage.Grouping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getContainedTypeClassName('DataElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElement.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElementStringency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataElementStringency-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement.CodeFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DataRequirement.DateFilter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DaysOfWeek'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DaysOfWeek-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getContainedTypeClassName('DetectedIssue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssue.Mitigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getContainedTypeClassName('Device'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Device.Udi'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getContainedTypeClassName('DeviceComponent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceComponent.ProductionSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getContainedTypeClassName('DeviceMetric'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetric.Calibration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCalibrationType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricColor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricColor-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceMetricOperationalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest', VersionTypeMap::getContainedTypeClassName('DeviceRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getContainedTypeClassName('DeviceUseStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DeviceUseStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassName('DiagnosticReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReport.Image'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReport.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiagnosticReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DigitalMediaType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DigitalMediaType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiscriminatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DiscriminatorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassName('DocumentManifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentManifest.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentManifest.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassName('DocumentReference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentReferenceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DocumentRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('DomainResource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Discriminator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Example'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getContainedTypeClassName('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getContainedTypeClassName('EligibilityResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityResponse.BenefitBalance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityResponse.Financial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EligibilityResponse.Insurance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getContainedTypeClassName('Encounter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.ClassHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Encounter.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterLocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterLocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EncounterStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint', VersionTypeMap::getContainedTypeClassName('Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EndpointStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EndpointStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getContainedTypeClassName('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getContainedTypeClassName('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getContainedTypeClassName('EpisodeOfCare'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCare.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCare.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCareStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EpisodeOfCareStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventCapabilityMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile', VersionTypeMap::getContainedTypeClassName('ExpansionProfile'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.Designation1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.Designation2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.Exclude'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.ExcludedSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.FixedVersion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExpansionProfile.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Accident'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.BenefitBalance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Financial'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Information'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Insurance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Payment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefit.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExplanationOfBenefitStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ExtensionContext-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistoryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getContainedTypeClassName('FamilyMemberHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FamilyMemberHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRAllTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRAllTypes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDefinedType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDefinedType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDeviceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRDeviceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRSubstanceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FHIRSubstanceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FilterOperator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FinancialResourceStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FinancialResourceStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getContainedTypeClassName('Flag'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FlagStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getContainedTypeClassName('Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Goal.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GoalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GoalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphCompartmentRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphCompartmentRule-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition', VersionTypeMap::getContainedTypeClassName('GraphDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphDefinition.Compartment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphDefinition.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GraphDefinition.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getContainedTypeClassName('Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Group.Member'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse', VersionTypeMap::getContainedTypeClassName('GuidanceResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidanceResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidanceResponseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideDependencyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuideDependencyType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidePageKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('GuidePageKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getContainedTypeClassName('HealthcareService'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HealthcareService.NotAvailable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HTTPVerb'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HTTPVerb-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentifierUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentityAssuranceLevel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest', VersionTypeMap::getContainedTypeClassName('ImagingManifest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingManifest.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingManifest.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingManifest.Study'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassName('ImagingStudy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassName('Immunization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Explanation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Practitioner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Protocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationStatusCodes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImmunizationStatusCodes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getContainedTypeClassName('ImplementationGuide'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Dependency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Global'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Page'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ImplementationGuide.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InstanceAvailability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('InstanceAvailability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('IssueType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary', VersionTypeMap::getContainedTypeClassName('Library'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage', VersionTypeMap::getContainedTypeClassName('Linkage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Linkage.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkageType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getContainedTypeClassName('List'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getContainedTypeClassName('Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('LocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('markdown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('markdown-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasmntPrinciple'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasmntPrinciple-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure', VersionTypeMap::getContainedTypeClassName('Measure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Measure.SupplementalData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport', VersionTypeMap::getContainedTypeClassName('MeasureReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Population'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Population1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Stratifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReport.Stratum'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MeasureReportType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getContainedTypeClassName('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getContainedTypeClassName('Medication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Batch'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Medication.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassName('MedicationAdministration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministration.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministrationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassName('MedicationDispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest', VersionTypeMap::getContainedTypeClassName('MedicationRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequest.DispenseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequest.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequestIntent-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassName('MedicationStatement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementTaken'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatementTaken-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MedicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition', VersionTypeMap::getContainedTypeClassName('MessageDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageDefinition.AllowedResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageDefinition.Focus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassName('MessageHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('MessageSignificanceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Meta'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getContainedTypeClassName('NamingSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystem.UniqueId'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemIdentifierType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NamingSystemType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NarrativeStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NoteType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getContainedTypeClassName('NutritionOrder'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Administration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.EnteralFormula'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.OralDiet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Supplement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrder.Texture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('NutritionOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getContainedTypeClassName('Observation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Observation.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ObservationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getContainedTypeClassName('OperationDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Overload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationDefinition.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassName('OperationOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationParameterUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getContainedTypeClassName('Organization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Organization.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParameterDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters', VersionTypeMap::getContainedTypeClassName('Parameters'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Parameters.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantRequired'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipantRequired-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getContainedTypeClassName('Patient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Animal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getContainedTypeClassName('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getContainedTypeClassName('PaymentReconciliation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PaymentReconciliation.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PaymentReconciliation.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getContainedTypeClassName('Person'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition', VersionTypeMap::getContainedTypeClassName('PlanDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.DynamicValue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Goal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PlanDefinition.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('positiveInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassName('Practitioner'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole', VersionTypeMap::getContainedTypeClassName('PractitionerRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PractitionerRole.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PractitionerRole.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassName('Procedure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.FocalDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getContainedTypeClassName('ProcedureRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcedureRequest.Requester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getContainedTypeClassName('ProcessRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcessRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getContainedTypeClassName('ProcessResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProcessResponse.ProcessNote'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyRepresentation-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PropertyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassName('Provenance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ProvenanceEntityRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PublicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('PublicationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('qualityType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('qualityType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassName('Questionnaire'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.EnableWhen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Questionnaire.Option'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireItemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireItemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('QuestionnaireResponseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Reference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceHandlingPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceHandlingPolicy-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceVersionRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferenceVersionRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getContainedTypeClassName('ReferralRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ReferralRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedArtifact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedArtifactType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RelatedArtifactType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassName('RelatedPerson'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RemittanceOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RemittanceOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('repositoryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('repositoryType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup', VersionTypeMap::getContainedTypeClassName('RequestGroup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestGroup.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestGroup.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestGroup.RelatedAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestIntent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestIntent-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy', VersionTypeMap::getContainedTypeClassName('ResearchStudy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudy.Arm'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudyStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchStudyStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject', VersionTypeMap::getContainedTypeClassName('ResearchSubject'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchSubjectStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResearchSubjectStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceContainer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceVersionPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResourceVersionPolicy-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ResponseType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulCapabilityMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RestfulCapabilityMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getContainedTypeClassName('RiskAssessment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('RiskAssessment.Prediction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getContainedTypeClassName('Schedule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchComparator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchEntryMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchEntryMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchModifierCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getContainedTypeClassName('SearchParameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParameter.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence', VersionTypeMap::getContainedTypeClassName('Sequence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Sequence.Quality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Sequence.ReferenceSeq'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Sequence.Repository'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Sequence.Variant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition', VersionTypeMap::getContainedTypeClassName('ServiceDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Signature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getContainedTypeClassName('Slot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlotStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassName('Specimen'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Specimen.Processing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SpecimenStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getContainedTypeClassName('StructureDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Differential'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinition.Snapshot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinitionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap', VersionTypeMap::getContainedTypeClassName('StructureMap'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Dependent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Structure'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapContextType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapContextType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapGroupTypeMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapGroupTypeMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapInputMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapInputMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapModelMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapModelMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapSourceListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapSourceListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTargetListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTargetListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTransform'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('StructureMapTransform-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getContainedTypeClassName('Subscription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Subscription.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionChannelType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionChannelType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassName('Substance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getContainedTypeClassName('SupplyDelivery'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDelivery.SuppliedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDeliveryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getContainedTypeClassName('SupplyRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequest.OrderedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequest.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SupplyRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemVersionProcessingMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('SystemVersionProcessingMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask', VersionTypeMap::getContainedTypeClassName('Task'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Input'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Output'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Requester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Task.Restriction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TaskStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TaskStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport', VersionTypeMap::getContainedTypeClassName('TestReport'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReport.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportActionResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportActionResult-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportParticipantType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportParticipantType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportResult'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportResult-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getContainedTypeClassName('TestScript'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Fixture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Metadata'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Origin'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Param'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Param1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Param2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Param3'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.RequestHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Rule1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Rule2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Rule3'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Ruleset'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Ruleset1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScript.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScriptRequestMethodCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TestScriptRequestMethodCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('time'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('time-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Timing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Timing.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TriggerDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TriggerType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TriggerType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeDerivationRule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeDerivationRule-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('TypeRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UDIEntryType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UDIEntryType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnitsOfTime-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnknownContentCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UnknownContentCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('unsignedInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('unsignedInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('UsageContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Use'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('Use-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassName('ValueSet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('ValueSet.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionBase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionBase-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionEyes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getContainedTypeClassName('VisionPrescription'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('VisionPrescription.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XHTML'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XPathUsageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassName('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('\DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList'));
    }

    public function testIsContainableResourceWithTypeName()
    {
        $this->assertTrue(VersionTypeMap::isContainableResource('Account'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Account.Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Account.Guarantor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AccountStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionCardinalityBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionCardinalityBehavior-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionConditionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionConditionKind-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionGroupingBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionGroupingBehavior-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionList'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionList-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionParticipantType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionPrecheckBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionPrecheckBehavior-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRequiredBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionRequiredBehavior-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionSelectionBehavior'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActionSelectionBehavior-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ActivityDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActivityDefinition.DynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ActivityDefinition.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Address'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AddressUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdministrativeGender-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AdverseEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEvent.SuspectEntity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEventCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEventCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEventCausality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AdverseEventCausality-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Age'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AggregationMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AllergyIntolerance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntolerance.Reaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceClinicalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceClinicalStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceCriticality-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AllergyIntoleranceVerificationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Annotation'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Appointment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Appointment.Participant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AppointmentResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AppointmentStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionDirectionType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionOperatorType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AssertionResponseTypes-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Attachment'));
        $this->assertTrue(VersionTypeMap::isContainableResource('AuditEvent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Entity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Network'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEvent.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAction-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAgentNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventAgentNetworkType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('AuditEventOutcome-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('base64Binary-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Basic'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Binary'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BindingStrength-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('BodySite'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean'));
        $this->assertFalse(VersionTypeMap::isContainableResource('boolean-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Bundle'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Request'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Bundle.Search'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BundleType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('BundleType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CapabilityStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Certificate'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Document'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Endpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Implementation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Interaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Interaction1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Messaging'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Rest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.SearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Security'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.Software'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatement.SupportedMessage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CapabilityStatementKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CarePlan'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Activity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlan.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanActivityStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanIntent-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CarePlanStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CareTeam.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CareTeamStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CareTeamStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ChargeItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItem.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ChargeItemStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Claim'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Accident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Information'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Payee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Claim.SubDetail'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClaimResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.AddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Adjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Detail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Error'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.Payment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClaimResponse.SubDetail'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ClinicalImpression'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.Finding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpression.Investigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ClinicalImpressionStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code'));
        $this->assertFalse(VersionTypeMap::isContainableResource('code-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeableConcept'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Designation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Property'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystem.Property1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemContentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemContentMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemHierarchyMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CodeSystemHierarchyMeaning-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coding'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Communication.Payload'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CommunicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationRequest.Payload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CommunicationRequest.Requester'));
        $this->assertTrue(VersionTypeMap::isContainableResource('CompartmentDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompartmentDefinition.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompartmentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompartmentType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Composition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Attester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Event'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Composition.Section'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionAttestationMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('CompositionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ConceptMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.DependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMap.Unmapped'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapEquivalence-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapGroupUnmappedMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConceptMapGroupUnmappedMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Evidence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Condition.Stage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalDeleteStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalReadStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionalReadStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionClinicalStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionClinicalStatusCodes-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConditionVerificationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConfidentialityClassification'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConfidentialityClassification-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Consent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Actor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Actor1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Data'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Data1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Except'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Consent.Policy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentDataMeaning'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentDataMeaning-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentExceptType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentExceptType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConsentState-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ConstraintSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointSystem-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContactPointUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContentType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContentType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Contract'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Agent1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Friendly'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Legal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Rule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Signer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.Term'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.ValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contract.ValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContractResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContractResourceStatusCodes-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Contributor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContributorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ContributorType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Count'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Coverage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Coverage.Grouping'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DataElement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElement.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataElementStringency-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement.CodeFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DataRequirement.DateFilter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date'));
        $this->assertFalse(VersionTypeMap::isContainableResource('date-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('dateTime-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DaysOfWeek-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('decimal-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DetectedIssue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssue.Mitigation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DetectedIssueSeverity-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Device'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Device.Udi'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceComponent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceComponent.ProductionSpecification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceMetric'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetric.Calibration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationState-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCalibrationType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricColor-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceMetricOperationalStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceRequest.Requester'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DeviceUseStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DeviceUseStatementStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DiagnosticReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReport.Image'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReport.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiagnosticReportStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DigitalMediaType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiscriminatorType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DiscriminatorType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Distance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentManifest.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentManifest.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('DocumentReference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Context'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReference.RelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentReferenceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DocumentRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('DomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Duration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Element'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Base'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Constraint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Discriminator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Example'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Slicing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ElementDefinition.Type'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EligibilityResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityResponse.BenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityResponse.Error'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityResponse.Financial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EligibilityResponse.Insurance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Encounter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.ClassHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Hospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Encounter.StatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterLocationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EncounterStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Endpoint'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EndpointStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EndpointStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableResource('EpisodeOfCare'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCare.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCare.StatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EpisodeOfCareStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventCapabilityMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableResource('EventTiming-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ExpansionProfile'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.Designation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.Designation1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.Designation2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.Exclude'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.ExcludedSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.FixedVersion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExpansionProfile.Include'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ExplanationOfBenefit'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Accident'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.AddItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Adjudication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.BenefitBalance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.CareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Detail1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Diagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Financial'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Information'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Insurance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Payee'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Payment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefit.SubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefitStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExplanationOfBenefitStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Extension'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ExtensionContext-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyHistoryStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('FamilyMemberHistory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FamilyMemberHistory.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRAllTypes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRAllTypes-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDefinedType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDefinedType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRDeviceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRSubstanceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FHIRSubstanceStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FilterOperator-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FinancialResourceStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FinancialResourceStatusCodes-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Flag'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('FlagStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Goal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Goal.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GoalStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphCompartmentRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphCompartmentRule-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('GraphDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphDefinition.Compartment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphDefinition.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GraphDefinition.Target'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Characteristic'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Group.Member'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GroupType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('GuidanceResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidanceResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidanceResponseStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuideDependencyType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('GuidePageKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('HealthcareService'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.AvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HealthcareService.NotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HTTPVerb-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('HumanName'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id'));
        $this->assertFalse(VersionTypeMap::isContainableResource('id-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Identifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentifierUse-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IdentityAssuranceLevel-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImagingManifest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingManifest.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingManifest.Series'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingManifest.Study'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImagingStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Instance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImagingStudy.Series'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Immunization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Explanation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Practitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.Reaction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Immunization.VaccinationProtocol'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImmunizationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.DateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Protocol'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationRecommendation.Recommendation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationStatusCodes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImmunizationStatusCodes-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ImplementationGuide'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Dependency'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Global'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Package'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Page'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ImplementationGuide.Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('InstanceAvailability-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('instant-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('integer-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueSeverity-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('IssueType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Library'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Linkage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Linkage.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkageType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LinkType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('List'));
        $this->assertFalse(VersionTypeMap::isContainableResource('List.Entry'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ListStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Location'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Location.Position'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('LocationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('markdown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('markdown-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasmntPrinciple'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasmntPrinciple-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Measure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Population'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.Stratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Measure.SupplementalData'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MeasureReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Population'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Population1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Stratifier'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReport.Stratum'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MeasureReportType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Media'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Medication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Batch'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Content'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Medication.Package'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministration.Dosage'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministration.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationAdministrationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationDispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Performer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispense.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationDispenseStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequest.DispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequest.Requester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequest.Substitution'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequestIntent-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequestPriority-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationRequestStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MedicationStatement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementTaken'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatementTaken-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MedicationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MessageDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageDefinition.AllowedResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageDefinition.Focus'));
        $this->assertTrue(VersionTypeMap::isContainableResource('MessageHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Destination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Response'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageHeader.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableResource('MessageSignificanceCategory-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Meta'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Money'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NameUse-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NamingSystem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystem.UniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemIdentifierType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NamingSystemType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Narrative'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NarrativeStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NoteType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NoteType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('NutritionOrder'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Administration'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.EnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Nutrient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.OralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Supplement'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrder.Texture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('NutritionOrderStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Observation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.ReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Observation.Related'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationRelationshipType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ObservationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('oid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Binding'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Overload'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationDefinition.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('OperationOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationOutcome.Issue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('OperationParameterUse-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Organization'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Organization.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParameterDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Parameters'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Parameters.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipantRequired-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ParticipationStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Patient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Animal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Communication'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Contact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Patient.Link'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PaymentReconciliation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PaymentReconciliation.Detail'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PaymentReconciliation.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Period'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Person'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Person.Link'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PlanDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.DynamicValue'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Goal'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.RelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PlanDefinition.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('positiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('positiveInt-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Practitioner'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Practitioner.Qualification'));
        $this->assertTrue(VersionTypeMap::isContainableResource('PractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PractitionerRole.AvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PractitionerRole.NotAvailable'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Procedure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.FocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Procedure.Performer'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ProcedureRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcedureRequest.Requester'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ProcessRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcessRequest.Item'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ProcessResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProcessResponse.ProcessNote'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyRepresentation-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PropertyType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Provenance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Agent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Provenance.Entity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ProvenanceEntityRole-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PublicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('PublicationStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('qualityType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('qualityType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Quantity'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuantityComparator-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Questionnaire'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.EnableWhen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Questionnaire.Option'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireItemType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireItemType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('QuestionnaireResponse'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Answer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponse.Item'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('QuestionnaireResponseStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Range'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Ratio'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Reference'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceHandlingPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceHandlingPolicy-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceVersionRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferenceVersionRules-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ReferralRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ReferralRequest.Requester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedArtifact'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedArtifactType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RelatedArtifactType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RelatedPerson'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RemittanceOutcome-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('repositoryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('repositoryType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RequestGroup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestGroup.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestGroup.Condition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestGroup.RelatedAction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestIntent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestIntent-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestPriority-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RequestStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ResearchStudy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudy.Arm'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudyStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchStudyStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ResearchSubject'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchSubjectStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResearchSubjectStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Resource'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResourceVersionPolicy-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ResponseType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulCapabilityMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RestfulCapabilityMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('RiskAssessment'));
        $this->assertFalse(VersionTypeMap::isContainableResource('RiskAssessment.Prediction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledData'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SampledDataDataType-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Schedule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchComparator'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchComparator-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchEntryMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchModifierCode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SearchParameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParameter.Component'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SearchParamType-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Sequence'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Sequence.Quality'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Sequence.ReferenceSeq'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Sequence.Repository'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Sequence.Variant'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ServiceDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Signature'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlicingRules-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Slot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SlotStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Specimen'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Collection'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Container'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Specimen.Processing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SpecimenStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string'));
        $this->assertFalse(VersionTypeMap::isContainableResource('string-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('StructureDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Differential'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Mapping'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinition.Snapshot'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureDefinitionKind-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('StructureMap'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Dependent'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Group'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Input'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Rule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Source'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Structure'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMap.Target'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapContextType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapContextType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapGroupTypeMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapGroupTypeMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapInputMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapInputMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapModelMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapModelMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapSourceListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapSourceListMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTargetListMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTargetListMode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTransform'));
        $this->assertFalse(VersionTypeMap::isContainableResource('StructureMapTransform-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Subscription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Subscription.Channel'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionChannelType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SubscriptionStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Substance'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Ingredient'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Substance.Instance'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SupplyDelivery'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDelivery.SuppliedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyDeliveryStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('SupplyRequest'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequest.OrderedItem'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequest.Requester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SupplyRequestStatus-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemRestfulInteraction-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemVersionProcessingMode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('SystemVersionProcessingMode-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('Task'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Input'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Output'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Requester'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Task.Restriction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TaskStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TaskStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('TestReport'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Action1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Action2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Assert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Participant'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Setup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Teardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReport.Test'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportActionResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportActionResult-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportParticipantType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportParticipantType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportResult'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportResult-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestReportStatus-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('TestScript'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Action2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Assert'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Capability'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Destination'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Fixture'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Link'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Metadata'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Operation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Origin'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Param'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Param1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Param2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Param3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.RequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Rule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Rule1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Rule2'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Rule3'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Ruleset'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Ruleset1'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Setup'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Teardown'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Test'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScript.Variable'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScriptRequestMethodCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TestScriptRequestMethodCode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('time'));
        $this->assertFalse(VersionTypeMap::isContainableResource('time-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Timing'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Timing.Repeat'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TriggerDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TriggerType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TriggerType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeDerivationRule'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeDerivationRule-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableResource('TypeRestfulInteraction-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UDIEntryType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UDIEntryType-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnitsOfTime-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UnknownContentCode-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('unsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableResource('unsignedInt-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uri-primitive'));
        $this->assertFalse(VersionTypeMap::isContainableResource('UsageContext'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Use'));
        $this->assertFalse(VersionTypeMap::isContainableResource('Use-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid'));
        $this->assertFalse(VersionTypeMap::isContainableResource('uuid-primitive'));
        $this->assertTrue(VersionTypeMap::isContainableResource('ValueSet'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Compose'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Concept'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Contains'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Designation'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Expansion'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Filter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Include'));
        $this->assertFalse(VersionTypeMap::isContainableResource('ValueSet.Parameter'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionBase-list'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionEyes-list'));
        $this->assertTrue(VersionTypeMap::isContainableResource('VisionPrescription'));
        $this->assertFalse(VersionTypeMap::isContainableResource('VisionPrescription.Dispense'));
        $this->assertFalse(VersionTypeMap::isContainableResource('XPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableResource('XPathUsageType-list'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountCoverage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAccount\FHIRAccountGuarantor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAccountStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionCardinalityBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionCardinalityBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionConditionKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionConditionKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionGroupingBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionGroupingBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionListList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionParticipantTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionPrecheckBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionPrecheckBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionRequiredBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionRequiredBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRActionSelectionBehavior;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRActionSelectionBehaviorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRActivityDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRActivityDefinition\FHIRActivityDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAddressUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdministrativeGenderList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAdverseEvent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAdverseEvent\FHIRAdverseEventSuspectEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAdverseEventCausality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAdverseEventCausalityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAggregationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceClinicalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceClinicalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceCriticalityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAllergyIntoleranceVerificationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAllergyIntoleranceVerificationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAnnotation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAppointmentStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionDirectionTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionOperatorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAssertionResponseTypesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventActionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventAgentNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventAgentNetworkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRAuditEventOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBindingStrengthList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRBodySite;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRBundle;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBundleType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRBundleTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCapabilityStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementCertificate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementDocument;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEndpoint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementImplementation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementInteraction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementMessaging;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementRest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSecurity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSoftware;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCapabilityStatement\FHIRCapabilityStatementSupportedMessage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCapabilityStatementKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCapabilityStatementKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanActivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanIntentList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCarePlanStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCareTeam;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCareTeam\FHIRCareTeamParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCareTeamStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCareTeamStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRChargeItem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRChargeItem\FHIRChargeItemParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRChargeItemStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRChargeItemStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimAccident;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInformation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProcedure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponsePayment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRClinicalImpressionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCodeSystem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemDesignation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCodeSystem\FHIRCodeSystemProperty1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemContentMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemContentModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCodeSystemHierarchyMeaning;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCodeSystemHierarchyMeaningList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCompartmentDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCompartmentDefinition\FHIRCompartmentDefinitionResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompartmentType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompartmentTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionAttestationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRCompositionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapUnmapped;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapEquivalenceList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConceptMapGroupUnmappedMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConceptMapGroupUnmappedModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalDeleteStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionalReadStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionalReadStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionClinicalStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionClinicalStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConditionVerificationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConditionVerificationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConfidentialityClassification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConfidentialityClassificationList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRConsent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentActor1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentData1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentExcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRConsent\FHIRConsentPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentDataMeaning;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentDataMeaningList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentExceptType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentExceptTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConsentState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConsentStateList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRConstraintSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPoint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointSystemList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContactPointUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContentType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContentTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractAgent1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContractResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContractResourceStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRContributorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRContributorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRCoverage\FHIRCoverageGrouping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDataElement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataElementStringency;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDataElementStringencyList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementCodeFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDataRequirement\FHIRDataRequirementDateFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDaysOfWeekList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDetectedIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDevice\FHIRDeviceUdi;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationStateList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCalibrationTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricColorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceMetricOperationalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceRequest\FHIRDeviceRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDeviceUseStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDeviceUseStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportPerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiagnosticReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDigitalMediaType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDigitalMediaTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDiscriminatorType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDiscriminatorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentReferenceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionDiscriminator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionExample;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseBenefitBalance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseError;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseFinancial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREligibilityResponse\FHIREligibilityResponseInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterClassHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREncounterStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREncounterStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREndpoint;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREndpointStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREndpointStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREpisodeOfCareStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventCapabilityModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIREventTimingList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExpansionProfile;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileDesignation2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExclude;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileExcludedSystem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileFixedVersion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExpansionProfile\FHIRExpansionProfileInclude;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAccident;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAddItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitBenefitBalance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDetail1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitFinancial;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInformation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitInsurance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayee;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitPayment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcedure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRExplanationOfBenefit\FHIRExplanationOfBenefitSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExplanationOfBenefitStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExplanationOfBenefitStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRExtensionContextList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFamilyHistoryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRAllTypes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRAllTypesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDefinedType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDefinedTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRDeviceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRDeviceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFHIRSubstanceStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFHIRSubstanceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFilterOperatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFinancialResourceStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFinancialResourceStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRFlagStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGoalStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGoalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGraphCompartmentRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGraphCompartmentRuleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGraphDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionCompartment;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGraphDefinition\FHIRGraphDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGroupTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRGuidanceResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidanceResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidanceResponseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuideDependencyType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuideDependencyTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRGuidePageKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRGuidePageKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRHTTPVerbList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentifierUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIdentityAssuranceLevelList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingManifest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestSeries;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingManifest\FHIRImagingManifestStudy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationPractitioner;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRImmunizationStatusCodes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRImmunizationStatusCodesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRInstanceAvailabilityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRIssueType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRIssueTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLibrary;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLinkage;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLinkage\FHIRLinkageItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkageType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkageTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLinkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRListStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRListStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMarkdown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRMarkdownPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasmntPrinciple;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasmntPrincipleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasurePopulation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureStratifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasure\FHIRMeasureSupplementalData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMeasureReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportPopulation1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratifier;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMeasureReport\FHIRMeasureReportStratum;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeasureReportType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMeasureReportTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationPerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispensePerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestDispenseRequest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationRequest\FHIRMedicationRequestSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestIntentList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatementTaken;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatementTakenList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMedicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMedicationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionAllowedResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageDefinition\FHIRMessageDefinitionFocus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRMeta;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNameUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemIdentifierTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNamingSystemTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNarrativeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNoteType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNoteTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRNutritionOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRNutritionOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRObservationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionOverload;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIROperationParameterUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParameterDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRParameters;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipantRequiredList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRParticipationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPlanDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionDynamicValue;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionGoal;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPlanDefinition\FHIRPlanDefinitionTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRPositiveIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRPractitionerRole;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRPractitionerRole\FHIRPractitionerRoleNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcedureRequest\FHIRProcedureRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseProcessNote;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyRepresentationList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPropertyType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPropertyTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRProvenanceEntityRoleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRPublicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRPublicationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQualityType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQualityTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuantityComparatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireEnableWhen;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireOption;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireItemType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireItemTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRQuestionnaireResponseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReference;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceHandlingPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceHandlingPolicyList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRReferenceVersionRules;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRReferenceVersionRulesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRReferralRequest\FHIRReferralRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifact;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRelatedArtifactType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRelatedArtifactTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRemittanceOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRepositoryType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRepositoryTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRequestGroup;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupCondition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRequestGroup\FHIRRequestGroupRelatedAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestIntent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestIntentList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchStudy;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRResearchStudy\FHIRResearchStudyArm;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchStudyStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchStudyStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRResearchSubject;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResearchSubjectStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResearchSubjectStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResourceContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResourceVersionPolicyList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRResponseTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRRestfulCapabilityMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRRestfulCapabilityModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchComparator;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchComparatorList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchEntryModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchModifierCodeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterComponent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSearchParamTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSequence;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceQuality;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceReferenceSeq;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceRepository;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSequence\FHIRSequenceVariant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRServiceDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSignature;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlicingRulesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSlotStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenProcessing;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSpecimenStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureDefinitionKindList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRStructureMap;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapDependent;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapGroup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapInput;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapSource;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapStructure;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRStructureMap\FHIRStructureMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapContextType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapContextTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapGroupTypeMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapGroupTypeModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapInputMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapInputModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapModelMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapModelModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapSourceListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapSourceListModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTargetListMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTargetListModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRStructureMapTransform;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRStructureMapTransformList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionChannelTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSubscriptionStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSubscriptionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyDelivery\FHIRSupplyDeliverySuppliedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyDeliveryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestOrderedItem;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSupplyRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRSystemVersionProcessingMode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRSystemVersionProcessingModeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTask;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskInput;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskOutput;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRequester;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTask\FHIRTaskRestriction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTaskStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTaskStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestReport;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAction2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportAssert;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportParticipant;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportSetup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTeardown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestReport\FHIRTestReportTest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportActionResult;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportActionResultList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportParticipantType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportParticipantTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportResult;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportResultList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptDestination;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOrigin;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptParam3;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule2;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRule3;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRuleset1;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTestScriptRequestMethodCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTestScriptRequestMethodCodeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerDefinition;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTriggerType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTriggerTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeDerivationRule;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeDerivationRuleList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRTypeRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUDIEntryType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUDIEntryTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnitsOfTimeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnknownContentCode;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUnknownContentCodeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUnsignedIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUsageContext;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUse;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRUseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionBase;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionBaseList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRVisionEyesList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\STU3\Types\FHIRCodePrimitive\FHIRXPathUsageTypeList;
        $this->assertFalse(VersionTypeMap::isContainableResource($type));
    }
}
