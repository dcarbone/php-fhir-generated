<?php /** @noinspection PhpFullyQualifiedNameUsageInspection */

namespace Tests\DCarbone\PHPFHIRGenerated\Versions\DSTU2;

/*!
 * This class was generated with the PHPFHIR library (https://github.com/dcarbone/php-fhir) using
 * class definitions from HL7 FHIR (https://www.hl7.org/fhir/)
 * 
 * Class creation date: February 22nd, 2025 18:56+0000
 * 
 * PHPFHIR Copyright:
 * 
 * Copyright 2016-2025 Daniel Carbone (daniel.p.carbone@gmail.com)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *        http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 *
 * FHIR Copyright Notice:
 *
 *   Copyright (c) 2011+, HL7, Inc.
 *   All rights reserved.
 * 
 *   Redistribution and use in source and binary forms, with or without modification,
 *   are permitted provided that the following conditions are met:
 * 
 *    * Redistributions of source code must retain the above copyright notice, this
 *      list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *    * Neither the name of HL7 nor the names of its contributors may be used to
 *      endorse or promote products derived from this software without specific
 *      prior written permission.
 * 
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *   IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *   INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *   POSSIBILITY OF SUCH DAMAGE.
 * 
 * 
 *   Generated on Sat, Oct 24, 2015 07:41+1100 for FHIR v1.0.2
 * 
 *   Note: the schemas & schematrons do not contain all of the rules about what makes resources
 *   valid. Implementers will still need to be familiar with the content of the specification and with
 *   any profiles that apply to the resources in order to make a conformant implementation.
 * 
 */
use DCarbone\PHPFHIRGenerated\Versions\DSTU2\VersionTypeMap;
use PHPUnit\Framework\TestCase;

class VersionTypeMapTest extends TestCase
{
    public function testGetTypeClassnameWithInvalidString()
    {
        $this->assertNull(VersionTypeMap::getTypeClassname('\\stdClass'));
    }

    public function testGetTypeClassnameWithInvalidXML()
    {
        $sxe = new \SimpleXMLElement('<NotAResource></NotAResource>');
        $this->assertNull(VersionTypeMap::getTypeClassname($sxe));
    }

    public function testGetTypeClassnameWithJSONMissingResourceType()
    {
        $json = new \stdClass();
        $json->jimmy = 'Observation';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithJSONInvalidResourceType()
    {
        $json = new \stdClass();
        $json->resourceType = 'Steve';
        $this->assertNull(VersionTypeMap::getTypeClassname($json));
    }

    public function testGetTypeClassnameWithTypeName()
    {
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive', VersionTypeMap::getTypeClassname('base64Binary-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive', VersionTypeMap::getTypeClassname('boolean-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive', VersionTypeMap::getTypeClassname('code-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive', VersionTypeMap::getTypeClassname('date-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive', VersionTypeMap::getTypeClassname('dateTime-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive', VersionTypeMap::getTypeClassname('decimal-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement', VersionTypeMap::getTypeClassname('Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus', VersionTypeMap::getTypeClassname('AccountStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList', VersionTypeMap::getTypeClassname('ActionList'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress', VersionTypeMap::getTypeClassname('Address'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType', VersionTypeMap::getTypeClassname('AddressType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse', VersionTypeMap::getTypeClassname('AddressUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender', VersionTypeMap::getTypeClassname('AdministrativeGender'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode', VersionTypeMap::getTypeClassname('AggregationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory', VersionTypeMap::getTypeClassname('AllergyIntoleranceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty', VersionTypeMap::getTypeClassname('AllergyIntoleranceCertainty'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality', VersionTypeMap::getTypeClassname('AllergyIntoleranceCriticality'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity', VersionTypeMap::getTypeClassname('AllergyIntoleranceSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus', VersionTypeMap::getTypeClassname('AllergyIntoleranceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType', VersionTypeMap::getTypeClassname('AllergyIntoleranceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation', VersionTypeMap::getTypeClassname('Annotation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat', VersionTypeMap::getTypeClassname('AnswerFormat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus', VersionTypeMap::getTypeClassname('AppointmentStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType', VersionTypeMap::getTypeClassname('AssertionDirectionType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType', VersionTypeMap::getTypeClassname('AssertionOperatorType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes', VersionTypeMap::getTypeClassname('AssertionResponseTypes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment', VersionTypeMap::getTypeClassname('Attachment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction', VersionTypeMap::getTypeClassname('AuditEventAction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome', VersionTypeMap::getTypeClassname('AuditEventOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType', VersionTypeMap::getTypeClassname('AuditEventParticipantNetworkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement', VersionTypeMap::getTypeClassname('BackboneElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction', VersionTypeMap::getTypeClassname('AllergyIntolerance.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant', VersionTypeMap::getTypeClassname('Appointment.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail', VersionTypeMap::getTypeClassname('AuditEvent.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent', VersionTypeMap::getTypeClassname('AuditEvent.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork', VersionTypeMap::getTypeClassname('AuditEvent.Network'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject', VersionTypeMap::getTypeClassname('AuditEvent.Object'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant', VersionTypeMap::getTypeClassname('AuditEvent.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource', VersionTypeMap::getTypeClassname('AuditEvent.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry', VersionTypeMap::getTypeClassname('Bundle.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink', VersionTypeMap::getTypeClassname('Bundle.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest', VersionTypeMap::getTypeClassname('Bundle.Request'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse', VersionTypeMap::getTypeClassname('Bundle.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch', VersionTypeMap::getTypeClassname('Bundle.Search'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity', VersionTypeMap::getTypeClassname('CarePlan.Activity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail', VersionTypeMap::getTypeClassname('CarePlan.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant', VersionTypeMap::getTypeClassname('CarePlan.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan', VersionTypeMap::getTypeClassname('CarePlan.RelatedPlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem', VersionTypeMap::getTypeClassname('ClaimResponse.AddItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication3'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4', VersionTypeMap::getTypeClassname('ClaimResponse.Adjudication4'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage', VersionTypeMap::getTypeClassname('ClaimResponse.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail', VersionTypeMap::getTypeClassname('ClaimResponse.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1', VersionTypeMap::getTypeClassname('ClaimResponse.Detail1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError', VersionTypeMap::getTypeClassname('ClaimResponse.Error'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem', VersionTypeMap::getTypeClassname('ClaimResponse.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote', VersionTypeMap::getTypeClassname('ClaimResponse.Note'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail', VersionTypeMap::getTypeClassname('ClaimResponse.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage', VersionTypeMap::getTypeClassname('Claim.Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail', VersionTypeMap::getTypeClassname('Claim.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis', VersionTypeMap::getTypeClassname('Claim.Diagnosis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem', VersionTypeMap::getTypeClassname('Claim.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth', VersionTypeMap::getTypeClassname('Claim.MissingTeeth'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee', VersionTypeMap::getTypeClassname('Claim.Payee'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis', VersionTypeMap::getTypeClassname('Claim.Prosthesis'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail', VersionTypeMap::getTypeClassname('Claim.SubDetail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding', VersionTypeMap::getTypeClassname('ClinicalImpression.Finding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations', VersionTypeMap::getTypeClassname('ClinicalImpression.Investigations'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut', VersionTypeMap::getTypeClassname('ClinicalImpression.RuledOut'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload', VersionTypeMap::getTypeClassname('CommunicationRequest.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload', VersionTypeMap::getTypeClassname('Communication.Payload'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester', VersionTypeMap::getTypeClassname('Composition.Attester'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent', VersionTypeMap::getTypeClassname('Composition.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection', VersionTypeMap::getTypeClassname('Composition.Section'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact', VersionTypeMap::getTypeClassname('ConceptMap.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn', VersionTypeMap::getTypeClassname('ConceptMap.DependsOn'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement', VersionTypeMap::getTypeClassname('ConceptMap.Element'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget', VersionTypeMap::getTypeClassname('ConceptMap.Target'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence', VersionTypeMap::getTypeClassname('Condition.Evidence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage', VersionTypeMap::getTypeClassname('Condition.Stage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate', VersionTypeMap::getTypeClassname('Conformance.Certificate'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact', VersionTypeMap::getTypeClassname('Conformance.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument', VersionTypeMap::getTypeClassname('Conformance.Document'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint', VersionTypeMap::getTypeClassname('Conformance.Endpoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent', VersionTypeMap::getTypeClassname('Conformance.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation', VersionTypeMap::getTypeClassname('Conformance.Implementation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction', VersionTypeMap::getTypeClassname('Conformance.Interaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1', VersionTypeMap::getTypeClassname('Conformance.Interaction1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging', VersionTypeMap::getTypeClassname('Conformance.Messaging'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation', VersionTypeMap::getTypeClassname('Conformance.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource', VersionTypeMap::getTypeClassname('Conformance.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest', VersionTypeMap::getTypeClassname('Conformance.Rest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam', VersionTypeMap::getTypeClassname('Conformance.SearchParam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity', VersionTypeMap::getTypeClassname('Conformance.Security'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware', VersionTypeMap::getTypeClassname('Conformance.Software'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor', VersionTypeMap::getTypeClassname('Contract.Actor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1', VersionTypeMap::getTypeClassname('Contract.Actor1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly', VersionTypeMap::getTypeClassname('Contract.Friendly'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal', VersionTypeMap::getTypeClassname('Contract.Legal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule', VersionTypeMap::getTypeClassname('Contract.Rule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner', VersionTypeMap::getTypeClassname('Contract.Signer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm', VersionTypeMap::getTypeClassname('Contract.Term'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem', VersionTypeMap::getTypeClassname('Contract.ValuedItem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1', VersionTypeMap::getTypeClassname('Contract.ValuedItem1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact', VersionTypeMap::getTypeClassname('DataElement.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping', VersionTypeMap::getTypeClassname('DataElement.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation', VersionTypeMap::getTypeClassname('DetectedIssue.Mitigation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification', VersionTypeMap::getTypeClassname('DeviceComponent.ProductionSpecification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration', VersionTypeMap::getTypeClassname('DeviceMetric.Calibration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent', VersionTypeMap::getTypeClassname('DiagnosticOrder.Event'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem', VersionTypeMap::getTypeClassname('DiagnosticOrder.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage', VersionTypeMap::getTypeClassname('DiagnosticReport.Image'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent', VersionTypeMap::getTypeClassname('DocumentManifest.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated', VersionTypeMap::getTypeClassname('DocumentManifest.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent', VersionTypeMap::getTypeClassname('DocumentReference.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext', VersionTypeMap::getTypeClassname('DocumentReference.Context'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated', VersionTypeMap::getTypeClassname('DocumentReference.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo', VersionTypeMap::getTypeClassname('DocumentReference.RelatesTo'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization', VersionTypeMap::getTypeClassname('Encounter.Hospitalization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation', VersionTypeMap::getTypeClassname('Encounter.Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant', VersionTypeMap::getTypeClassname('Encounter.Participant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory', VersionTypeMap::getTypeClassname('Encounter.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam', VersionTypeMap::getTypeClassname('EpisodeOfCare.CareTeam'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory', VersionTypeMap::getTypeClassname('EpisodeOfCare.StatusHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition', VersionTypeMap::getTypeClassname('FamilyMemberHistory.Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome', VersionTypeMap::getTypeClassname('Goal.Outcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic', VersionTypeMap::getTypeClassname('Group.Characteristic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember', VersionTypeMap::getTypeClassname('Group.Member'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime', VersionTypeMap::getTypeClassname('HealthcareService.AvailableTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable', VersionTypeMap::getTypeClassname('HealthcareService.NotAvailable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType', VersionTypeMap::getTypeClassname('HealthcareService.ServiceType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames', VersionTypeMap::getTypeClassname('ImagingObjectSelection.Frames'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance', VersionTypeMap::getTypeClassname('ImagingObjectSelection.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries', VersionTypeMap::getTypeClassname('ImagingObjectSelection.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy', VersionTypeMap::getTypeClassname('ImagingObjectSelection.Study'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance', VersionTypeMap::getTypeClassname('ImagingStudy.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries', VersionTypeMap::getTypeClassname('ImagingStudy.Series'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Protocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation', VersionTypeMap::getTypeClassname('Immunization.Explanation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction', VersionTypeMap::getTypeClassname('Immunization.Reaction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol', VersionTypeMap::getTypeClassname('Immunization.VaccinationProtocol'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact', VersionTypeMap::getTypeClassname('ImplementationGuide.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency', VersionTypeMap::getTypeClassname('ImplementationGuide.Dependency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal', VersionTypeMap::getTypeClassname('ImplementationGuide.Global'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage', VersionTypeMap::getTypeClassname('ImplementationGuide.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage', VersionTypeMap::getTypeClassname('ImplementationGuide.Page'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource', VersionTypeMap::getTypeClassname('ImplementationGuide.Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry', VersionTypeMap::getTypeClassname('List.Entry'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition', VersionTypeMap::getTypeClassname('Location.Position'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage', VersionTypeMap::getTypeClassname('MedicationAdministration.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction', VersionTypeMap::getTypeClassname('MedicationDispense.DosageInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution', VersionTypeMap::getTypeClassname('MedicationDispense.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest', VersionTypeMap::getTypeClassname('MedicationOrder.DispenseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction', VersionTypeMap::getTypeClassname('MedicationOrder.DosageInstruction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution', VersionTypeMap::getTypeClassname('MedicationOrder.Substitution'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage', VersionTypeMap::getTypeClassname('MedicationStatement.Dosage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch', VersionTypeMap::getTypeClassname('Medication.Batch'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent', VersionTypeMap::getTypeClassname('Medication.Content'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient', VersionTypeMap::getTypeClassname('Medication.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage', VersionTypeMap::getTypeClassname('Medication.Package'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct', VersionTypeMap::getTypeClassname('Medication.Product'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination', VersionTypeMap::getTypeClassname('MessageHeader.Destination'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse', VersionTypeMap::getTypeClassname('MessageHeader.Response'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource', VersionTypeMap::getTypeClassname('MessageHeader.Source'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact', VersionTypeMap::getTypeClassname('NamingSystem.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId', VersionTypeMap::getTypeClassname('NamingSystem.UniqueId'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration', VersionTypeMap::getTypeClassname('NutritionOrder.Administration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula', VersionTypeMap::getTypeClassname('NutritionOrder.EnteralFormula'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient', VersionTypeMap::getTypeClassname('NutritionOrder.Nutrient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet', VersionTypeMap::getTypeClassname('NutritionOrder.OralDiet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement', VersionTypeMap::getTypeClassname('NutritionOrder.Supplement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture', VersionTypeMap::getTypeClassname('NutritionOrder.Texture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent', VersionTypeMap::getTypeClassname('Observation.Component'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange', VersionTypeMap::getTypeClassname('Observation.ReferenceRange'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated', VersionTypeMap::getTypeClassname('Observation.Related'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding', VersionTypeMap::getTypeClassname('OperationDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact', VersionTypeMap::getTypeClassname('OperationDefinition.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter', VersionTypeMap::getTypeClassname('OperationDefinition.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue', VersionTypeMap::getTypeClassname('OperationOutcome.Issue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen', VersionTypeMap::getTypeClassname('Order.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact', VersionTypeMap::getTypeClassname('Organization.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter', VersionTypeMap::getTypeClassname('Parameters.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal', VersionTypeMap::getTypeClassname('Patient.Animal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication', VersionTypeMap::getTypeClassname('Patient.Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact', VersionTypeMap::getTypeClassname('Patient.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink', VersionTypeMap::getTypeClassname('Patient.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail', VersionTypeMap::getTypeClassname('PaymentReconciliation.Detail'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote', VersionTypeMap::getTypeClassname('PaymentReconciliation.Note'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink', VersionTypeMap::getTypeClassname('Person.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole', VersionTypeMap::getTypeClassname('Practitioner.PractitionerRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification', VersionTypeMap::getTypeClassname('Practitioner.Qualification'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice', VersionTypeMap::getTypeClassname('Procedure.FocalDevice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer', VersionTypeMap::getTypeClassname('Procedure.Performer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem', VersionTypeMap::getTypeClassname('ProcessRequest.Item'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes', VersionTypeMap::getTypeClassname('ProcessResponse.Notes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent', VersionTypeMap::getTypeClassname('Provenance.Agent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity', VersionTypeMap::getTypeClassname('Provenance.Entity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent', VersionTypeMap::getTypeClassname('Provenance.RelatedAgent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Answer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion', VersionTypeMap::getTypeClassname('QuestionnaireResponse.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup', VersionTypeMap::getTypeClassname('Questionnaire.Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion', VersionTypeMap::getTypeClassname('Questionnaire.Question'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction', VersionTypeMap::getTypeClassname('RiskAssessment.Prediction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact', VersionTypeMap::getTypeClassname('SearchParameter.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection', VersionTypeMap::getTypeClassname('Specimen.Collection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer', VersionTypeMap::getTypeClassname('Specimen.Container'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment', VersionTypeMap::getTypeClassname('Specimen.Treatment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact', VersionTypeMap::getTypeClassname('StructureDefinition.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential', VersionTypeMap::getTypeClassname('StructureDefinition.Differential'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping', VersionTypeMap::getTypeClassname('StructureDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot', VersionTypeMap::getTypeClassname('StructureDefinition.Snapshot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel', VersionTypeMap::getTypeClassname('Subscription.Channel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient', VersionTypeMap::getTypeClassname('Substance.Ingredient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance', VersionTypeMap::getTypeClassname('Substance.Instance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen', VersionTypeMap::getTypeClassname('SupplyRequest.When'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction', VersionTypeMap::getTypeClassname('TestScript.Action'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1', VersionTypeMap::getTypeClassname('TestScript.Action1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2', VersionTypeMap::getTypeClassname('TestScript.Action2'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert', VersionTypeMap::getTypeClassname('TestScript.Assert'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability', VersionTypeMap::getTypeClassname('TestScript.Capability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact', VersionTypeMap::getTypeClassname('TestScript.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture', VersionTypeMap::getTypeClassname('TestScript.Fixture'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink', VersionTypeMap::getTypeClassname('TestScript.Link'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata', VersionTypeMap::getTypeClassname('TestScript.Metadata'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation', VersionTypeMap::getTypeClassname('TestScript.Operation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader', VersionTypeMap::getTypeClassname('TestScript.RequestHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup', VersionTypeMap::getTypeClassname('TestScript.Setup'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown', VersionTypeMap::getTypeClassname('TestScript.Teardown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest', VersionTypeMap::getTypeClassname('TestScript.Test'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable', VersionTypeMap::getTypeClassname('TestScript.Variable'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem', VersionTypeMap::getTypeClassname('ValueSet.CodeSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose', VersionTypeMap::getTypeClassname('ValueSet.Compose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept', VersionTypeMap::getTypeClassname('ValueSet.Concept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1', VersionTypeMap::getTypeClassname('ValueSet.Concept1'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact', VersionTypeMap::getTypeClassname('ValueSet.Contact'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains', VersionTypeMap::getTypeClassname('ValueSet.Contains'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation', VersionTypeMap::getTypeClassname('ValueSet.Designation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion', VersionTypeMap::getTypeClassname('ValueSet.Expansion'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter', VersionTypeMap::getTypeClassname('ValueSet.Filter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude', VersionTypeMap::getTypeClassname('ValueSet.Include'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter', VersionTypeMap::getTypeClassname('ValueSet.Parameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense', VersionTypeMap::getTypeClassname('VisionPrescription.Dispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary', VersionTypeMap::getTypeClassname('base64Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength', VersionTypeMap::getTypeClassname('BindingStrength'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean', VersionTypeMap::getTypeClassname('boolean'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType', VersionTypeMap::getTypeClassname('BundleType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus', VersionTypeMap::getTypeClassname('CarePlanActivityStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship', VersionTypeMap::getTypeClassname('CarePlanRelationship'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus', VersionTypeMap::getTypeClassname('CarePlanStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType', VersionTypeMap::getTypeClassname('ClaimType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus', VersionTypeMap::getTypeClassname('ClinicalImpressionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode', VersionTypeMap::getTypeClassname('code'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept', VersionTypeMap::getTypeClassname('CodeableConcept'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding', VersionTypeMap::getTypeClassname('Coding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus', VersionTypeMap::getTypeClassname('CommunicationRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus', VersionTypeMap::getTypeClassname('CommunicationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode', VersionTypeMap::getTypeClassname('CompositionAttestationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus', VersionTypeMap::getTypeClassname('CompositionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence', VersionTypeMap::getTypeClassname('ConceptMapEquivalence'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus', VersionTypeMap::getTypeClassname('ConditionalDeleteStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus', VersionTypeMap::getTypeClassname('ConditionVerificationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode', VersionTypeMap::getTypeClassname('ConformanceEventMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus', VersionTypeMap::getTypeClassname('ConformanceResourceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind', VersionTypeMap::getTypeClassname('ConformanceStatementKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity', VersionTypeMap::getTypeClassname('ConstraintSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint', VersionTypeMap::getTypeClassname('ContactPoint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem', VersionTypeMap::getTypeClassname('ContactPointSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse', VersionTypeMap::getTypeClassname('ContactPointUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType', VersionTypeMap::getTypeClassname('ContentType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency', VersionTypeMap::getTypeClassname('DataElementStringency'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate', VersionTypeMap::getTypeClassname('date'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime', VersionTypeMap::getTypeClassname('dateTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek', VersionTypeMap::getTypeClassname('DaysOfWeek'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal', VersionTypeMap::getTypeClassname('decimal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity', VersionTypeMap::getTypeClassname('DetectedIssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory', VersionTypeMap::getTypeClassname('DeviceMetricCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor', VersionTypeMap::getTypeClassname('DeviceMetricColor'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus', VersionTypeMap::getTypeClassname('DeviceMetricOperationalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus', VersionTypeMap::getTypeClassname('DeviceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority', VersionTypeMap::getTypeClassname('DeviceUseRequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus', VersionTypeMap::getTypeClassname('DeviceUseRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority', VersionTypeMap::getTypeClassname('DiagnosticOrderPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus', VersionTypeMap::getTypeClassname('DiagnosticOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus', VersionTypeMap::getTypeClassname('DiagnosticReportStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType', VersionTypeMap::getTypeClassname('DigitalMediaType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode', VersionTypeMap::getTypeClassname('DocumentMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus', VersionTypeMap::getTypeClassname('DocumentReferenceStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType', VersionTypeMap::getTypeClassname('DocumentRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition', VersionTypeMap::getTypeClassname('ElementDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase', VersionTypeMap::getTypeClassname('ElementDefinition.Base'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding', VersionTypeMap::getTypeClassname('ElementDefinition.Binding'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint', VersionTypeMap::getTypeClassname('ElementDefinition.Constraint'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping', VersionTypeMap::getTypeClassname('ElementDefinition.Mapping'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing', VersionTypeMap::getTypeClassname('ElementDefinition.Slicing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType', VersionTypeMap::getTypeClassname('ElementDefinition.Type'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass', VersionTypeMap::getTypeClassname('EncounterClass'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus', VersionTypeMap::getTypeClassname('EncounterLocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState', VersionTypeMap::getTypeClassname('EncounterState'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus', VersionTypeMap::getTypeClassname('EpisodeOfCareStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming', VersionTypeMap::getTypeClassname('EventTiming'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension', VersionTypeMap::getTypeClassname('Extension'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext', VersionTypeMap::getTypeClassname('ExtensionContext'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus', VersionTypeMap::getTypeClassname('FamilyHistoryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator', VersionTypeMap::getTypeClassname('FilterOperator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus', VersionTypeMap::getTypeClassname('FlagStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus', VersionTypeMap::getTypeClassname('GoalStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType', VersionTypeMap::getTypeClassname('GroupType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType', VersionTypeMap::getTypeClassname('GuideDependencyType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind', VersionTypeMap::getTypeClassname('GuidePageKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose', VersionTypeMap::getTypeClassname('GuideResourcePurpose'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb', VersionTypeMap::getTypeClassname('HTTPVerb'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName', VersionTypeMap::getTypeClassname('HumanName'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId', VersionTypeMap::getTypeClassname('id'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier', VersionTypeMap::getTypeClassname('Identifier'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse', VersionTypeMap::getTypeClassname('IdentifierUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel', VersionTypeMap::getTypeClassname('IdentityAssuranceLevel'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability', VersionTypeMap::getTypeClassname('InstanceAvailability'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant', VersionTypeMap::getTypeClassname('instant'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger', VersionTypeMap::getTypeClassname('integer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity', VersionTypeMap::getTypeClassname('IssueSeverity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType', VersionTypeMap::getTypeClassname('IssueType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType', VersionTypeMap::getTypeClassname('LinkType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode', VersionTypeMap::getTypeClassname('ListMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus', VersionTypeMap::getTypeClassname('ListStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode', VersionTypeMap::getTypeClassname('LocationMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus', VersionTypeMap::getTypeClassname('LocationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown', VersionTypeMap::getTypeClassname('markdown'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle', VersionTypeMap::getTypeClassname('Measmnt-Principle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus', VersionTypeMap::getTypeClassname('MedicationAdministrationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus', VersionTypeMap::getTypeClassname('MedicationDispenseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus', VersionTypeMap::getTypeClassname('MedicationOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus', VersionTypeMap::getTypeClassname('MedicationStatementStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory', VersionTypeMap::getTypeClassname('MessageSignificanceCategory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta', VersionTypeMap::getTypeClassname('Meta'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse', VersionTypeMap::getTypeClassname('NameUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType', VersionTypeMap::getTypeClassname('NamingSystemIdentifierType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType', VersionTypeMap::getTypeClassname('NamingSystemType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative', VersionTypeMap::getTypeClassname('Narrative'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus', VersionTypeMap::getTypeClassname('NarrativeStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType', VersionTypeMap::getTypeClassname('NoteType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus', VersionTypeMap::getTypeClassname('NutritionOrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType', VersionTypeMap::getTypeClassname('ObservationRelationshipType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus', VersionTypeMap::getTypeClassname('ObservationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid', VersionTypeMap::getTypeClassname('oid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind', VersionTypeMap::getTypeClassname('OperationKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse', VersionTypeMap::getTypeClassname('OperationParameterUse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus', VersionTypeMap::getTypeClassname('OrderStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired', VersionTypeMap::getTypeClassname('ParticipantRequired'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus', VersionTypeMap::getTypeClassname('ParticipantStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus', VersionTypeMap::getTypeClassname('ParticipationStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod', VersionTypeMap::getTypeClassname('Period'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt', VersionTypeMap::getTypeClassname('positiveInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority', VersionTypeMap::getTypeClassname('ProcedureRequestPriority'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus', VersionTypeMap::getTypeClassname('ProcedureRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus', VersionTypeMap::getTypeClassname('ProcedureStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation', VersionTypeMap::getTypeClassname('PropertyRepresentation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole', VersionTypeMap::getTypeClassname('ProvenanceEntityRole'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity', VersionTypeMap::getTypeClassname('Quantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator', VersionTypeMap::getTypeClassname('QuantityComparator'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge', VersionTypeMap::getTypeClassname('Age'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount', VersionTypeMap::getTypeClassname('Count'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance', VersionTypeMap::getTypeClassname('Distance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration', VersionTypeMap::getTypeClassname('Duration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney', VersionTypeMap::getTypeClassname('Money'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity', VersionTypeMap::getTypeClassname('SimpleQuantity'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus', VersionTypeMap::getTypeClassname('QuestionnaireResponseStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus', VersionTypeMap::getTypeClassname('QuestionnaireStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange', VersionTypeMap::getTypeClassname('Range'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio', VersionTypeMap::getTypeClassname('Ratio'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference', VersionTypeMap::getTypeClassname('Reference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus', VersionTypeMap::getTypeClassname('ReferralStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome', VersionTypeMap::getTypeClassname('RemittanceOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy', VersionTypeMap::getTypeClassname('ResourceVersionPolicy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType', VersionTypeMap::getTypeClassname('ResponseType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode', VersionTypeMap::getTypeClassname('RestfulConformanceMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData', VersionTypeMap::getTypeClassname('SampledData'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType', VersionTypeMap::getTypeClassname('SampledDataDataType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode', VersionTypeMap::getTypeClassname('SearchEntryMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode', VersionTypeMap::getTypeClassname('SearchModifierCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType', VersionTypeMap::getTypeClassname('SearchParamType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature', VersionTypeMap::getTypeClassname('Signature'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules', VersionTypeMap::getTypeClassname('SlicingRules'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus', VersionTypeMap::getTypeClassname('SlotStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus', VersionTypeMap::getTypeClassname('SpecimenStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString', VersionTypeMap::getTypeClassname('string'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind', VersionTypeMap::getTypeClassname('StructureDefinitionKind'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType', VersionTypeMap::getTypeClassname('SubscriptionChannelType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus', VersionTypeMap::getTypeClassname('SubscriptionStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus', VersionTypeMap::getTypeClassname('SupplyDeliveryStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus', VersionTypeMap::getTypeClassname('SupplyRequestStatus'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction', VersionTypeMap::getTypeClassname('SystemRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime', VersionTypeMap::getTypeClassname('time'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming', VersionTypeMap::getTypeClassname('Timing'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat', VersionTypeMap::getTypeClassname('Timing.Repeat'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode', VersionTypeMap::getTypeClassname('TransactionMode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction', VersionTypeMap::getTypeClassname('TypeRestfulInteraction'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime', VersionTypeMap::getTypeClassname('UnitsOfTime'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode', VersionTypeMap::getTypeClassname('UnknownContentCode'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt', VersionTypeMap::getTypeClassname('unsignedInt'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri', VersionTypeMap::getTypeClassname('uri'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse', VersionTypeMap::getTypeClassname('Use'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid', VersionTypeMap::getTypeClassname('uuid'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase', VersionTypeMap::getTypeClassname('VisionBase'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes', VersionTypeMap::getTypeClassname('VisionEyes'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType', VersionTypeMap::getTypeClassname('XPathUsageType'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive', VersionTypeMap::getTypeClassname('id-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive', VersionTypeMap::getTypeClassname('instant-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive', VersionTypeMap::getTypeClassname('integer-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive', VersionTypeMap::getTypeClassname('markdown-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive', VersionTypeMap::getTypeClassname('oid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive', VersionTypeMap::getTypeClassname('positiveInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource', VersionTypeMap::getTypeClassname('Resource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer', VersionTypeMap::getTypeClassname('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary', VersionTypeMap::getTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle', VersionTypeMap::getTypeClassname('Bundle'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource', VersionTypeMap::getTypeClassname('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getTypeClassname('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getTypeClassname('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getTypeClassname('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getTypeClassname('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getTypeClassname('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getTypeClassname('BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getTypeClassname('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getTypeClassname('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getTypeClassname('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getTypeClassname('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getTypeClassname('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance', VersionTypeMap::getTypeClassname('Conformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getTypeClassname('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getTypeClassname('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getTypeClassname('DataElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getTypeClassname('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getTypeClassname('DeviceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getTypeClassname('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest', VersionTypeMap::getTypeClassname('DeviceUseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getTypeClassname('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder', VersionTypeMap::getTypeClassname('DiagnosticOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getTypeClassname('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getTypeClassname('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getTypeClassname('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getTypeClassname('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getTypeClassname('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getTypeClassname('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getTypeClassname('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getTypeClassname('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getTypeClassname('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getTypeClassname('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getTypeClassname('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection', VersionTypeMap::getTypeClassname('ImagingObjectSelection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getTypeClassname('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getTypeClassname('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder', VersionTypeMap::getTypeClassname('MedicationOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getTypeClassname('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getTypeClassname('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getTypeClassname('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder', VersionTypeMap::getTypeClassname('Order'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse', VersionTypeMap::getTypeClassname('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getTypeClassname('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getTypeClassname('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getTypeClassname('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getTypeClassname('ProcedureRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getTypeClassname('ProcessRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getTypeClassname('ProcessResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getTypeClassname('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getTypeClassname('ReferralRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getTypeClassname('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getTypeClassname('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getTypeClassname('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getTypeClassname('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getTypeClassname('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getTypeClassname('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getTypeClassname('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getTypeClassname('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getTypeClassname('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters', VersionTypeMap::getTypeClassname('Parameters'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive', VersionTypeMap::getTypeClassname('SampledDataDataType-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive', VersionTypeMap::getTypeClassname('string-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList', VersionTypeMap::getTypeClassname('AccountStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList', VersionTypeMap::getTypeClassname('ActionList-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList', VersionTypeMap::getTypeClassname('AddressType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList', VersionTypeMap::getTypeClassname('AddressUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList', VersionTypeMap::getTypeClassname('AdministrativeGender-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList', VersionTypeMap::getTypeClassname('AggregationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList', VersionTypeMap::getTypeClassname('AllergyIntoleranceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList', VersionTypeMap::getTypeClassname('AllergyIntoleranceCertainty-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList', VersionTypeMap::getTypeClassname('AllergyIntoleranceCriticality-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList', VersionTypeMap::getTypeClassname('AllergyIntoleranceSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList', VersionTypeMap::getTypeClassname('AllergyIntoleranceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList', VersionTypeMap::getTypeClassname('AllergyIntoleranceType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList', VersionTypeMap::getTypeClassname('AnswerFormat-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList', VersionTypeMap::getTypeClassname('AppointmentStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList', VersionTypeMap::getTypeClassname('AssertionDirectionType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList', VersionTypeMap::getTypeClassname('AssertionOperatorType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList', VersionTypeMap::getTypeClassname('AssertionResponseTypes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList', VersionTypeMap::getTypeClassname('AuditEventAction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList', VersionTypeMap::getTypeClassname('AuditEventOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList', VersionTypeMap::getTypeClassname('AuditEventParticipantNetworkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList', VersionTypeMap::getTypeClassname('BindingStrength-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList', VersionTypeMap::getTypeClassname('BundleType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList', VersionTypeMap::getTypeClassname('CarePlanActivityStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList', VersionTypeMap::getTypeClassname('CarePlanRelationship-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList', VersionTypeMap::getTypeClassname('CarePlanStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList', VersionTypeMap::getTypeClassname('ClaimType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList', VersionTypeMap::getTypeClassname('ClinicalImpressionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList', VersionTypeMap::getTypeClassname('CommunicationRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList', VersionTypeMap::getTypeClassname('CommunicationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList', VersionTypeMap::getTypeClassname('CompositionAttestationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList', VersionTypeMap::getTypeClassname('CompositionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList', VersionTypeMap::getTypeClassname('ConceptMapEquivalence-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList', VersionTypeMap::getTypeClassname('ConditionalDeleteStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList', VersionTypeMap::getTypeClassname('ConditionVerificationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList', VersionTypeMap::getTypeClassname('ConformanceEventMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList', VersionTypeMap::getTypeClassname('ConformanceResourceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList', VersionTypeMap::getTypeClassname('ConformanceStatementKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList', VersionTypeMap::getTypeClassname('ConstraintSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList', VersionTypeMap::getTypeClassname('ContactPointSystem-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList', VersionTypeMap::getTypeClassname('ContactPointUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList', VersionTypeMap::getTypeClassname('ContentType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList', VersionTypeMap::getTypeClassname('DataElementStringency-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList', VersionTypeMap::getTypeClassname('DaysOfWeek-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList', VersionTypeMap::getTypeClassname('DetectedIssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList', VersionTypeMap::getTypeClassname('DeviceMetricCalibrationType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList', VersionTypeMap::getTypeClassname('DeviceMetricCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList', VersionTypeMap::getTypeClassname('DeviceMetricColor-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList', VersionTypeMap::getTypeClassname('DeviceMetricOperationalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList', VersionTypeMap::getTypeClassname('DeviceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList', VersionTypeMap::getTypeClassname('DeviceUseRequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList', VersionTypeMap::getTypeClassname('DeviceUseRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList', VersionTypeMap::getTypeClassname('DiagnosticOrderPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList', VersionTypeMap::getTypeClassname('DiagnosticOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList', VersionTypeMap::getTypeClassname('DiagnosticReportStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList', VersionTypeMap::getTypeClassname('DigitalMediaType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList', VersionTypeMap::getTypeClassname('DocumentMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList', VersionTypeMap::getTypeClassname('DocumentReferenceStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList', VersionTypeMap::getTypeClassname('DocumentRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList', VersionTypeMap::getTypeClassname('EncounterClass-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList', VersionTypeMap::getTypeClassname('EncounterLocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList', VersionTypeMap::getTypeClassname('EncounterState-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList', VersionTypeMap::getTypeClassname('EpisodeOfCareStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList', VersionTypeMap::getTypeClassname('EventTiming-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList', VersionTypeMap::getTypeClassname('ExtensionContext-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList', VersionTypeMap::getTypeClassname('FamilyHistoryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList', VersionTypeMap::getTypeClassname('FilterOperator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList', VersionTypeMap::getTypeClassname('FlagStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList', VersionTypeMap::getTypeClassname('GoalStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList', VersionTypeMap::getTypeClassname('GroupType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList', VersionTypeMap::getTypeClassname('GuideDependencyType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList', VersionTypeMap::getTypeClassname('GuidePageKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList', VersionTypeMap::getTypeClassname('GuideResourcePurpose-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList', VersionTypeMap::getTypeClassname('HTTPVerb-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList', VersionTypeMap::getTypeClassname('IdentifierUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList', VersionTypeMap::getTypeClassname('IdentityAssuranceLevel-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList', VersionTypeMap::getTypeClassname('InstanceAvailability-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList', VersionTypeMap::getTypeClassname('IssueSeverity-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList', VersionTypeMap::getTypeClassname('IssueType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList', VersionTypeMap::getTypeClassname('LinkType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList', VersionTypeMap::getTypeClassname('ListMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList', VersionTypeMap::getTypeClassname('ListStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList', VersionTypeMap::getTypeClassname('LocationMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList', VersionTypeMap::getTypeClassname('LocationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList', VersionTypeMap::getTypeClassname('Measmnt-Principle-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList', VersionTypeMap::getTypeClassname('MedicationAdministrationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList', VersionTypeMap::getTypeClassname('MedicationDispenseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList', VersionTypeMap::getTypeClassname('MedicationOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList', VersionTypeMap::getTypeClassname('MedicationStatementStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList', VersionTypeMap::getTypeClassname('MessageSignificanceCategory-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList', VersionTypeMap::getTypeClassname('NameUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList', VersionTypeMap::getTypeClassname('NamingSystemIdentifierType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList', VersionTypeMap::getTypeClassname('NamingSystemType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList', VersionTypeMap::getTypeClassname('NarrativeStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList', VersionTypeMap::getTypeClassname('NoteType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList', VersionTypeMap::getTypeClassname('NutritionOrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList', VersionTypeMap::getTypeClassname('ObservationRelationshipType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList', VersionTypeMap::getTypeClassname('ObservationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList', VersionTypeMap::getTypeClassname('OperationKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList', VersionTypeMap::getTypeClassname('OperationParameterUse-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList', VersionTypeMap::getTypeClassname('OrderStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList', VersionTypeMap::getTypeClassname('ParticipantRequired-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList', VersionTypeMap::getTypeClassname('ParticipantStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList', VersionTypeMap::getTypeClassname('ParticipationStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList', VersionTypeMap::getTypeClassname('ProcedureRequestPriority-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList', VersionTypeMap::getTypeClassname('ProcedureRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList', VersionTypeMap::getTypeClassname('ProcedureStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList', VersionTypeMap::getTypeClassname('PropertyRepresentation-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList', VersionTypeMap::getTypeClassname('ProvenanceEntityRole-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList', VersionTypeMap::getTypeClassname('QuantityComparator-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList', VersionTypeMap::getTypeClassname('QuestionnaireResponseStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList', VersionTypeMap::getTypeClassname('QuestionnaireStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList', VersionTypeMap::getTypeClassname('ReferralStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList', VersionTypeMap::getTypeClassname('RemittanceOutcome-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList', VersionTypeMap::getTypeClassname('ResourceVersionPolicy-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList', VersionTypeMap::getTypeClassname('ResponseType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList', VersionTypeMap::getTypeClassname('RestfulConformanceMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList', VersionTypeMap::getTypeClassname('SearchEntryMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList', VersionTypeMap::getTypeClassname('SearchModifierCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList', VersionTypeMap::getTypeClassname('SearchParamType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList', VersionTypeMap::getTypeClassname('SlicingRules-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList', VersionTypeMap::getTypeClassname('SlotStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList', VersionTypeMap::getTypeClassname('SpecimenStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList', VersionTypeMap::getTypeClassname('StructureDefinitionKind-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList', VersionTypeMap::getTypeClassname('SubscriptionChannelType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList', VersionTypeMap::getTypeClassname('SubscriptionStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList', VersionTypeMap::getTypeClassname('SupplyDeliveryStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList', VersionTypeMap::getTypeClassname('SupplyRequestStatus-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList', VersionTypeMap::getTypeClassname('SystemRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList', VersionTypeMap::getTypeClassname('TransactionMode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList', VersionTypeMap::getTypeClassname('TypeRestfulInteraction-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList', VersionTypeMap::getTypeClassname('UnitsOfTime-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList', VersionTypeMap::getTypeClassname('UnknownContentCode-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList', VersionTypeMap::getTypeClassname('Use-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList', VersionTypeMap::getTypeClassname('VisionBase-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList', VersionTypeMap::getTypeClassname('VisionEyes-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList', VersionTypeMap::getTypeClassname('XPathUsageType-list'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive', VersionTypeMap::getTypeClassname('time-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive', VersionTypeMap::getTypeClassname('unsignedInt-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive', VersionTypeMap::getTypeClassname('uri-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive', VersionTypeMap::getTypeClassname('uuid-primitive'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML', VersionTypeMap::getTypeClassname('XHTML'));
    }

    public function testGetContainedTypeClassnameWithTypeName()
    {
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AccountStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionList'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Address'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrativeGender'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCertainty'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCriticality'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Annotation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AnswerFormat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionDirectionType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionOperatorType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionResponseTypes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Attachment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventParticipantNetworkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BackboneElement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntolerance.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Appointment.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Network'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Object'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEvent.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Request'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Bundle.Search'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Activity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlan.RelatedPlan'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.AddItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication3'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Adjudication4'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Detail1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Error'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.Note'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimResponse.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Coverage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Diagnosis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.MissingTeeth'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Payee'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.Prosthesis'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Claim.SubDetail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpression.Finding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpression.Investigations'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpression.RuledOut'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationRequest.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Communication.Payload'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Attester'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Composition.Section'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.DependsOn'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Element'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMap.Target'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Evidence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Condition.Stage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Certificate'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Document'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Endpoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Implementation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Interaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Interaction1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Messaging'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Rest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.SearchParam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Security'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Conformance.Software'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Actor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Actor1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Friendly'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Legal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Rule'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Signer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.Term'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.ValuedItem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Contract.ValuedItem1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElement.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElement.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssue.Mitigation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceComponent.ProductionSpecification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetric.Calibration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrder.Event'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrder.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReport.Image'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentManifest.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentManifest.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Context'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReference.RelatesTo'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Hospitalization'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Location'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.Participant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Encounter.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.CareTeam'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCare.StatusHistory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory.Condition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Goal.Outcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Characteristic'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Group.Member'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HealthcareService.AvailableTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HealthcareService.NotAvailable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HealthcareService.ServiceType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingObjectSelection.Frames'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingObjectSelection.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingObjectSelection.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingObjectSelection.Study'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImagingStudy.Series'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.DateCriterion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Protocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation.Recommendation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Explanation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.Reaction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Immunization.VaccinationProtocol'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Dependency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Global'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Page'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ImplementationGuide.Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('List.Entry'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Location.Position'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministration.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.DosageInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispense.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationOrder.DispenseRequest'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationOrder.DosageInstruction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationOrder.Substitution'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatement.Dosage'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Batch'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Content'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Package'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Medication.Product'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Destination'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Response'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageHeader.Source'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystem.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystem.UniqueId'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Administration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.EnteralFormula'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Nutrient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.OralDiet'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Supplement'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrder.Texture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.Component'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.ReferenceRange'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Observation.Related'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationDefinition.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationOutcome.Issue'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Order.When'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Organization.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Parameters.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Animal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Communication'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Patient.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentReconciliation.Detail'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PaymentReconciliation.Note'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Person.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Practitioner.PractitionerRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Practitioner.Qualification'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.FocalDevice'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Procedure.Performer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcessRequest.Item'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcessResponse.Notes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Agent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.Entity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Provenance.RelatedAgent'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Answer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse.Question'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Group'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Questionnaire.Question'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RiskAssessment.Prediction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParameter.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Collection'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Container'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Specimen.Treatment'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Differential'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinition.Snapshot'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Subscription.Channel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Ingredient'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Substance.Instance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequest.When'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Action2'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Assert'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Capability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Fixture'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Link'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Metadata'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Operation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.RequestHeader'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Setup'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Teardown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Test'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TestScript.Variable'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.CodeSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Compose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Concept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Concept1'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Contact'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Contains'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Designation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Expansion'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Filter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Include'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ValueSet.Parameter'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionPrescription.Dispense'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('base64Binary'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingStrength'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('boolean'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BundleType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanRelationship'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpressionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('code'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CodeableConcept'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Coding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionAttestationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapEquivalence'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalDeleteStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionVerificationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceEventMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceResourceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceStatementKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPoint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointSystem'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContentType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElementStringency'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('date'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('dateTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DaysOfWeek'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('decimal'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricColor'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricOperationalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUseRequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUseRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DigitalMediaType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Base'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Binding'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Constraint'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Mapping'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Slicing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ElementDefinition.Type'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterClass'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterLocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterState'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCareStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Extension'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContext'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistoryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FlagStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GoalStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuideDependencyType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidePageKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuideResourcePurpose'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HTTPVerb'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HumanName'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Identifier'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentityAssuranceLevel'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InstanceAvailability'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('markdown'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measmnt-Principle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Meta'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemIdentifierType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Narrative'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NoteType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRelationshipType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterUse'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OrderStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantRequired'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipationStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Period'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('positiveInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRequestPriority'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Quantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityComparator'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Age'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Count'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Distance'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Duration'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Money'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SimpleQuantity'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponseStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Range'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Ratio'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Reference'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferralStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RemittanceOutcome'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceVersionPolicy'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulConformanceMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledData'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchEntryMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchModifierCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Signature'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlotStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinitionKind'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionChannelType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDeliveryStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequestStatus'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('time'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Timing'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Timing.Repeat'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TransactionMode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeRestfulInteraction'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnknownContentCode'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('unsignedInt'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Use'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionBase'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionEyes'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XPathUsageType'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('id-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('instant-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('integer-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('markdown-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('oid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('positiveInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Resource'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceContainer'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary', VersionTypeMap::getContainedTypeClassname('Binary'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle', VersionTypeMap::getContainedTypeClassname('Bundle'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DomainResource'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount', VersionTypeMap::getContainedTypeClassname('Account'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance', VersionTypeMap::getContainedTypeClassname('AllergyIntolerance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment', VersionTypeMap::getContainedTypeClassname('Appointment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse', VersionTypeMap::getContainedTypeClassname('AppointmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent', VersionTypeMap::getContainedTypeClassname('AuditEvent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic', VersionTypeMap::getContainedTypeClassname('Basic'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite', VersionTypeMap::getContainedTypeClassname('BodySite'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan', VersionTypeMap::getContainedTypeClassname('CarePlan'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim', VersionTypeMap::getContainedTypeClassname('Claim'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse', VersionTypeMap::getContainedTypeClassname('ClaimResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression', VersionTypeMap::getContainedTypeClassname('ClinicalImpression'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication', VersionTypeMap::getContainedTypeClassname('Communication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest', VersionTypeMap::getContainedTypeClassname('CommunicationRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition', VersionTypeMap::getContainedTypeClassname('Composition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap', VersionTypeMap::getContainedTypeClassname('ConceptMap'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition', VersionTypeMap::getContainedTypeClassname('Condition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance', VersionTypeMap::getContainedTypeClassname('Conformance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract', VersionTypeMap::getContainedTypeClassname('Contract'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage', VersionTypeMap::getContainedTypeClassname('Coverage'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement', VersionTypeMap::getContainedTypeClassname('DataElement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue', VersionTypeMap::getContainedTypeClassname('DetectedIssue'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice', VersionTypeMap::getContainedTypeClassname('Device'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent', VersionTypeMap::getContainedTypeClassname('DeviceComponent'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric', VersionTypeMap::getContainedTypeClassname('DeviceMetric'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest', VersionTypeMap::getContainedTypeClassname('DeviceUseRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement', VersionTypeMap::getContainedTypeClassname('DeviceUseStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder', VersionTypeMap::getContainedTypeClassname('DiagnosticOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport', VersionTypeMap::getContainedTypeClassname('DiagnosticReport'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest', VersionTypeMap::getContainedTypeClassname('DocumentManifest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference', VersionTypeMap::getContainedTypeClassname('DocumentReference'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest', VersionTypeMap::getContainedTypeClassname('EligibilityRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse', VersionTypeMap::getContainedTypeClassname('EligibilityResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter', VersionTypeMap::getContainedTypeClassname('Encounter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest', VersionTypeMap::getContainedTypeClassname('EnrollmentRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse', VersionTypeMap::getContainedTypeClassname('EnrollmentResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare', VersionTypeMap::getContainedTypeClassname('EpisodeOfCare'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit', VersionTypeMap::getContainedTypeClassname('ExplanationOfBenefit'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory', VersionTypeMap::getContainedTypeClassname('FamilyMemberHistory'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag', VersionTypeMap::getContainedTypeClassname('Flag'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal', VersionTypeMap::getContainedTypeClassname('Goal'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup', VersionTypeMap::getContainedTypeClassname('Group'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService', VersionTypeMap::getContainedTypeClassname('HealthcareService'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection', VersionTypeMap::getContainedTypeClassname('ImagingObjectSelection'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy', VersionTypeMap::getContainedTypeClassname('ImagingStudy'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization', VersionTypeMap::getContainedTypeClassname('Immunization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation', VersionTypeMap::getContainedTypeClassname('ImmunizationRecommendation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide', VersionTypeMap::getContainedTypeClassname('ImplementationGuide'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList', VersionTypeMap::getContainedTypeClassname('List'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation', VersionTypeMap::getContainedTypeClassname('Location'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia', VersionTypeMap::getContainedTypeClassname('Media'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication', VersionTypeMap::getContainedTypeClassname('Medication'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration', VersionTypeMap::getContainedTypeClassname('MedicationAdministration'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense', VersionTypeMap::getContainedTypeClassname('MedicationDispense'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder', VersionTypeMap::getContainedTypeClassname('MedicationOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement', VersionTypeMap::getContainedTypeClassname('MedicationStatement'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader', VersionTypeMap::getContainedTypeClassname('MessageHeader'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem', VersionTypeMap::getContainedTypeClassname('NamingSystem'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder', VersionTypeMap::getContainedTypeClassname('NutritionOrder'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation', VersionTypeMap::getContainedTypeClassname('Observation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition', VersionTypeMap::getContainedTypeClassname('OperationDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome', VersionTypeMap::getContainedTypeClassname('OperationOutcome'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder', VersionTypeMap::getContainedTypeClassname('Order'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse', VersionTypeMap::getContainedTypeClassname('OrderResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization', VersionTypeMap::getContainedTypeClassname('Organization'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient', VersionTypeMap::getContainedTypeClassname('Patient'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice', VersionTypeMap::getContainedTypeClassname('PaymentNotice'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation', VersionTypeMap::getContainedTypeClassname('PaymentReconciliation'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson', VersionTypeMap::getContainedTypeClassname('Person'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner', VersionTypeMap::getContainedTypeClassname('Practitioner'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure', VersionTypeMap::getContainedTypeClassname('Procedure'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest', VersionTypeMap::getContainedTypeClassname('ProcedureRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest', VersionTypeMap::getContainedTypeClassname('ProcessRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse', VersionTypeMap::getContainedTypeClassname('ProcessResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance', VersionTypeMap::getContainedTypeClassname('Provenance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire', VersionTypeMap::getContainedTypeClassname('Questionnaire'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse', VersionTypeMap::getContainedTypeClassname('QuestionnaireResponse'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest', VersionTypeMap::getContainedTypeClassname('ReferralRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson', VersionTypeMap::getContainedTypeClassname('RelatedPerson'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment', VersionTypeMap::getContainedTypeClassname('RiskAssessment'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule', VersionTypeMap::getContainedTypeClassname('Schedule'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter', VersionTypeMap::getContainedTypeClassname('SearchParameter'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot', VersionTypeMap::getContainedTypeClassname('Slot'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen', VersionTypeMap::getContainedTypeClassname('Specimen'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition', VersionTypeMap::getContainedTypeClassname('StructureDefinition'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription', VersionTypeMap::getContainedTypeClassname('Subscription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance', VersionTypeMap::getContainedTypeClassname('Substance'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery', VersionTypeMap::getContainedTypeClassname('SupplyDelivery'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest', VersionTypeMap::getContainedTypeClassname('SupplyRequest'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript', VersionTypeMap::getContainedTypeClassname('TestScript'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet', VersionTypeMap::getContainedTypeClassname('ValueSet'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription', VersionTypeMap::getContainedTypeClassname('VisionPrescription'));
        $this->assertEquals('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters', VersionTypeMap::getContainedTypeClassname('Parameters'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SampledDataDataType-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('string-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AccountStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ActionList-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AddressUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AdministrativeGender-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AggregationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCertainty-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceCriticality-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AllergyIntoleranceType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AnswerFormat-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AppointmentStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionDirectionType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionOperatorType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AssertionResponseTypes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventAction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('AuditEventParticipantNetworkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BindingStrength-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('BundleType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanActivityStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanRelationship-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CarePlanStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClaimType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ClinicalImpressionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CommunicationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionAttestationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('CompositionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConceptMapEquivalence-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionalDeleteStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConditionVerificationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceEventMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceResourceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConformanceStatementKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ConstraintSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointSystem-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContactPointUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ContentType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DataElementStringency-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DaysOfWeek-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DetectedIssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCalibrationType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricColor-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceMetricOperationalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUseRequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DeviceUseRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticOrderStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DiagnosticReportStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DigitalMediaType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentReferenceStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('DocumentRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterClass-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterLocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EncounterState-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EpisodeOfCareStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('EventTiming-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ExtensionContext-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FamilyHistoryStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FilterOperator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('FlagStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GoalStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GroupType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuideDependencyType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuidePageKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('GuideResourcePurpose-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('HTTPVerb-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentifierUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IdentityAssuranceLevel-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('InstanceAvailability-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueSeverity-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('IssueType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LinkType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ListStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('LocationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Measmnt-Principle-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationAdministrationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationDispenseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationOrderStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MedicationStatementStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('MessageSignificanceCategory-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NameUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemIdentifierType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NamingSystemType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NarrativeStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NoteType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('NutritionOrderStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationRelationshipType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ObservationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OperationParameterUse-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('OrderStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantRequired-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipantStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ParticipationStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRequestPriority-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProcedureStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('PropertyRepresentation-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ProvenanceEntityRole-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuantityComparator-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireResponseStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('QuestionnaireStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ReferralStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RemittanceOutcome-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResourceVersionPolicy-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('ResponseType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('RestfulConformanceMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchEntryMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchModifierCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SearchParamType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlicingRules-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SlotStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SpecimenStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('StructureDefinitionKind-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionChannelType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SubscriptionStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyDeliveryStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SupplyRequestStatus-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('SystemRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TransactionMode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('TypeRestfulInteraction-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnitsOfTime-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('UnknownContentCode-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('Use-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionBase-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('VisionEyes-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XPathUsageType-list'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('time-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('unsignedInt-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uri-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('uuid-primitive'));
        $this->assertNull(VersionTypeMap::getContainedTypeClassname('XHTML'));
    }

    public function testIsContainableResourceWithClassname()
    {
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription'));
        $this->assertTrue(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters'), sprintf('Expected input "%s" to return true.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters'));
        $this->assertTrue(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters'), sprintf('Expected input "%s" to return true.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive'));
        $this->assertFalse(VersionTypeMap::isContainableType('DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', 'DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML'));
        $this->assertFalse(VersionTypeMap::isContainableType('\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML'), sprintf('Expected input "%s" to return false.', '\DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML'));
    }

    public function testIsContainableResourceWithInstance()
    {
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBase64BinaryPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRBooleanPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRCodePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDatePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDateTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRDecimalPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAccountStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRActionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddress;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAddressUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAdministrativeGender;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAggregationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCertainty;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceCriticality;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAllergyIntoleranceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnnotation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAnswerFormat;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAppointmentStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionDirectionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionOperatorType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAssertionResponseTypes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAttachment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRAuditEventParticipantNetworkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAllergyIntolerance\FHIRAllergyIntoleranceReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAppointment\FHIRAppointmentParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventNetwork;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventObject;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRAuditEvent\FHIRAuditEventSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRBundle\FHIRBundleSearch;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanActivity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCarePlan\FHIRCarePlanRelatedPlan;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAddItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication3;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseAdjudication4;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseCoverage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseDetail1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseError;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaimResponse\FHIRClaimResponseSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimCoverage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimDiagnosis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimMissingTeeth;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimPayee;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimProsthesis;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClaim\FHIRClaimSubDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionFinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionInvestigations;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRClinicalImpression\FHIRClinicalImpressionRuledOut;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunicationRequest\FHIRCommunicationRequestPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCommunication\FHIRCommunicationPayload;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionAttester;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRComposition\FHIRCompositionSection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapDependsOn;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapElement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConceptMap\FHIRConceptMapTarget;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionEvidence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRCondition\FHIRConditionStage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceCertificate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceDocument;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEndpoint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceImplementation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceInteraction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceMessaging;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceRest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSearchParam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSecurity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRConformance\FHIRConformanceSoftware;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractActor1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractFriendly;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractLegal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractRule;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractSigner;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractTerm;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRContract\FHIRContractValuedItem1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDataElement\FHIRDataElementMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDetectedIssue\FHIRDetectedIssueMitigation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceComponent\FHIRDeviceComponentProductionSpecification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDeviceMetric\FHIRDeviceMetricCalibration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderEvent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticOrder\FHIRDiagnosticOrderItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDiagnosticReport\FHIRDiagnosticReportImage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentManifest\FHIRDocumentManifestRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRDocumentReference\FHIRDocumentReferenceRelatesTo;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterHospitalization;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterLocation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterParticipant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREncounter\FHIREncounterStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareCareTeam;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIREpisodeOfCare\FHIREpisodeOfCareStatusHistory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRFamilyMemberHistory\FHIRFamilyMemberHistoryCondition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGoal\FHIRGoalOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupCharacteristic;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRGroup\FHIRGroupMember;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceAvailableTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceNotAvailable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRHealthcareService\FHIRHealthcareServiceServiceType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionFrames;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionSeries;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingObjectSelection\FHIRImagingObjectSelectionStudy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudyInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImagingStudy\FHIRImagingStudySeries;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationDateCriterion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunizationRecommendation\FHIRImmunizationRecommendationRecommendation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationExplanation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationReaction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImmunization\FHIRImmunizationVaccinationProtocol;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideDependency;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideGlobal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePackage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuidePage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRImplementationGuide\FHIRImplementationGuideResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRList\FHIRListEntry;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRLocation\FHIRLocationPosition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationAdministration\FHIRMedicationAdministrationDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseDosageInstruction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationDispense\FHIRMedicationDispenseSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDispenseRequest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderDosageInstruction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationOrder\FHIRMedicationOrderSubstitution;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedicationStatement\FHIRMedicationStatementDosage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationBatch;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationContent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationPackage;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMedication\FHIRMedicationProduct;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderDestination;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderResponse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRMessageHeader\FHIRMessageHeaderSource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNamingSystem\FHIRNamingSystemUniqueId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderAdministration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderEnteralFormula;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderNutrient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderOralDiet;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderSupplement;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRNutritionOrder\FHIRNutritionOrderTexture;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationComponent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationReferenceRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRObservation\FHIRObservationRelated;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationDefinition\FHIROperationDefinitionParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROperationOutcome\FHIROperationOutcomeIssue;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrder\FHIROrderWhen;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIROrganization\FHIROrganizationContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRParameters\FHIRParametersParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientAnimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientCommunication;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPatient\FHIRPatientLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationDetail;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPaymentReconciliation\FHIRPaymentReconciliationNote;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPerson\FHIRPersonLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerPractitionerRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRPractitioner\FHIRPractitionerQualification;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedureFocalDevice;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcedure\FHIRProcedurePerformer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessRequest\FHIRProcessRequestItem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProcessResponse\FHIRProcessResponseNotes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceEntity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRProvenance\FHIRProvenanceRelatedAgent;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseAnswer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaireResponse\FHIRQuestionnaireResponseQuestion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireGroup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRQuestionnaire\FHIRQuestionnaireQuestion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRRiskAssessment\FHIRRiskAssessmentPrediction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSearchParameter\FHIRSearchParameterContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenCollection;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSpecimen\FHIRSpecimenTreatment;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionDifferential;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRStructureDefinition\FHIRStructureDefinitionSnapshot;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubscription\FHIRSubscriptionChannel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceIngredient;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSubstance\FHIRSubstanceInstance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRSupplyRequest\FHIRSupplyRequestWhen;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAction2;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptAssert;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptCapability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptFixture;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptLink;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptMetadata;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptOperation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptRequestHeader;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptSetup;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTeardown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptTest;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRTestScript\FHIRTestScriptVariable;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCodeSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetCompose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetConcept1;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContact;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetContains;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetDesignation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetExpansion;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetFilter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetInclude;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRValueSet\FHIRValueSetParameter;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBackboneElement\FHIRVisionPrescription\FHIRVisionPrescriptionDispense;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBase64Binary;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBindingStrength;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBoolean;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRBundleType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanActivityStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanRelationship;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCarePlanStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClaimType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRClinicalImpressionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCodeableConcept;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCoding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCommunicationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionAttestationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRCompositionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConceptMapEquivalence;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionalDeleteStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConditionVerificationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceEventMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceResourceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConformanceStatementKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRConstraintSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPoint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointSystem;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContactPointUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRContentType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDataElementStringency;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDate;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDateTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDaysOfWeek;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDecimal;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDetectedIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCalibrationType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricColor;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceMetricOperationalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDeviceUseRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDiagnosticReportStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDigitalMediaType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentReferenceStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRDocumentRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionBinding;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionConstraint;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionMapping;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionSlicing;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRElementDefinition\FHIRElementDefinitionType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterClass;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREncounterState;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREpisodeOfCareStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIREventTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtension;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRExtensionContext;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFamilyHistoryStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFilterOperator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRFlagStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGoalStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGroupType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideDependencyType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuidePageKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRGuideResourcePurpose;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHTTPVerb;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRHumanName;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRId;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifier;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentifierUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIdentityAssuranceLevel;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstanceAvailability;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInstant;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRInteger;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueSeverity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRIssueType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLinkType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRListStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRLocationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMarkdown;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeasmnt_Principle;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationAdministrationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationDispenseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMedicationStatementStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMessageSignificanceCategory;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRMeta;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNameUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemIdentifierType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNamingSystemType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrative;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNarrativeStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNoteType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRNutritionOrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationRelationshipType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRObservationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROperationParameterUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIROrderStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantRequired;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipantStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRParticipationStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPeriod;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPositiveInt;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestPriority;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProcedureStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRPropertyRepresentation;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRProvenanceEntityRole;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantityComparator;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRAge;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRCount;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDistance;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRDuration;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRMoney;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuantity\FHIRSimpleQuantity;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireResponseStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRQuestionnaireStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRange;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRatio;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReference;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRReferralStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRemittanceOutcome;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResourceVersionPolicy;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRResponseType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRRestfulConformanceMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledData;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSampledDataDataType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchEntryMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchModifierCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSearchParamType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSignature;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlicingRules;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSlotStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSpecimenStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRString;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRStructureDefinitionKind;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionChannelType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSubscriptionStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyDeliveryStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSupplyRequestStatus;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRSystemRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTiming\FHIRTimingRepeat;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTransactionMode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRTypeRestfulInteraction;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnitsOfTime;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnknownContentCode;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUnsignedInt;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUri;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUse;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRUuid;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionBase;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRVisionEyes;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRElement\FHIRXPathUsageType;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIdPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRInstantPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRIntegerPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRMarkdownPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIROidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRPositiveIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResourceContainer;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBinary;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRBundle;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAccount;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAllergyIntolerance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAppointmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRAuditEvent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBasic;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRBodySite;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCarePlan;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaim;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClaimResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRClinicalImpression;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCommunicationRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRComposition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConceptMap;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCondition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRConformance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRContract;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRCoverage;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDataElement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDetectedIssue;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDevice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceComponent;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceMetric;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDeviceUseStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticOrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDiagnosticReport;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentManifest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRDocumentReference;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREligibilityResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREncounter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREnrollmentResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIREpisodeOfCare;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRExplanationOfBenefit;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFamilyMemberHistory;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRFlag;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGoal;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRGroup;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRHealthcareService;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingObjectSelection;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImagingStudy;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImmunizationRecommendation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRImplementationGuide;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRList;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRLocation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedia;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedication;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationAdministration;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationDispense;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationOrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMedicationStatement;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRMessageHeader;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNamingSystem;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRNutritionOrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRObservation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROperationOutcome;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrder;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrderResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIROrganization;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPatient;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentNotice;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPaymentReconciliation;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRPractitioner;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedure;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcedureRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProcessResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRProvenance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaire;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRQuestionnaireResponse;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRReferralRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRelatedPerson;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRRiskAssessment;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSchedule;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSearchParameter;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSlot;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSpecimen;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRStructureDefinition;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubscription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSubstance;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyDelivery;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRSupplyRequest;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRTestScript;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRValueSet;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRDomainResource\FHIRVisionPrescription;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRResource\FHIRParameters;
        $this->assertTrue(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return true.', $type::class));
        $this->assertTrue(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return true.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRSampledDataDataTypePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAccountStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRActionListList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAddressUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAdministrativeGenderList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAggregationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCertaintyList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceCriticalityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAllergyIntoleranceTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAnswerFormatList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAppointmentStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionDirectionTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionOperatorTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAssertionResponseTypesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventActionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRAuditEventParticipantNetworkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBindingStrengthList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRBundleTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanActivityStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanRelationshipList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCarePlanStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClaimTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRClinicalImpressionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCommunicationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionAttestationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRCompositionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConceptMapEquivalenceList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionalDeleteStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConditionVerificationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceEventModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceResourceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConformanceStatementKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRConstraintSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointSystemList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContactPointUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRContentTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDataElementStringencyList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDaysOfWeekList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDetectedIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationStateList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCalibrationTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricColorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceMetricOperationalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDeviceUseRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDiagnosticReportStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDigitalMediaTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentReferenceStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRDocumentRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterClassList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREncounterStateList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREpisodeOfCareStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIREventTimingList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRExtensionContextList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFamilyHistoryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFilterOperatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRFlagStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGoalStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGroupTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideDependencyTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuidePageKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRGuideResourcePurposeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRHTTPVerbList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentifierUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIdentityAssuranceLevelList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRInstanceAvailabilityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueSeverityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRIssueTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLinkTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRListStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRLocationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMeasmnt_PrincipleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationAdministrationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationDispenseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMedicationStatementStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRMessageSignificanceCategoryList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNameUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemIdentifierTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNamingSystemTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNarrativeStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNoteTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRNutritionOrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationRelationshipTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRObservationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROperationParameterUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIROrderStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantRequiredList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipantStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRParticipationStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestPriorityList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProcedureStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRPropertyRepresentationList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRProvenanceEntityRoleList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuantityComparatorList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireResponseStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRQuestionnaireStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRReferralStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRemittanceOutcomeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResourceVersionPolicyList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRResponseTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRRestfulConformanceModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchEntryModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchModifierCodeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSearchParamTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlicingRulesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSlotStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSpecimenStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRStructureDefinitionKindList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionChannelTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSubscriptionStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyDeliveryStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSupplyRequestStatusList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRSystemRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTransactionModeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRTypeRestfulInteractionList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnitsOfTimeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUnknownContentCodeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRUseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionBaseList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRVisionEyesList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRStringPrimitive\FHIRXPathUsageTypeList;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRTimePrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUnsignedIntPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUriPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRUuidPrimitive;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
        $type = new \DCarbone\PHPFHIRGenerated\Versions\DSTU2\Types\FHIRXHTML;
        $this->assertFalse(VersionTypeMap::isContainableType($type), sprintf('Expected instance of "%s" to return false.', $type::class));
        $this->assertFalse(VersionTypeMap::isContainableType($type->_getFHIRTypeName()), sprintf('Expected input "%s" to return false.', $type->_getFHIRTypeName()));
    }

    public function testIsContainableTypeWithXML()
    {
        $sxe = new \SimpleXMLElement('<Account></Account>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AccountStatus></AccountStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AccountStatus-list></AccountStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionList></ActionList>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ActionList-list></ActionList-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Address></Address>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressType></AddressType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressType-list></AddressType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse></AddressUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AddressUse-list></AddressUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrativeGender></AdministrativeGender>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AdministrativeGender-list></AdministrativeGender-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Age></Age>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode></AggregationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AggregationMode-list></AggregationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance></AllergyIntolerance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntolerance.Reaction></AllergyIntolerance.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCategory></AllergyIntoleranceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCategory-list></AllergyIntoleranceCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCertainty></AllergyIntoleranceCertainty>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCertainty-list></AllergyIntoleranceCertainty-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCriticality></AllergyIntoleranceCriticality>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceCriticality-list></AllergyIntoleranceCriticality-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceSeverity></AllergyIntoleranceSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceSeverity-list></AllergyIntoleranceSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceStatus></AllergyIntoleranceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceStatus-list></AllergyIntoleranceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceType></AllergyIntoleranceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AllergyIntoleranceType-list></AllergyIntoleranceType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Annotation></Annotation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AnswerFormat></AnswerFormat>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AnswerFormat-list></AnswerFormat-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment></Appointment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Appointment.Participant></Appointment.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentResponse></AppointmentResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentStatus></AppointmentStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AppointmentStatus-list></AppointmentStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionDirectionType></AssertionDirectionType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionDirectionType-list></AssertionDirectionType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionOperatorType></AssertionOperatorType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionOperatorType-list></AssertionOperatorType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionResponseTypes></AssertionResponseTypes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AssertionResponseTypes-list></AssertionResponseTypes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Attachment></Attachment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent></AuditEvent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Detail></AuditEvent.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Event></AuditEvent.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Network></AuditEvent.Network>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Object></AuditEvent.Object>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Participant></AuditEvent.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEvent.Source></AuditEvent.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAction></AuditEventAction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventAction-list></AuditEventAction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventOutcome></AuditEventOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventOutcome-list></AuditEventOutcome-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventParticipantNetworkType></AuditEventParticipantNetworkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<AuditEventParticipantNetworkType-list></AuditEventParticipantNetworkType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BackboneElement></BackboneElement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary></base64Binary>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<base64Binary-primitive></base64Binary-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Basic></Basic>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Binary></Binary>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingStrength></BindingStrength>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BindingStrength-list></BindingStrength-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BodySite></BodySite>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean></boolean>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<boolean-primitive></boolean-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle></Bundle>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Entry></Bundle.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Link></Bundle.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Request></Bundle.Request>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Response></Bundle.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Bundle.Search></Bundle.Search>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BundleType></BundleType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<BundleType-list></BundleType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan></CarePlan>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Activity></CarePlan.Activity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Detail></CarePlan.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.Participant></CarePlan.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlan.RelatedPlan></CarePlan.RelatedPlan>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityStatus></CarePlanActivityStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanActivityStatus-list></CarePlanActivityStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanRelationship></CarePlanRelationship>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanRelationship-list></CarePlanRelationship-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanStatus></CarePlanStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CarePlanStatus-list></CarePlanStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim></Claim>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Coverage></Claim.Coverage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Detail></Claim.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Diagnosis></Claim.Diagnosis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Item></Claim.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.MissingTeeth></Claim.MissingTeeth>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Payee></Claim.Payee>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.Prosthesis></Claim.Prosthesis>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Claim.SubDetail></Claim.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse></ClaimResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.AddItem></ClaimResponse.AddItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication></ClaimResponse.Adjudication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication1></ClaimResponse.Adjudication1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication2></ClaimResponse.Adjudication2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication3></ClaimResponse.Adjudication3>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Adjudication4></ClaimResponse.Adjudication4>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Coverage></ClaimResponse.Coverage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Detail></ClaimResponse.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Detail1></ClaimResponse.Detail1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Error></ClaimResponse.Error>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Item></ClaimResponse.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.Note></ClaimResponse.Note>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimResponse.SubDetail></ClaimResponse.SubDetail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimType></ClaimType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClaimType-list></ClaimType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression></ClinicalImpression>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression.Finding></ClinicalImpression.Finding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression.Investigations></ClinicalImpression.Investigations>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpression.RuledOut></ClinicalImpression.RuledOut>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpressionStatus></ClinicalImpressionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ClinicalImpressionStatus-list></ClinicalImpressionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code></code>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<code-primitive></code-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CodeableConcept></CodeableConcept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coding></Coding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Communication></Communication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Communication.Payload></Communication.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest></CommunicationRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequest.Payload></CommunicationRequest.Payload>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequestStatus></CommunicationRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationRequestStatus-list></CommunicationRequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationStatus></CommunicationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CommunicationStatus-list></CommunicationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition></Composition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Attester></Composition.Attester>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Event></Composition.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Composition.Section></Composition.Section>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionAttestationMode></CompositionAttestationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionAttestationMode-list></CompositionAttestationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus></CompositionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<CompositionStatus-list></CompositionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap></ConceptMap>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Contact></ConceptMap.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.DependsOn></ConceptMap.DependsOn>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Element></ConceptMap.Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMap.Target></ConceptMap.Target>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapEquivalence></ConceptMapEquivalence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConceptMapEquivalence-list></ConceptMapEquivalence-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition></Condition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Evidence></Condition.Evidence>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Condition.Stage></Condition.Stage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalDeleteStatus></ConditionalDeleteStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionalDeleteStatus-list></ConditionalDeleteStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionVerificationStatus></ConditionVerificationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConditionVerificationStatus-list></ConditionVerificationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance></Conformance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Certificate></Conformance.Certificate>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Contact></Conformance.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Document></Conformance.Document>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Endpoint></Conformance.Endpoint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Event></Conformance.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Implementation></Conformance.Implementation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Interaction></Conformance.Interaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Interaction1></Conformance.Interaction1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Messaging></Conformance.Messaging>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Operation></Conformance.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Resource></Conformance.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Rest></Conformance.Rest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.SearchParam></Conformance.SearchParam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Security></Conformance.Security>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Conformance.Software></Conformance.Software>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceEventMode></ConformanceEventMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceEventMode-list></ConformanceEventMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceResourceStatus></ConformanceResourceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceResourceStatus-list></ConformanceResourceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceStatementKind></ConformanceStatementKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConformanceStatementKind-list></ConformanceStatementKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity></ConstraintSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ConstraintSeverity-list></ConstraintSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPoint></ContactPoint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointSystem></ContactPointSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointSystem-list></ContactPointSystem-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointUse></ContactPointUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContactPointUse-list></ContactPointUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContentType></ContentType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ContentType-list></ContentType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract></Contract>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Actor></Contract.Actor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Actor1></Contract.Actor1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Friendly></Contract.Friendly>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Legal></Contract.Legal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Rule></Contract.Rule>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Signer></Contract.Signer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.Term></Contract.Term>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.ValuedItem></Contract.ValuedItem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Contract.ValuedItem1></Contract.ValuedItem1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Count></Count>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Coverage></Coverage>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElement></DataElement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElement.Contact></DataElement.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElement.Mapping></DataElement.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElementStringency></DataElementStringency>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DataElementStringency-list></DataElementStringency-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date></date>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<date-primitive></date-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime></dateTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<dateTime-primitive></dateTime-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DaysOfWeek></DaysOfWeek>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DaysOfWeek-list></DaysOfWeek-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal></decimal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<decimal-primitive></decimal-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue></DetectedIssue>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssue.Mitigation></DetectedIssue.Mitigation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueSeverity></DetectedIssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DetectedIssueSeverity-list></DetectedIssueSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Device></Device>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceComponent></DeviceComponent>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceComponent.ProductionSpecification></DeviceComponent.ProductionSpecification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetric></DeviceMetric>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetric.Calibration></DeviceMetric.Calibration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationState></DeviceMetricCalibrationState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationState-list></DeviceMetricCalibrationState-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationType></DeviceMetricCalibrationType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCalibrationType-list></DeviceMetricCalibrationType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCategory></DeviceMetricCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricCategory-list></DeviceMetricCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricColor></DeviceMetricColor>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricColor-list></DeviceMetricColor-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricOperationalStatus></DeviceMetricOperationalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceMetricOperationalStatus-list></DeviceMetricOperationalStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceStatus></DeviceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceStatus-list></DeviceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseRequest></DeviceUseRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseRequestPriority></DeviceUseRequestPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseRequestPriority-list></DeviceUseRequestPriority-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseRequestStatus></DeviceUseRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseRequestStatus-list></DeviceUseRequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DeviceUseStatement></DeviceUseStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrder></DiagnosticOrder>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrder.Event></DiagnosticOrder.Event>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrder.Item></DiagnosticOrder.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderPriority></DiagnosticOrderPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderPriority-list></DiagnosticOrderPriority-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderStatus></DiagnosticOrderStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticOrderStatus-list></DiagnosticOrderStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport></DiagnosticReport>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReport.Image></DiagnosticReport.Image>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus></DiagnosticReportStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DiagnosticReportStatus-list></DiagnosticReportStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DigitalMediaType></DigitalMediaType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DigitalMediaType-list></DigitalMediaType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Distance></Distance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest></DocumentManifest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest.Content></DocumentManifest.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentManifest.Related></DocumentManifest.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode></DocumentMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentMode-list></DocumentMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference></DocumentReference>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Content></DocumentReference.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Context></DocumentReference.Context>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.Related></DocumentReference.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReference.RelatesTo></DocumentReference.RelatesTo>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus></DocumentReferenceStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentReferenceStatus-list></DocumentReferenceStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentRelationshipType></DocumentRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DocumentRelationshipType-list></DocumentRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<DomainResource></DomainResource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Duration></Duration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Element></Element>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition></ElementDefinition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Base></ElementDefinition.Base>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Binding></ElementDefinition.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Constraint></ElementDefinition.Constraint>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Mapping></ElementDefinition.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Slicing></ElementDefinition.Slicing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ElementDefinition.Type></ElementDefinition.Type>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityRequest></EligibilityRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EligibilityResponse></EligibilityResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter></Encounter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Hospitalization></Encounter.Hospitalization>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Location></Encounter.Location>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.Participant></Encounter.Participant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Encounter.StatusHistory></Encounter.StatusHistory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterClass></EncounterClass>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterClass-list></EncounterClass-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterLocationStatus></EncounterLocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterLocationStatus-list></EncounterLocationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterState></EncounterState>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EncounterState-list></EncounterState-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentRequest></EnrollmentRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EnrollmentResponse></EnrollmentResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare></EpisodeOfCare>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.CareTeam></EpisodeOfCare.CareTeam>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCare.StatusHistory></EpisodeOfCare.StatusHistory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCareStatus></EpisodeOfCareStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EpisodeOfCareStatus-list></EpisodeOfCareStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming></EventTiming>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<EventTiming-list></EventTiming-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExplanationOfBenefit></ExplanationOfBenefit>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Extension></Extension>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContext></ExtensionContext>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ExtensionContext-list></ExtensionContext-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistoryStatus></FamilyHistoryStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyHistoryStatus-list></FamilyHistoryStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory></FamilyMemberHistory>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FamilyMemberHistory.Condition></FamilyMemberHistory.Condition>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator></FilterOperator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FilterOperator-list></FilterOperator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Flag></Flag>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FlagStatus></FlagStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<FlagStatus-list></FlagStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Goal></Goal>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Goal.Outcome></Goal.Outcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GoalStatus></GoalStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GoalStatus-list></GoalStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group></Group>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Characteristic></Group.Characteristic>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Group.Member></Group.Member>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType></GroupType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GroupType-list></GroupType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuideDependencyType></GuideDependencyType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuideDependencyType-list></GuideDependencyType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidePageKind></GuidePageKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuidePageKind-list></GuidePageKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuideResourcePurpose></GuideResourcePurpose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<GuideResourcePurpose-list></GuideResourcePurpose-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService></HealthcareService>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService.AvailableTime></HealthcareService.AvailableTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService.NotAvailable></HealthcareService.NotAvailable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HealthcareService.ServiceType></HealthcareService.ServiceType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HTTPVerb></HTTPVerb>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HTTPVerb-list></HTTPVerb-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<HumanName></HumanName>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id></id>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<id-primitive></id-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Identifier></Identifier>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse></IdentifierUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentifierUse-list></IdentifierUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentityAssuranceLevel></IdentityAssuranceLevel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IdentityAssuranceLevel-list></IdentityAssuranceLevel-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingObjectSelection></ImagingObjectSelection>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingObjectSelection.Frames></ImagingObjectSelection.Frames>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingObjectSelection.Instance></ImagingObjectSelection.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingObjectSelection.Series></ImagingObjectSelection.Series>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingObjectSelection.Study></ImagingObjectSelection.Study>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy></ImagingStudy>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Instance></ImagingStudy.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImagingStudy.Series></ImagingStudy.Series>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization></Immunization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Explanation></Immunization.Explanation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.Reaction></Immunization.Reaction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Immunization.VaccinationProtocol></Immunization.VaccinationProtocol>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation></ImmunizationRecommendation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.DateCriterion></ImmunizationRecommendation.DateCriterion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Protocol></ImmunizationRecommendation.Protocol>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImmunizationRecommendation.Recommendation></ImmunizationRecommendation.Recommendation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide></ImplementationGuide>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Contact></ImplementationGuide.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Dependency></ImplementationGuide.Dependency>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Global></ImplementationGuide.Global>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Package></ImplementationGuide.Package>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Page></ImplementationGuide.Page>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ImplementationGuide.Resource></ImplementationGuide.Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InstanceAvailability></InstanceAvailability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<InstanceAvailability-list></InstanceAvailability-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant></instant>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<instant-primitive></instant-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer></integer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<integer-primitive></integer-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity></IssueSeverity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueSeverity-list></IssueSeverity-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueType></IssueType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<IssueType-list></IssueType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType></LinkType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LinkType-list></LinkType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List></List>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<List.Entry></List.Entry>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode></ListMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListMode-list></ListMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListStatus></ListStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ListStatus-list></ListStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location></Location>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Location.Position></Location.Position>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode></LocationMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationMode-list></LocationMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus></LocationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<LocationStatus-list></LocationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<markdown></markdown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<markdown-primitive></markdown-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measmnt-Principle></Measmnt-Principle>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Measmnt-Principle-list></Measmnt-Principle-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Media></Media>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication></Medication>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Batch></Medication.Batch>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Content></Medication.Content>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Ingredient></Medication.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Package></Medication.Package>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Medication.Product></Medication.Product>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration></MedicationAdministration>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministration.Dosage></MedicationAdministration.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatus></MedicationAdministrationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationAdministrationStatus-list></MedicationAdministrationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense></MedicationDispense>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.DosageInstruction></MedicationDispense.DosageInstruction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispense.Substitution></MedicationDispense.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatus></MedicationDispenseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationDispenseStatus-list></MedicationDispenseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationOrder></MedicationOrder>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationOrder.DispenseRequest></MedicationOrder.DispenseRequest>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationOrder.DosageInstruction></MedicationOrder.DosageInstruction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationOrder.Substitution></MedicationOrder.Substitution>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationOrderStatus></MedicationOrderStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationOrderStatus-list></MedicationOrderStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement></MedicationStatement>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatement.Dosage></MedicationStatement.Dosage>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementStatus></MedicationStatementStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MedicationStatementStatus-list></MedicationStatementStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader></MessageHeader>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Destination></MessageHeader.Destination>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Response></MessageHeader.Response>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageHeader.Source></MessageHeader.Source>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory></MessageSignificanceCategory>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<MessageSignificanceCategory-list></MessageSignificanceCategory-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Meta></Meta>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Money></Money>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse></NameUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NameUse-list></NameUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem></NamingSystem>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem.Contact></NamingSystem.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystem.UniqueId></NamingSystem.UniqueId>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemIdentifierType></NamingSystemIdentifierType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemIdentifierType-list></NamingSystemIdentifierType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemType></NamingSystemType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NamingSystemType-list></NamingSystemType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Narrative></Narrative>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus></NarrativeStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NarrativeStatus-list></NarrativeStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NoteType></NoteType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NoteType-list></NoteType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder></NutritionOrder>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Administration></NutritionOrder.Administration>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.EnteralFormula></NutritionOrder.EnteralFormula>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Nutrient></NutritionOrder.Nutrient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.OralDiet></NutritionOrder.OralDiet>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Supplement></NutritionOrder.Supplement>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrder.Texture></NutritionOrder.Texture>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrderStatus></NutritionOrderStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<NutritionOrderStatus-list></NutritionOrderStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation></Observation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.Component></Observation.Component>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.ReferenceRange></Observation.ReferenceRange>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Observation.Related></Observation.Related>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRelationshipType></ObservationRelationshipType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationRelationshipType-list></ObservationRelationshipType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus></ObservationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ObservationStatus-list></ObservationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid></oid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<oid-primitive></oid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition></OperationDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Binding></OperationDefinition.Binding>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Contact></OperationDefinition.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationDefinition.Parameter></OperationDefinition.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationKind></OperationKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationKind-list></OperationKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome></OperationOutcome>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationOutcome.Issue></OperationOutcome.Issue>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterUse></OperationParameterUse>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OperationParameterUse-list></OperationParameterUse-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Order></Order>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Order.When></Order.When>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrderResponse></OrderResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrderStatus></OrderStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<OrderStatus-list></OrderStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization></Organization>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Organization.Contact></Organization.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Parameters></Parameters>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Parameters.Parameter></Parameters.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantRequired></ParticipantRequired>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantRequired-list></ParticipantRequired-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantStatus></ParticipantStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipantStatus-list></ParticipantStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipationStatus></ParticipationStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ParticipationStatus-list></ParticipationStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient></Patient>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Animal></Patient.Animal>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Communication></Patient.Communication>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Contact></Patient.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Patient.Link></Patient.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentNotice></PaymentNotice>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation></PaymentReconciliation>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation.Detail></PaymentReconciliation.Detail>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PaymentReconciliation.Note></PaymentReconciliation.Note>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Period></Period>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person></Person>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Person.Link></Person.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<positiveInt></positiveInt>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<positiveInt-primitive></positiveInt-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner></Practitioner>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner.PractitionerRole></Practitioner.PractitionerRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Practitioner.Qualification></Practitioner.Qualification>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure></Procedure>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.FocalDevice></Procedure.FocalDevice>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Procedure.Performer></Procedure.Performer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequest></ProcedureRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequestPriority></ProcedureRequestPriority>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequestPriority-list></ProcedureRequestPriority-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequestStatus></ProcedureRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureRequestStatus-list></ProcedureRequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureStatus></ProcedureStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcedureStatus-list></ProcedureStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessRequest></ProcessRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessRequest.Item></ProcessRequest.Item>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessResponse></ProcessResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProcessResponse.Notes></ProcessResponse.Notes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation></PropertyRepresentation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<PropertyRepresentation-list></PropertyRepresentation-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance></Provenance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Agent></Provenance.Agent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.Entity></Provenance.Entity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Provenance.RelatedAgent></Provenance.RelatedAgent>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole></ProvenanceEntityRole>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ProvenanceEntityRole-list></ProvenanceEntityRole-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Quantity></Quantity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityComparator></QuantityComparator>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuantityComparator-list></QuantityComparator-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire></Questionnaire>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Group></Questionnaire.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Questionnaire.Question></Questionnaire.Question>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse></QuestionnaireResponse>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Answer></QuestionnaireResponse.Answer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Group></QuestionnaireResponse.Group>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponse.Question></QuestionnaireResponse.Question>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponseStatus></QuestionnaireResponseStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireResponseStatus-list></QuestionnaireResponseStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireStatus></QuestionnaireStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<QuestionnaireStatus-list></QuestionnaireStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Range></Range>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Ratio></Ratio>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Reference></Reference>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferralRequest></ReferralRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferralStatus></ReferralStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ReferralStatus-list></ReferralStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RelatedPerson></RelatedPerson>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RemittanceOutcome></RemittanceOutcome>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RemittanceOutcome-list></RemittanceOutcome-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Resource></Resource>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceContainer></ResourceContainer>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceVersionPolicy></ResourceVersionPolicy>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResourceVersionPolicy-list></ResourceVersionPolicy-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType></ResponseType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ResponseType-list></ResponseType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulConformanceMode></RestfulConformanceMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RestfulConformanceMode-list></RestfulConformanceMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RiskAssessment></RiskAssessment>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<RiskAssessment.Prediction></RiskAssessment.Prediction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledData></SampledData>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType></SampledDataDataType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SampledDataDataType-primitive></SampledDataDataType-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Schedule></Schedule>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchEntryMode></SearchEntryMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchEntryMode-list></SearchEntryMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchModifierCode></SearchModifierCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchModifierCode-list></SearchModifierCode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParameter></SearchParameter>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParameter.Contact></SearchParameter.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType></SearchParamType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SearchParamType-list></SearchParamType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Signature></Signature>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SimpleQuantity></SimpleQuantity>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules></SlicingRules>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlicingRules-list></SlicingRules-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Slot></Slot>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlotStatus></SlotStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SlotStatus-list></SlotStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen></Specimen>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Collection></Specimen.Collection>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Container></Specimen.Container>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Specimen.Treatment></Specimen.Treatment>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenStatus></SpecimenStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SpecimenStatus-list></SpecimenStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string></string>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<string-primitive></string-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition></StructureDefinition>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Contact></StructureDefinition.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Differential></StructureDefinition.Differential>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Mapping></StructureDefinition.Mapping>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinition.Snapshot></StructureDefinition.Snapshot>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinitionKind></StructureDefinitionKind>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<StructureDefinitionKind-list></StructureDefinitionKind-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription></Subscription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Subscription.Channel></Subscription.Channel>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionChannelType></SubscriptionChannelType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionChannelType-list></SubscriptionChannelType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatus></SubscriptionStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SubscriptionStatus-list></SubscriptionStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance></Substance>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Ingredient></Substance.Ingredient>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Substance.Instance></Substance.Instance>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDelivery></SupplyDelivery>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDeliveryStatus></SupplyDeliveryStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyDeliveryStatus-list></SupplyDeliveryStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest></SupplyRequest>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequest.When></SupplyRequest.When>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequestStatus></SupplyRequestStatus>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SupplyRequestStatus-list></SupplyRequestStatus-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemRestfulInteraction></SystemRestfulInteraction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<SystemRestfulInteraction-list></SystemRestfulInteraction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript></TestScript>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action></TestScript.Action>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action1></TestScript.Action1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Action2></TestScript.Action2>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Assert></TestScript.Assert>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Capability></TestScript.Capability>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Contact></TestScript.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Fixture></TestScript.Fixture>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Link></TestScript.Link>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Metadata></TestScript.Metadata>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Operation></TestScript.Operation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.RequestHeader></TestScript.RequestHeader>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Setup></TestScript.Setup>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Teardown></TestScript.Teardown>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Test></TestScript.Test>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TestScript.Variable></TestScript.Variable>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<time></time>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<time-primitive></time-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Timing></Timing>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Timing.Repeat></Timing.Repeat>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TransactionMode></TransactionMode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TransactionMode-list></TransactionMode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeRestfulInteraction></TypeRestfulInteraction>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<TypeRestfulInteraction-list></TypeRestfulInteraction-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime></UnitsOfTime>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnitsOfTime-list></UnitsOfTime-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnknownContentCode></UnknownContentCode>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<UnknownContentCode-list></UnknownContentCode-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<unsignedInt></unsignedInt>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<unsignedInt-primitive></unsignedInt-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri></uri>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uri-primitive></uri-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Use></Use>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<Use-list></Use-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid></uuid>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<uuid-primitive></uuid-primitive>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet></ValueSet>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.CodeSystem></ValueSet.CodeSystem>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Compose></ValueSet.Compose>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Concept></ValueSet.Concept>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Concept1></ValueSet.Concept1>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Contact></ValueSet.Contact>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Contains></ValueSet.Contains>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Designation></ValueSet.Designation>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Expansion></ValueSet.Expansion>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Filter></ValueSet.Filter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Include></ValueSet.Include>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<ValueSet.Parameter></ValueSet.Parameter>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionBase></VisionBase>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionBase-list></VisionBase-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionEyes></VisionEyes>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionEyes-list></VisionEyes-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription></VisionPrescription>');
        $this->assertTrue(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return true.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<VisionPrescription.Dispense></VisionPrescription.Dispense>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XHTML></XHTML>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XPathUsageType></XPathUsageType>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
        $sxe = new \SimpleXMLElement('<XPathUsageType-list></XPathUsageType-list>');
        $this->assertFalse(VersionTypeMap::isContainableType($sxe), sprintf('Expected input "%s" to return false.', $sxe->saveXML()));
    }

    public function testIsContainableTypeWithJSON()
    {
        $json = new \stdClass();
        $json->resourceType = 'Account';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AccountStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AccountStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionList';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ActionList-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Address';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AddressUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrativeGender';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AdministrativeGender-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Age';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AggregationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntolerance.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCertainty';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCertainty-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCriticality';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceCriticality-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AllergyIntoleranceType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Annotation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AnswerFormat';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AnswerFormat-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Appointment.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AppointmentStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionDirectionType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionDirectionType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionOperatorType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionOperatorType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionResponseTypes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AssertionResponseTypes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Attachment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Network';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Object';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEvent.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventAction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventOutcome-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventParticipantNetworkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'AuditEventParticipantNetworkType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BackboneElement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'base64Binary-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Basic';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Binary';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingStrength';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BindingStrength-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BodySite';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'boolean-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Request';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Bundle.Search';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BundleType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'BundleType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Activity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlan.RelatedPlan';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanActivityStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanRelationship';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanRelationship-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CarePlanStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Coverage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Diagnosis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.MissingTeeth';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Payee';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.Prosthesis';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Claim.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.AddItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication3';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Adjudication4';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Coverage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Detail1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Error';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.Note';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimResponse.SubDetail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClaimType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression.Finding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression.Investigations';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpression.RuledOut';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpressionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ClinicalImpressionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'code-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CodeableConcept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Communication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Communication.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequest.Payload';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationRequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CommunicationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Attester';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Composition.Section';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionAttestationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionAttestationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'CompositionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.DependsOn';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMap.Target';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapEquivalence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConceptMapEquivalence-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Evidence';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Condition.Stage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalDeleteStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionalDeleteStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionVerificationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConditionVerificationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Certificate';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Document';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Endpoint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Implementation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Interaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Interaction1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Messaging';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Rest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.SearchParam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Security';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Conformance.Software';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceEventMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceEventMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceResourceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceResourceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceStatementKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConformanceStatementKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ConstraintSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPoint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointSystem-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContactPointUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContentType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ContentType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Actor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Actor1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Friendly';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Legal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Rule';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Signer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.Term';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.ValuedItem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Contract.ValuedItem1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Count';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Coverage';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElement.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElement.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElementStringency';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DataElementStringency-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'date-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'dateTime-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DaysOfWeek';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DaysOfWeek-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'decimal-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssue.Mitigation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DetectedIssueSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Device';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceComponent';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceComponent.ProductionSpecification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetric';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetric.Calibration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationState-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCalibrationType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricColor';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricColor-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricOperationalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceMetricOperationalStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseRequestPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseRequestPriority-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseRequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DeviceUseStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrder';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrder.Event';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrder.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderPriority-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticOrderStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReport.Image';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DiagnosticReportStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DigitalMediaType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DigitalMediaType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Distance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentManifest.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Context';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReference.RelatesTo';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentReferenceStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DocumentRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'DomainResource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Duration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Element';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Base';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Constraint';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Slicing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ElementDefinition.Type';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EligibilityResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Hospitalization';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Location';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.Participant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Encounter.StatusHistory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterClass';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterClass-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterLocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterLocationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterState';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EncounterState-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EnrollmentResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.CareTeam';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCare.StatusHistory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCareStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EpisodeOfCareStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'EventTiming-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExplanationOfBenefit';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Extension';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContext';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ExtensionContext-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistoryStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyHistoryStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FamilyMemberHistory.Condition';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FilterOperator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Flag';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FlagStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'FlagStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Goal';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Goal.Outcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GoalStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GoalStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Characteristic';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Group.Member';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GroupType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuideDependencyType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuideDependencyType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidePageKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuidePageKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuideResourcePurpose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'GuideResourcePurpose-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService.AvailableTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService.NotAvailable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HealthcareService.ServiceType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HTTPVerb';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HTTPVerb-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'HumanName';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'id-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Identifier';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentifierUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentityAssuranceLevel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IdentityAssuranceLevel-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingObjectSelection';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingObjectSelection.Frames';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingObjectSelection.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingObjectSelection.Series';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingObjectSelection.Study';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImagingStudy.Series';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Explanation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.Reaction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Immunization.VaccinationProtocol';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.DateCriterion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Protocol';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImmunizationRecommendation.Recommendation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Dependency';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Global';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Package';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Page';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ImplementationGuide.Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InstanceAvailability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'InstanceAvailability-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'instant-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'integer-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueSeverity-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'IssueType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LinkType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'List.Entry';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ListStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Location.Position';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'LocationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'markdown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'markdown-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measmnt-Principle';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Measmnt-Principle-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Media';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Batch';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Content';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Package';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Medication.Product';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministration.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationAdministrationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.DosageInstruction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispense.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationDispenseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationOrder';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationOrder.DispenseRequest';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationOrder.DosageInstruction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationOrder.Substitution';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationOrderStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationOrderStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatement.Dosage';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MedicationStatementStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Destination';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Response';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageHeader.Source';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'MessageSignificanceCategory-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Meta';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Money';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NameUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystem.UniqueId';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemIdentifierType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemIdentifierType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NamingSystemType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Narrative';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NarrativeStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NoteType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NoteType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Administration';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.EnteralFormula';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Nutrient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.OralDiet';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Supplement';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrder.Texture';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrderStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'NutritionOrderStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.Component';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.ReferenceRange';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Observation.Related';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRelationshipType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationRelationshipType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ObservationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'oid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Binding';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationDefinition.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationOutcome.Issue';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterUse';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OperationParameterUse-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Order';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Order.When';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrderResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrderStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'OrderStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Organization.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Parameters';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Parameters.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantRequired';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantRequired-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipantStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipationStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ParticipationStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Animal';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Communication';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Patient.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentNotice';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation.Detail';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PaymentReconciliation.Note';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Period';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Person.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'positiveInt';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'positiveInt-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner.PractitionerRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Practitioner.Qualification';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.FocalDevice';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Procedure.Performer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequestPriority';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequestPriority-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureRequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcedureStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessRequest.Item';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProcessResponse.Notes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'PropertyRepresentation-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Agent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.Entity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Provenance.RelatedAgent';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ProvenanceEntityRole-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Quantity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityComparator';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuantityComparator-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Questionnaire.Question';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Answer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Group';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponse.Question';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponseStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireResponseStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'QuestionnaireStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Range';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Ratio';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Reference';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferralRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferralStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ReferralStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RelatedPerson';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RemittanceOutcome';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RemittanceOutcome-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Resource';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceContainer';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceVersionPolicy';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResourceVersionPolicy-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ResponseType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulConformanceMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RestfulConformanceMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RiskAssessment';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'RiskAssessment.Prediction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledData';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SampledDataDataType-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Schedule';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchEntryMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchEntryMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchModifierCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchModifierCode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParameter';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParameter.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SearchParamType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Signature';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SimpleQuantity';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlicingRules-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Slot';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlotStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SlotStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Collection';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Container';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Specimen.Treatment';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SpecimenStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'string-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Differential';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Mapping';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinition.Snapshot';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinitionKind';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'StructureDefinitionKind-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Subscription.Channel';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionChannelType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionChannelType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SubscriptionStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Ingredient';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Substance.Instance';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDelivery';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDeliveryStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyDeliveryStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequest.When';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequestStatus';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SupplyRequestStatus-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemRestfulInteraction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'SystemRestfulInteraction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Action2';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Assert';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Capability';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Fixture';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Link';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Metadata';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Operation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.RequestHeader';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Setup';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Teardown';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Test';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TestScript.Variable';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'time';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'time-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Timing';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Timing.Repeat';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TransactionMode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TransactionMode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeRestfulInteraction';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'TypeRestfulInteraction-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnitsOfTime-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnknownContentCode';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'UnknownContentCode-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'unsignedInt';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'unsignedInt-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uri-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Use';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'Use-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'uuid-primitive';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.CodeSystem';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Compose';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Concept';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Concept1';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Contact';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Contains';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Designation';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Expansion';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Filter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Include';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'ValueSet.Parameter';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionBase';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionBase-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionEyes';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionEyes-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription';
        $this->assertTrue(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return true.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'VisionPrescription.Dispense';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XHTML';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XPathUsageType';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
        $json = new \stdClass();
        $json->resourceType = 'XPathUsageType-list';
        $this->assertFalse(VersionTypeMap::isContainableType($json), sprintf('Expected input "%s" to return false.', var_export($json, true)));
    }
}
